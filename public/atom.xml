<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I want jing jing</title>
  
  <subtitle>I want jing jing ,Don&#39;t ask me who is jing jing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iwantjingjing.com/"/>
  <updated>2022-07-18T09:53:12.438Z</updated>
  <id>http://iwantjingjing.com/</id>
  
  <author>
    <name>给予ππ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人月神话摘抄</title>
    <link href="http://iwantjingjing.com/2022/07/18/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E6%91%98%E6%8A%84/"/>
    <id>http://iwantjingjing.com/2022/07/18/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D%E6%91%98%E6%8A%84/</id>
    <published>2022-07-18T09:52:47.000Z</published>
    <updated>2022-07-18T09:53:12.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="焦油坑"><a href="#焦油坑" class="headerlink" title="焦油坑"></a>焦油坑</h2><ul><li><p>编程系统产品(Programming Systems Product)开发的工作量是供个人使用的、 独立开发的构件程序的九倍。我估计软件构件产品化引起了 3 倍工作量，将软件构件整合成 完整系统所需要的设计、集成和测试又强加了 3 倍的工作量，这些高成本的构件在根本上是 相互独立的。</p></li><li><p>编程行业“满足我们内心深处的创造渴望和愉悦所有人的共有情感”，提供了五种乐趣</p><ul><li>创建事物的快乐</li><li>开发对其他人有用的东西的乐趣</li><li>将可以活动、相互啮合的零部件组装成类似迷宫的东西，这个过程所体现出令人 神魂颠倒的魅力</li><li>面对不重复的任务，不间断学习的乐趣</li><li>工作在如此易于驾驭的介质上的乐趣——纯粹的思维活动，其存在、移动和运转<br>方式完全不同于实际物体</li></ul></li><li><p>苦恼</p><ul><li>将做事方式调整到追求完美，是学习编程的最困难部分</li><li>由其他人来设定目标，并且必须依靠自己无法控制的事物(特别是程序);权威 不等同于责任</li><li>实际情况看起来要比这一点好一些:真正的权威来自于每次任务的完成</li><li>任何创造性活动都伴随着枯燥艰苦的劳动，编程也不例外</li><li>人们通常期望项目在接近结束时，(bug、工作时间)能收敛得快一些，然而软件 项目的情况却是越接近完成，收敛得越慢</li><li>产品在即将完成时总面临着陈旧过时的威胁</li></ul></li></ul><h2 id="人月神话"><a href="#人月神话" class="headerlink" title="人月神话"></a>人月神话</h2><ul><li>缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素加起来影响还大。</li><li>良好的烹饪需要时间，某些任务无法在不损害结果的情况下加快速度。</li><li>所有的编程人员都是乐观主义者:“一切都将运作良好”。</li><li>由于编程人员通过纯粹的思维活动来开发，所以我们期待在实现过程中不会碰到困难</li><li>我们的构思是有缺陷的，因此总会有 bug</li><li>我们围绕成本核算的估计技术，混淆了工作量和项目进展。人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的。</li><li>在若干人员中分解任务会引发额外的沟通工作量——培训和相互沟通。</li><li>关于进度安排，我的经验是为 1/3 计划、1/6 编码、1/4 构件测试以及 1/4 系统测试。</li><li>作为一个学科，我们缺乏数据估计。</li><li>因为我们对自己的估计技术不确定，所以在管理和客户的压力下，我们常常缺 乏坚持的勇气。</li><li>Brook 法则:向进度落后的项目中增加人手，只会使进度更加落后。</li><li>向软件项目中增派人手从三个方面增加了项目必要的总体工作量:任务重新分 配本身和所造成的工作中断;培训新人员;额外的相互沟通。</li></ul><h2 id="外科手术队伍"><a href="#外科手术队伍" class="headerlink" title="外科手术队伍"></a>外科手术队伍</h2><ul><li>同样有两年经验而且在受到同样的培训的情况下，优秀的专业程序员的工作效率是较差程序员的十倍。(Sackman、Erikson 和 Grand)</li><li>Sackman、Erikson 和 Grand 的数据显示经验和实际表现之间没有相互联系。我怀疑这种现象是否普遍成立。</li><li>小型、精干队伍是最好的——尽可能的少。</li><li>两个人的团队，其中一个项目经理，常常是最佳的人员使用方法。[留意一下上帝 对婚姻的设计。]</li><li>对于真正意义上的大型系统，小型精干的队伍太慢了</li><li>实际上，绝大多数大型编程系统的经验显示出，一拥而上的开发方法是高成本、速 度缓慢、不充分的，开发出的产品无法进行概念上的集成</li><li>一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法——既能获得由 少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的 工作量。</li></ul><h2 id="贵族专制、民主政治和系统设计"><a href="#贵族专制、民主政治和系统设计" class="headerlink" title="贵族专制、民主政治和系统设计"></a>贵族专制、民主政治和系统设计</h2><ul><li>概念完整性是系统设计中最重要的考虑因素</li><li>功能与理解上的复杂程度的比值才是系统易用性设计的最终测试标准，而不仅仅是丰富的功能</li><li>为了获得概念完整性，设计必须由一个人或者具有共识的小型团队来完成</li><li>对于非常大型的项目，将设计方法、体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法</li><li>如果要得到系统概念上的完整性，那么必须控制这些概念，这实际上是一种无需任何歉意的贵族专制统治</li><li>纪律、规则对行业是有益的。外部的体系结构规定实际上是增强，而不是限制实现小组的创造性。</li><li>概念上统一的系统能更快地开发和测试。</li><li>体系结构、设计实现、物理实现的许多工作可以并发进行。<h2 id="画蛇添足"><a href="#画蛇添足" class="headerlink" title="画蛇添足"></a>画蛇添足</h2></li><li>尽早交流和持续沟通能使架构师有较好的成本意识，以及使开发人员获得对设计的信心，并且不会混淆各自的责任分工。</li><li>架构师如何成功地影响实现：<ul><li>牢记是开发人员承担创造性的实现责任；架构师只能提出建议。</li><li>时刻准备着为所指定的说明建议一种实现的方法，准备接受任何其他可行的方法。</li><li>对上述的建议保持低调和平静</li><li>准备对所建议的改进放弃坚持</li><li>听取开发人员在体系结构上改进的建议</li></ul></li><li>第二个系统是人们所设计的最危险的系统，通常的倾向是过分地进行设计。</li><li>为功能进行优先级排序是一个很有价值的规范化方法。</li></ul><h2 id="贯彻执行"><a href="#贯彻执行" class="headerlink" title="贯彻执行"></a>贯彻执行</h2><ul><li>即使是大型团队决策也必须是1个或两个人来完成，以保证决策一致性</li><li>必须明确定义体系结构中与先前定义不同的地方，重新定义的详细程度应该与原先的说明一致。</li><li>出于精确性的考虑，我们需要形式化的设计定义，同样，我们需要记叙性定义来加深理解。</li><li>必须采用形式化定义和记叙性定义中的一种作为标准，另一种作为辅助措施；它们都可以作为表达的标准。</li><li>设计实现，包括模拟仿真，可以充当一种形式化定义的方法；这种方法有一些严重的缺点。</li><li>直接整合是一种强制推行软件的结构性标准的方法。</li><li>如果起初至少有两种以上的实现，那么（体系结构）定义会更加整洁，更加规范。</li><li>允许体系架构师对实现人员的询问做出电话应答解释是非常重要的，并且必须进行日志记录和整理发布</li><li>项目经理最好的朋友就是他每天要面对的敌人——独立的产品测试机构/小组。<h2 id="为什么巴比伦塔会失败"><a href="#为什么巴比伦塔会失败" class="headerlink" title="为什么巴比伦塔会失败"></a>为什么巴比伦塔会失败</h2></li><li>巴比伦塔项目的失败是因为缺乏交流，以及交流的结果——组织。</li></ul><p><strong>交流</strong></p><ul><li>因为左手不知道右手在做什么，从而进度灾难、功能的不合理和系统缺陷纷纷出现。由于对其他人的各种假设，团队成员之间的理解开始出现偏差。</li><li>团队应该以尽可能多的方式进行相互之间的交流:非正式、常规项目会议，会上进行简要的技术陈述、共享的正式项目工作手册</li></ul><p><strong>项目工作手册</strong></p><ul><li>项目工作手册“不是独立的一篇文档，它是对项目必须产生的一系列文档进行组织 的一种结构。”</li><li>项目所有的文档都必须是该(工作手册)结构的一部分。</li><li>需要尽早和仔细地设计工作手册结构</li><li>事先制订了良好结构的工作手册“可以将后来书写的文字放置在合适的章节中”， 并且可以提高产品手册的质量。</li><li>每一个团队成员应该了解所有的材料(工作手册)。”[我想说的是，每个团队成 员应该能够看到所有材料，网页即可满足要求</li><li>实时更新是至关重要的。</li><li>工作手册的使用者应该将注意力集中在上次阅读后的变更，以及关于这些变更 重要性的评述。</li><li>OS/360 项目工作手册开始采用的是纸介质，后来换成了微缩胶片。</li><li>今天[即使在 1975 年]，共享的电子手册是能更好达到所有这些目标、更加低<br>廉、更加简单的机制。</li><li>仍然需要用变更条和修订日期[或具备同等功能的方法]来标记文字;仍然需要<br>后进先出(LIFO)的电子化变更小结</li><li>Parnas 强烈地认为使每个人看到每件事的目标是完全错误的;各个部分应该<br>被封装，从而没有人需要或者允许看到其他部分的内部结构，只需要了解接口。</li><li>Parnas 的建议的确是灾难的处方。[Parnas 让我认可了该观点，使我彻底地改变了想法。]</li></ul><p><strong>项目工作手册</strong></p><ul><li>团队组织的目标是为了减少必要的交流和协作量。</li><li>为了减少交流，组织结构包括了人力划分(division of labor)和限定职责 范围(specialization of function)。</li><li>传统的树状组织结构反映了权力的结构原理——不允许双重领导。</li><li>组织中的交流是网状，而不是树状结构，因而所有的特殊组织机制(往往体现<br>成组织结构图中的虚线部分)都是为了进行调整，以克服树状组织结构中交流缺乏的困难。</li><li>每个子项目具有两个领导角色——产品负责人、技术主管或结构师。这两个角 色的职能有着很大的区别，需要不同的技能。</li><li>两种角色中的任意组合可以是非常有效的:<ul><li>产品负责人和技术主管是同一个人。</li><li>产品负责人作为总指挥，技术主管充当其左右手。</li><li>技术主管作为总指挥，产品负责人充当其左右手。<h2 id="胸有成竹"><a href="#胸有成竹" class="headerlink" title="胸有成竹"></a>胸有成竹</h2></li></ul></li><li>仅仅通过对编码部分的估计，然后乘以任务其他部分的相对系数，是无法得出对整<br>项工作的精确估计的。</li><li>构建独立小型程序的数据不适用于编程系统项目</li><li>程序开发呈程序规模的指数增长。</li><li>一些发表的研究报告显示指数约为 1.5。[Boehm 的数据并不完全一致，在 1.05 和 1.2 之间变化。1]</li><li>Portman 的 ICL 数据显示相对于其他活动开销，全职程序员仅将 50%的时间用于编 程和调试。</li><li>IBM 的 Aron 数据显示，生产率是系统各个部分交互的函数，在 1.5K 千代码行/人 年至 10K 千代码行/人年的范围内变化。</li><li>Harr 的 Bell 实验室数据显示对于已完成的产品，操作系统类的生产率大约是 0.6KLOC/人年，编译类工作的生产率大约为 2.2KLOC/人年。</li><li>Brooks 的 OS/360S 数据与 Harr 的数据一致:操作系统 0.6<del>0.8KLOC/人年，编译 器2</del>3 KLOC/人年。</li><li>Corbato 的 MIT 项目 MULTICS 数据显示，在操作系统和编译器混合类型上的生产率 是 1.2KLOC/人年，但这些是 PL/I 的代码行，而其他所有的数据是汇编代码行。</li><li>在基本语句级别，生产率看上去是个常数。</li><li>当使用适当的高级语言时，程序编制的生产率可以提高 5 倍。</li></ul><h2 id="削足适履"><a href="#削足适履" class="headerlink" title="削足适履"></a>削足适履</h2><ul><li>除了运行时间以外，所占据的内存空间也是主要开销。特别是对于操作系统，它的很多程序是永久驻留在内存中。</li><li>即便如此，花费在驻留程序所占据内存上的金钱仍是物有所值的，比其他任何在配 置上投资的效果要好。规模本身不是坏事，但不必要的规模是不可取的。</li><li>软件开发人员必须设立规模目标，控制规模，发明一些减少规模的方法——就如同 硬件开发人员为减少元器件所做的一样。</li><li>规模预算不仅仅在占据内存方面是明确的，同时还应该指明程序对磁盘的访问次数。</li><li>规模预算必须与分配的功能相关联;在指明模块大小的同时，确切定义模块的功能。</li><li>在大型的团队中，各个小组倾向于不断地局部优化，以满足自己的目标，而较少考虑队用户的整体影响。这种方向性的问题是大型项目的主要危险。</li><li>在整个实现的过程期间，系统结构师必须保持持续的警觉，确保连贯的系统完整性。</li><li>培养开发人员从系统整体出发、面向用户的态度是软件编程管理人员最重要的职能。</li><li>在早期应该制订策略，以决定用户可选项目的粗细程度，因为将它们作为整体大包能够节省内存空间。[常常还可以节约市场成本。]</li><li>临时空间的尺寸，以及每次磁盘访问的程序数量是很关键的决策，因为性能是 规模的非线性函数。[这个整体决策已显得过时——起初是由于虚拟内存，后来则是成本低 廉的内存。现在的用户通常会购买能容纳主要应用程序所有代码的内存。]</li><li>为了取得良好的空间-时间折衷，开发队伍需要得到特定与某种语言或者机型 的编程技能培训，特别是在使用新语言或者新机器时</li><li>编程需要技术积累，每个项目需要自己的标准组件库。</li><li>库中的每个组件需要有两个版本，运行速度较快和短小精炼的。[现在看来有 些过时。]</li><li>精炼、充分和快速的程序。往往是战略性突破的结果，而不仅仅技巧上的提高</li><li>这种突破常常是一种新型算法</li><li>更普遍的是，战略上突破常来自于数据或表的重新表达。数据的表现形式是编 程的根本。</li></ul><h2 id="提纲挈领"><a href="#提纲挈领" class="headerlink" title="提纲挈领"></a>提纲挈领</h2><ul><li>前提:在一片文件的汪洋中，少数文档形成了关键的枢纽，每个项目管理的<br>工作都围绕着它们运转。它们是经理们的主要个人工具</li><li>对于计算机硬件开发项目，关键文档是目标、手册、进度、预算、组织机构图、 空间分配、以及机器本身的报价、预测和价格</li><li>对于大学科系，关键文档类似:目标、课程描述、学位要求、研究报告、课程 表和课程的安排、预算、教室分配、教师和研究生助手的分配。</li><li>对于软件项目，要求是相同的:目标、用户手册、内部文档、进度、预算、组 织机构图和工作空间分配</li><li>因此，即使是小型项目，项目经理也应该在项目早期规范化上述的一系列文档。</li><li>以上集合中每一个文档的准备工作都将注意力集中在对讨论的思索和提炼，而 书写这项活动需要上百次的细小决定，正是由于它们的存在，人们才能从令人迷惑的现象中 得到清晰、确定的策略</li><li>对每个关键文档的维护提供了状态监督和预警机制</li><li>每个文档本身就可以作为检查列表或者数据库。</li><li>项目经理的基本职责是使每个人都向着相同的方向前进</li><li>项目经理的主要日常工作是沟通，而不是做出决定;文档使各项计划和决策在 整个团队范围内得到交流。</li><li>只有一小部分管理人员的时间——可能只有 20%——用来从自己头脑外部获 取信息。</li><li>出于这个原因，广受吹捧的市场概念——支持管理人员的“完备信息管理系统” 并不基于反映管理人员行为的有效模型。</li></ul><h2 id="未雨绸缪"><a href="#未雨绸缪" class="headerlink" title="未雨绸缪"></a>未雨绸缪</h2><ul><li><p>化学工程师已经认识到无法一步将实验室工作台上的反应过程移到工厂中，需要一个实验性工厂(pilot planet)来为提高产量和在缺乏保护的环境下运作提供宝贵经验。</p></li><li><p>对于编程产品而言，这样的中间步骤是同样必要的，但是软件工程师在着手发 布产品之前，却并不会常规地进行试验性系统的现场测试。[现在，这已经成为了一项普遍 的实践，beta 版本。它不同于有限功能的原型，alpha 版本，后者同样是我所倡导的实践。]</p></li><li><p>对于大多数项目，第一个开发的系统并不合用。它可能太慢、太大，而且难以 使用，或者三者兼而有之。</p></li><li><p>系统的丢弃和重新设计可以一步完成，也可以一块块地实现。这是个必须完成 的步骤。</p></li><li><p>将开发的第一个系统——丢弃原型——发布给用户，可以获得时间，但是它的 代价高昂——对于用户，使用极度痛苦;对于重新开发的人员，分散了精力;对于产品，影 响了声誉，即使最好的再设计也难以挽回名声。</p></li><li><p>因此，为舍弃而计划，无论如何，你一定要这样做。</p></li><li><p>开发人员交付的是用户满意程度，而不仅仅是实际的产品。”(Cosgrove)</p></li><li><p>用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化。</p></li><li><p>软件产品易于掌握的特性和不可见性，导致了它的构建人员(特别容易)面临 着永恒的需求变更。</p></li><li><p>目标上(和开发策略上)的一些正常变化无可避免，事先为它们做准备总比假 设它们不会出现要好得多。</p></li><li><p>为变更计划软件产品的技术，特别是细致的模块接口文档——非常地广为人 知，但并没有相同规模的实践。尽可能地使用表驱动技术同样是有所帮助的。[现在内存的 成本和规模使这项技术越来越出众。]</p></li><li><p>高级语言的使用、编译时操作、通过引用的声明整合和自文档技术能减少变更 引起的错误。</p></li><li><p>采用定义良好的数字化版本将变更量子(阶段)化。[当今的标准实践。]</p></li></ul><p><strong>为变更计划组织架构</strong></p><ul><li><p>程序员不愿意为设计书写文档的原因，不仅仅是由于惰性。更多的是源于设计<br>人员的踌躇——要为自己尝试性的设计决策进行辩解。(Cosgrove)</p></li><li><p>为变更组建团队比为变更进行设计更加困难。</p></li><li><p>只要管理人员和技术人才的天赋允许，老板必须对他们的能力培养给予极大的 关注，使管理人员和技术人才具有互换性;特别是希望能在技术和管理角色之间自由地分配 人手的时候。</p></li><li><p>具有两条晋升线的高效组织机构，存在着一些社会性的障碍，人们必须警惕和 积极地同它做持续的斗争。</p></li><li><p>很容易为不同的晋升线建立相互一致的薪水级别，但要同等威信的建立需要一 些强烈的心理措施:相同的办公室、一样的支持和技术调动的优先补偿。</p></li><li><p>组建外科手术队伍式的软件开发团队是对上述问题所有方面的彻底冲击。对于 灵活组织架构问题，这的确是一个长期行之有效的解决方案。</p></li></ul><p><strong>前进两步，后退一步——程序维护</strong></p><ul><li>程序维护基本上不同于硬件的维护;它主要由各种变更组成，如修复设计缺陷、 新增功能、或者是使用环境或者配置变换引起的调整。</li><li>对于一个广泛使用的程序，其维护总成本通常是开发成本的 40%或更多</li><li>维护成本受用户数目的严重影响。用户越多，所发现的错误也越多。</li><li>Campbell 指出了一个显示产品生命期中每月 bug 数的有趣曲线，它先是下降，然后攀升。</li><li>缺陷修复总会以(20-50)%的机率引入新的 bug。</li><li>在每次修复之后，必须重新运行先前所有的测试用例，从而确保系统不会以更隐蔽的方式被破坏</li><li>能消除、至少是能指明副作用的程序设计方法，对维护成本有很大的影响</li><li>同样，设计实现的人员越少、接口越少，产生的错误也就越少。</li></ul><p><strong>前进一步，后退一步——系统熵随时间增加</strong></p><ul><li>Lehman 和 Belady 发现模块数量随大型操作系统(OS/360)版本号的增加呈线 性增长，但是受到影响的模块以版本号指数的级别增长</li><li>所有修改都倾向于破坏系统的架构，增加了系统的混乱程度。即使是最熟练的 软件维护工作，也只是放缓了系统退化到不可修复混乱的进程，从中必须要重新进行设计。 [许多程序升级的真正需要，如性能等，尤其会冲击它的内部结构边界。原有边界引发的不足常常在日后才会出现</li></ul><h2 id="干将莫邪"><a href="#干将莫邪" class="headerlink" title="干将莫邪"></a>干将莫邪</h2><ul><li>项目经理应该制订一套策略，以及为通用工具的开发分配资源，与此同时，他 还必须意识到专业工具的需求。</li><li>开发操作系统的队伍需要自己的目标机器，进行调试开发工作。相对于最快的 速度而言，它更需要最大限度的内存，还需要安排一名系统程序员，以保证机器上的标准软 件是即时更新和实时可用的</li><li>同时还需要配备调试机器或者软件，以便在调试过程中，所有类型的程序参数 可以被自动计数和测量。</li><li>目标机器的使用需求量是一种特殊曲线:刚开始使用率非常低，突然出现爆发 性的增长，接着趋于平缓</li><li>同天文工作者一样，系统调试总是大部分在夜间完成。</li><li>抛开理论不谈，一次分配给某个小组连续的目标时间块被证明是最好的安排方 法，比不同小组的穿插使用更为有效</li><li>尽管技术不断变化，这种采用时间块来安排匮乏计算机资源的方式仍得以延续 20 年[在 1975 年]，是因为它的生产率最高。[在 1995 年依然如此]</li><li>如果目标机器是新产品，则需要一个目标机器的逻辑仿真装置。这样，可以更 快地得到辅助调试平台。即使在真正机器出现之后，仿真装置仍可提供可靠的调试平台。</li><li>主程序库应该被划分成(1)一系列独立的私有开发库;(2)正处在系统测试 下的系统集成子库;(3)发布版本。正式的分离和进度提供了控制。</li><li>在编制程序的项目中，节省最大工作量的工具可能是文本编辑系统。</li><li>系统文档中的巨大容量带来了新的不理解问题[例如，看看 Unix]，但是它比大多数未能详细描述编程系统特性的短小文章更加可取。</li><li>自顶向下、彻底地开发一个性能仿真装置。尽可能早地开始这项工作，仔细地 听取 “它们表达的意见”</li></ul><p><strong>高级语言</strong></p><ul><li>只有懒散和惰性会妨碍高级语言和交互式编程的广泛应用。[如今它们已经在全世界使用</li><li>高级语言不仅仅提升了生产率，而且还改进了调试:bug 更少，以及更容易寻找</li><li>传统的反对意见——功能、目标代码的尺寸、目标代码的速度，随着语言和编 译器技术的进步已不再成为问题。</li><li>现在可供合理选择的语言是 PL/I。[不再正确。]</li></ul><p><strong>交互式编程</strong></p><ul><li><p>某些应用上，批处理系统决不会被交互式系统所替代。[依然成立。]</p></li><li><p>调试是系统编程中很慢和较困难的部分，而漫长的调试周转时间是调试的祸 根。</p></li><li><p>有限的数据表明了系统软件开发中，交互式编程的生产率至少是原来的两倍</p><h2 id="整体部分"><a href="#整体部分" class="headerlink" title="整体部分"></a>整体部分</h2></li><li><p>第 4、5、6 章所意味的煞费苦心、详尽体系结构工作不但使产品更加易于使用，而且使开发更容易进行以及 bug 更不容易产生。</p></li><li><p>V.A.Vyssotsky 提出，“许许多多的失败完全源于那些产品未精确定义的地<br>方。”</p></li><li><p>在编写任何代码之前，规格说明必须提交给测试小组，以详细地检查说明的完 整性和明确性。开发人员自己不会完成这项工作。(Vyssotsky)</p></li><li><p>十年内[1965~1975]，Wirth 的自顶向下进行设计[逐步细化]将会是最重要<br>的新型形式化软件开发方法</p></li><li><p>Wirth 主张在每个步骤中，尽可能使用级别较高的表达方法</p></li><li><p>好的自顶向下设计从四个方面避免了 bug。</p></li><li><p>有时必须回退，推翻顶层设计，重新开始</p></li><li><p>结构化编程中，程序的控制结构仅由支配代码块(相对于任意的跳转)的给定 集合所组成。这种方法出色地避免了 bug，是一种正确的思考方式</p></li><li><p>Gold 结果显示了，在交互式调试过程中，第一次交互取得的工作进展是后续 交互的三倍。这实际上获益于在调试开始之前仔细地调试计划。[我认为在 1995 年依然如 此。]</p></li><li><p>我发现对良好终端系统的正确使用，往往要求每两小时的终端会话对应于两小 时的桌面工作:1 小时会话后的清理和文档工作;1 小时为下一次计划变更和测试。</p></li><li><p>系统调试(相对于单元测试)花费的时间会比预料的更长</p></li><li><p>系统调试的困难程度证明了需要一种完备系统化和可计划的方法。</p></li><li><p>系统调试仅仅应该在所有部件能够运作之后开始。(这既不同于为了查出接口 bug 所采取 “合在一起尝试” 的方法;也不同于在所有构件单元的 bug 已知，但未修复的 情况下，即开始系统调试的做法。)[对于多个团队尤其如此。</p></li><li><p>开发大量的辅助调试平台(scaffolding 脚手架)和测试代码是很值得的，代码量甚至可能会有测试对象的一半。</p></li><li><p>必须有人对变更进行控制和文档化，团队成员应使用开发库的各种受控拷贝来 工作。</p></li><li><p>系统测试期间，一次只添加一个构件。</p></li><li><p>Lehman 和 Belady 出示了证据，变更的阶段(量子)要么很大，间隔很宽;要 么小和频繁。后者很容易变得不稳定。[Microsoft 的一个团队使用了非常小的阶段(量子)。 结果是每天晚上需要重新编译生成增长中的系统。]</p></li></ul><h2 id="祸起萧墙"><a href="#祸起萧墙" class="headerlink" title="祸起萧墙"></a>祸起萧墙</h2><ul><li><p>项目是怎样延迟了整整一年的时间?⋯一次一天</p></li><li><p>一天一天的进度落后比起重大灾难，更难以识别、更不容易防范和更加难以弥 补。</p></li><li><p>根据一个严格的进度表来控制项目的第一个步骤是制订进度表，进度表由里程 碑和日期组成。</p></li><li><p>里程碑必须是具体的、特定的、可度量的事件，能进行清晰能定义。</p></li><li><p>如果里程碑定义得非常明确，以致于无法自欺欺人时，程序员很少会就里程碑<br>的进展弄虚作假。</p></li><li><p>对于大型开发项目中的估计行为，政府的承包商所做的研究显示:每两周进行 仔细修订的活动时间估计，随着开始时间的临近不会有太大的变化;期间内对时间长短的过 高估计，会随着活动的进行持续下降;过低估计直到计划的结束日期之前大约三周左右，才 有所变化。</p></li><li><p>慢性进度偏离是士气杀手。[Microsoft 的 Jim McCarthy 说:“如果你错过了 一个最终期限(deadline)，确保制订下一条 deadline。2”]</p></li><li><p>进取对于杰出的软件开发团队，同优秀的棒球队伍一样，是不可缺少的必要品 德。</p></li><li><p>不存在关键路径进度的替代品，使人们能够辨别计划偏移的情况。</p></li><li><p>PERT 的准备工作是 PERT 图使用中最有价值的部分。它包括了整个网状结构的 展开、任务之间依赖关系的识别、各个任务链的估计。这些都要求在项目早期进行非常专业 的计划。</p></li><li><p>第一份 PERT 图总是很恐怖的，不过人们总是不断进行努力，运用才智制订下 一份 PERT 图。</p></li><li><p>PERT 图为前面那个泄气的借口，“其他的部分反正会落后”，提供了答案。</p></li><li><p>每个老板同时需要采取行动的异常信息以及用来进行分析和早期预警的状态<br>数据。</p></li><li><p>状态的获取是困难的，因为下属经理有充分的理由不提供信息共享。</p></li><li><p>老板的不良反应肯定会对信息的完全公开造成压制;相反，仔细区分状态报告、<br>毫无惊慌地接收报告、决不越俎代庖，将能鼓励诚实的汇报。</p></li><li><p>必须有评审的机制，从而所有成员可以通过它了解真正的状态。出于这个目的， 里程碑的计划和完成文档是关键。</p></li><li><p>Vyssotsky:我发现在里程碑报告中很容易记录“计划(老板的日期)”和“估 计(最基层经理的日期)”的日期。项目经理必须停止对这些日期的怀疑。”</p></li><li><p>对于大型项目，一个对里程碑报告进行维护的计划和控制(Plan and Control) 小组是非常可贵的。</p><h2 id="另外一面"><a href="#另外一面" class="headerlink" title="另外一面"></a>另外一面</h2></li><li><p>对于软件编程产品来说，程序向用户所呈现的面貌与提供给机器识别的内容同<br>样重要。</p></li><li><p>即使对于完全开发给自己使用的程序，描述性文字也是必须的，因为它们会被 用户-作者所遗忘。</p></li><li><p>培训和管理人员基本上没有能向编程人员成功地灌输对待文档的积极态度——文档能在整个生命周期对克服懒惰和进度的压力起促进激励作用。</p></li><li><p>这样的失败并不都是因为缺乏热情或者说服力，而是没能正确地展示如何有效 和经济地编制文档。</p></li><li><p>大多数文档只提供了很少的总结性内容。必须放慢脚步，稳妥地进行。</p></li><li><p>由于关键的用户文档包含了跟软件相关的基本决策，所以它的绝大部分需要在 程序编制之前书写，它包括了 9 项内容(参见相应章节)。</p></li><li><p>每一份发布的程序拷贝应该包括一些测试用例，其中一部分用于校验输入数据，一部分用于边界输入数据，另一部分用于无效的输入数据</p></li><li><p>对于必须修改程序的人而言，他们所需要程序内部结构文档，同样要求一份清<br>晰明了的概述，它包括了 5 项内容(参见相应章节)。</p></li><li><p>流程图是被吹捧得最过分的一种程序文档。详细逐一记录的流程图是一件令人<br>生厌的事情，而且高级语言的出现使它显得陈旧过时。(流程图是图形化的高级语言。)</p></li><li><p>如果这样，很少有程序需要一页纸以上的流程图。[在这一点上，MILSPEC 军<br>用标准实在错得很厉害。]</p></li><li><p>即使的确需要一张程序结构图，也并不需要遵照 ANSI 的流程图标准。</p></li><li><p>为了使文档易于维护，将它们合并至源程序是至关重要的，而不是作为独立文 档进行保存。</p></li><li><p>最小化文档负担的 3 个关键思路:</p><ul><li>借助那些必须存在的语句，如名称和声明等，来附加尽可能多的“文档”信息。</li><li>使用空格和格式来表现从属和嵌套关系，提高程序的可读性。</li><li>以段落注释，特别是模块标题的形式，向程序中插入必要的记叙性文字。</li></ul></li><li><p>程序修改人员所使用的文档中，除了描述事情如何以外，还应阐述它为什么那 样。对于加深理解，目的是非常关键的，但即使是高级语言的语法，也不能表达目的</p></li><li><p>在线系统的高级语言(应该使用的工具)中，自文档化技术发现了它的绝佳应 用和强大功能。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;焦油坑&quot;&gt;&lt;a href=&quot;#焦油坑&quot; class=&quot;headerlink&quot; title=&quot;焦油坑&quot;&gt;&lt;/a&gt;焦油坑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编程系统产品(Programming Systems Product)开发的工作量是供个人使用的、 独立开发的构件
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C4架构模式</title>
    <link href="http://iwantjingjing.com/2022/06/29/C4%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    <id>http://iwantjingjing.com/2022/06/29/C4%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-29T01:23:02.000Z</published>
    <updated>2022-06-29T01:24:02.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C4架构模型"><a href="#C4架构模型" class="headerlink" title="C4架构模型"></a>C4架构模型</h2><p><strong>C4 模型由一系列分层的软件架构图组成，这些架构图用于描述上下文、容器、组件和代码。C4 图的层次结构提供了不同的抽象级别，每种抽象级别都与不同的受众有关。</strong></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li><p>上下文（Context）</p></li><li><p>容器（Container）</p><ol><li>应用程序</li><li>数据存储</li><li>微服务</li></ol></li><li><p>组件（Component）</p></li><li><p>代码（Code）</p></li></ul><h3 id="软件架构模式"><a href="#软件架构模式" class="headerlink" title="软件架构模式"></a>软件架构模式</h3><ul><li>分层架构</li><li>管道-过滤器架构</li><li>客户端-服务器架构</li><li>模型-视图-控制器架构</li><li>事件驱动架构</li><li>微服务架构</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.infoq.cn/article/C4-architecture-model" target="_blank" rel="noopener">用于软件架构的 C4 模型</a></p><p><a href="https://c4model.com/" target="_blank" rel="noopener">c4模型官网</a></p><p><a href="https://www.infoq.cn/article/6Rx047oOHJlRdIPD1BC2?utm_source=related_read_bottom&utm_medium=article" target="_blank" rel="noopener">程序员必须知道的几种软件架构模式</a></p><p><a href="https://www.infoq.cn/article/crafting-architectural-diagrams/" target="_blank" rel="noopener">软件架构图的艺术</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C4架构模型&quot;&gt;&lt;a href=&quot;#C4架构模型&quot; class=&quot;headerlink&quot; title=&quot;C4架构模型&quot;&gt;&lt;/a&gt;C4架构模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;C4 模型由一系列分层的软件架构图组成，这些架构图用于描述上下文、容器、组件和代码。C4 图
      
    
    </summary>
    
    
      <category term="架构" scheme="http://iwantjingjing.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://iwantjingjing.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Pandas教程</title>
    <link href="http://iwantjingjing.com/2022/04/20/Pandas%E6%95%99%E7%A8%8B/"/>
    <id>http://iwantjingjing.com/2022/04/20/Pandas%E6%95%99%E7%A8%8B/</id>
    <published>2022-04-20T09:01:59.000Z</published>
    <updated>2022-04-20T09:02:42.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a><a href="https://www.runoob.com/pandas/pandas-tutorial.html" target="_blank" rel="noopener">Pandas简介</a></h1><ul><li><p>Pandas 是 Python 语言的一个扩展程序库，用于数据分析。</p></li><li><p>Pandas 是一个开放源码、BSD 许可的库，提供高性能、易于使用的数据结构和数据分析工具。</p></li><li><p>Pandas 名字衍生自术语 “panel data”（面板数据）和 “Python data analysis”（Python 数据分析）。</p></li><li><p>Pandas 一个强大的分析结构化数据的工具集，基础是 Numpy（提供高性能的矩阵运算）。</p></li><li><p>Pandas 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据。</p></li><li><p>Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。</p></li><li><p>Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。</p></li></ul><h2 id="Pandas-应用"><a href="#Pandas-应用" class="headerlink" title="Pandas 应用"></a>Pandas 应用</h2><p>Pandas 的主要数据结构是 Series （一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Series 是一种类似于一维数组的对象，它由一组数据（各种Numpy数据类型）以及一组与之相关的数据标签（即索引）组成。</p><p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li>Pandas 官网 <a href="https://pandas.pydata.org/" target="_blank" rel="noopener">https://pandas.pydata.org/</a></li><li>Pandas 源代码：<a href="https://github.com/pandas-dev/pandas" target="_blank" rel="noopener">https://github.com/pandas-dev/pandas</a></li></ul><h1 id="Pandas-安装"><a href="#Pandas-安装" class="headerlink" title="Pandas 安装"></a><a href="https://www.runoob.com/pandas/pandas-install.html" target="_blank" rel="noopener">Pandas 安装</a></h1><p>安装 pandas 需要基础环境是 Python，开始前我们假定你已经安装了 Python 和 Pip。</p><p>使用 pip 安装 pandas:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>安装成功后，我们就可以导入 pandas 包使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import pandas</span><br></pre></td></tr></table></figure><p>实例 - 查看 pandas 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pandas</span><br><span class="line">&gt;&gt;&gt; pandas.__version__  # 查看版本</span><br><span class="line">&#39;1.1.5&#39;</span><br></pre></td></tr></table></figure><p>导入 pandas 一般使用别名 pd 来代替：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pandas</span><br><span class="line">&gt;&gt;&gt; pandas.__version__  # 查看版本</span><br><span class="line">&#39;1.1.5&#39;</span><br></pre></td></tr></table></figure><p>导入 pandas 一般使用别名 pd 来代替：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure><p>实例 - 查看 pandas 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pandas as pd</span><br><span class="line">&gt;&gt;&gt; pd.__version__  # 查看版本</span><br><span class="line">&#39;1.1.5&#39;</span><br></pre></td></tr></table></figure><p>一个简单的 pandas 实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">mydataset &#x3D; &#123;</span><br><span class="line">  &#39;sites&#39;: [&quot;Google&quot;, &quot;Runoob&quot;, &quot;Wiki&quot;],</span><br><span class="line">  &#39;number&#39;: [1, 2, 3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myvar &#x3D; pd.DataFrame(mydataset)</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><h1 id="Pandas-Series"><a href="#Pandas-Series" class="headerlink" title="Pandas Series"></a><a href="https://www.runoob.com/pandas/pandas-series.html" target="_blank" rel="noopener">Pandas Series</a></h1><p>Pandas Series 类似表格中的一个列（column），类似于一维数组，可以保存任何数据类型。</p><p>Series 由索引（index）和列组成，函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.Series(data, index, dtype, name, copy)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>data：一组数据（ndarray）类型。</li><li>index：数据索引标签，如果不指定，默认从0开始。</li><li>dtype：数据类型，默认会自己判断。</li><li>name：设置名称。</li><li>copy：拷贝数据，默认为False。</li></ul><p>创建一个简单的 Series 实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a)</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0    1</span><br><span class="line">1    2</span><br><span class="line">2    3</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>从结果可知，如果没有指定索引，索引值就从 0 开始，我们可以根据索引值读取数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a)</span><br><span class="line"></span><br><span class="line">print(myvar[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>我们可以指定索引值，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="string">"Google"</span>, <span class="string">"Runoob"</span>, <span class="string">"Wiki"</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a, index = [<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>])</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x    Google</span><br><span class="line">y    Runoob</span><br><span class="line">z      Wiki</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>根据索引值读取数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a &#x3D; [&quot;Google&quot;, &quot;Runoob&quot;, &quot;Wiki&quot;]</span><br><span class="line"></span><br><span class="line">myvar &#x3D; pd.Series(a, index &#x3D; [&quot;x&quot;, &quot;y&quot;, &quot;z&quot;])</span><br><span class="line"></span><br><span class="line">print(myvar[&quot;y&quot;])</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runoob</span><br></pre></td></tr></table></figure><p>我们也可以使用 key/value 对象，类似字典来创建 Series：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="number">1</span>: <span class="string">"Google"</span>, <span class="number">2</span>: <span class="string">"Runoob"</span>, <span class="number">3</span>: <span class="string">"Wiki"</span>&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites)</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1    Google</span><br><span class="line">2    Runoob</span><br><span class="line">3      Wiki</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>从上图可知，字典的 key 变成了索引值。</p><p>如果我们只需要字典中的一部分数据，只需要指定需要数据的索引即可，如下实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">sites &#x3D; &#123;1: &quot;Google&quot;, 2: &quot;Runoob&quot;, 3: &quot;Wiki&quot;&#125;</span><br><span class="line"></span><br><span class="line">myvar &#x3D; pd.Series(sites, index &#x3D; [1, 2])</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1    Google</span><br><span class="line">2    Runoob</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>设置 Series 名称参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">sites &#x3D; &#123;1: &quot;Google&quot;, 2: &quot;Runoob&quot;, 3: &quot;Wiki&quot;&#125;</span><br><span class="line"></span><br><span class="line">myvar &#x3D; pd.Series(sites, index &#x3D; [1, 2], name&#x3D;&quot;RUNOOB-Series-TEST&quot; )</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1    Google</span><br><span class="line">2    Runoob</span><br><span class="line">Name: RUNOOB-Series-TEST, dtype: object</span><br></pre></td></tr></table></figure><h1 id="Pandas-DataFrame"><a href="#Pandas-DataFrame" class="headerlink" title="Pandas DataFrame"></a><a href="https://www.runoob.com/pandas/pandas-dataframe.html" target="_blank" rel="noopener">Pandas DataFrame</a></h1><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔类型）。DataFrame已有行索引也有列索引，它可以被看做由Series组成的字典（共同用一个索引）。</p><p>DataFrame构造方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame(data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li>data：一组数据（ndarray、series、map、lists、dict等类型）。</li><li>index：索引值，或者可以成为行标签</li><li>columns：列标签，默认为RangeIndex(0,1,2,…,n)。</li><li>dtype：数据类型。</li><li>copy：拷贝数据，默认为False。</li></ul><p>Pandas DataFrame是一个二维的数组结构，类似二维数组。</p><h2 id="使用列表创建"><a href="#使用列表创建" class="headerlink" title="使用列表创建"></a>使用列表创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = [[<span class="string">'Googele'</span>,<span class="number">10</span>],[<span class="string">'Runoob'</span>,<span class="number">12</span>],[<span class="string">'Wiki'</span>,<span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data,columns=[<span class="string">'Site'</span>,<span class="string">'Age'</span>],dtype=float)</span><br><span class="line"></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      Site   Age</span><br><span class="line">0  Googele  10.0</span><br><span class="line">1   Runoob  12.0</span><br><span class="line">2     Wiki  13.0</span><br></pre></td></tr></table></figure><h2 id="使用-ndarrays创建"><a href="#使用-ndarrays创建" class="headerlink" title="使用 ndarrays创建"></a>使用 ndarrays创建</h2><p>以下实例使用 ndarrays 创建，ndarray 的长度必须相同， 如果传递了 index，则索引的长度应等于数组的长度。如果没有传递索引，则默认情况下，索引将是range(n)，其中n是数组长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'Site'</span>:[<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Wiki'</span>], <span class="string">'Age'</span>:[<span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>]&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(Data)</span><br><span class="line"></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0  Google   10</span><br><span class="line">1  Runoob   12</span><br><span class="line">2    Wiki   13</span><br></pre></td></tr></table></figure><h2 id="使用字典创建"><a href="#使用字典创建" class="headerlink" title="使用字典创建"></a>使用字典创建</h2><p>还可以使用字典（key/value），其中字典的 key 为列名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = [&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;,&#123;<span class="string">'a'</span>: <span class="number">5</span>, <span class="string">'b'</span>: <span class="number">10</span>, <span class="string">'c'</span>: <span class="number">20</span>&#125;]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (df)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   a   b     c</span><br><span class="line">0  1   2   NaN</span><br><span class="line">1  5  10  20.0</span><br></pre></td></tr></table></figure><p>没有对应的部分数据为 NaN。</p><h2 id="使用-loc-属性返回指定行的数据，如果没有设置索引，第一行索引为-0，第二行索引为-1，以此类推："><a href="#使用-loc-属性返回指定行的数据，如果没有设置索引，第一行索引为-0，第二行索引为-1，以此类推：" class="headerlink" title="使用 loc 属性返回指定行的数据，如果没有设置索引，第一行索引为 0，第二行索引为 1，以此类推："></a>使用 loc 属性返回指定行的数据，如果没有设置索引，第一行索引为 0，第二行索引为 1，以此类推：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">  &quot;calories&quot;: [420, 380, 390],</span><br><span class="line">  &quot;duration&quot;: [50, 40, 45]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 数据载入到 DataFrame 对象</span><br><span class="line">df &#x3D; pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"># 返回第一行</span><br><span class="line">print(df.loc[0])</span><br><span class="line"># 返回第二行</span><br><span class="line">print(df.loc[1])</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">calories    420</span><br><span class="line">duration     50</span><br><span class="line">Name: 0, dtype: int64</span><br><span class="line">calories    380</span><br><span class="line">duration     40</span><br><span class="line">Name: 1, dtype: int64</span><br></pre></td></tr></table></figure><p>注意：返回结果其实就是一个 Pandas Series 数据。</p><h2 id="可以返回多行数据，使用-…-格式，…-为各行的索引，以逗号隔开："><a href="#可以返回多行数据，使用-…-格式，…-为各行的索引，以逗号隔开：" class="headerlink" title="可以返回多行数据，使用 [[ … ]] 格式，… 为各行的索引，以逗号隔开："></a>可以返回多行数据，使用 [[ … ]] 格式，… 为各行的索引，以逗号隔开：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">  &quot;calories&quot;: [420, 380, 390],</span><br><span class="line">  &quot;duration&quot;: [50, 40, 45]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 数据载入到 DataFrame 对象</span><br><span class="line">df &#x3D; pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"># 返回第一行和第二行</span><br><span class="line">print(df.loc[[0, 1]])</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   calories  duration</span><br><span class="line">0       420        50</span><br><span class="line">1       380        40</span><br></pre></td></tr></table></figure><p>注意：返回结果其实就是一个 Pandas DataFrame 数据。</p><h2 id="可以指定索引值，如下实例："><a href="#可以指定索引值，如下实例：" class="headerlink" title="可以指定索引值，如下实例："></a>可以指定索引值，如下实例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">  &quot;calories&quot;: [420, 380, 390],</span><br><span class="line">  &quot;duration&quot;: [50, 40, 45]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df &#x3D; pd.DataFrame(data, index &#x3D; [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;])</span><br><span class="line"></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      calories  duration</span><br><span class="line">day1       420        50</span><br><span class="line">day2       380        40</span><br><span class="line">day3       390        45</span><br></pre></td></tr></table></figure><h2 id="可以使用-loc-属性返回指定索引对应到某一行："><a href="#可以使用-loc-属性返回指定索引对应到某一行：" class="headerlink" title="可以使用 loc 属性返回指定索引对应到某一行："></a>可以使用 loc 属性返回指定索引对应到某一行：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">  &quot;calories&quot;: [420, 380, 390],</span><br><span class="line">  &quot;duration&quot;: [50, 40, 45]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df &#x3D; pd.DataFrame(data, index &#x3D; [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;])</span><br><span class="line"></span><br><span class="line"># 指定索引</span><br><span class="line">print(df.loc[&quot;day2&quot;])</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">calories    380</span><br><span class="line">duration     40</span><br><span class="line">Name: day2, dtype: int64</span><br></pre></td></tr></table></figure><h1 id="Pandas-CSV"><a href="#Pandas-CSV" class="headerlink" title="Pandas CSV"></a><a href="https://www.runoob.com/pandas/pandas-csv-file.html" target="_blank" rel="noopener">Pandas CSV</a></h1><h1 id="Pandas-JSON"><a href="#Pandas-JSON" class="headerlink" title="Pandas JSON"></a><a href="https://www.runoob.com/pandas/pandas-json.html" target="_blank" rel="noopener">Pandas JSON</a></h1><h1 id="Pandas-数据清洗"><a href="#Pandas-数据清洗" class="headerlink" title="Pandas 数据清洗"></a><a href="https://www.runoob.com/pandas/pandas-cleaning.html" target="_blank" rel="noopener">Pandas 数据清洗</a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Pandas简介&quot;&gt;&lt;a href=&quot;#Pandas简介&quot; class=&quot;headerlink&quot; title=&quot;Pandas简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/pandas/pandas-tutorial.html&quot; t
      
    
    </summary>
    
    
      <category term="python" scheme="http://iwantjingjing.com/categories/python/"/>
    
    
      <category term="数据处理、python" scheme="http://iwantjingjing.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%81python/"/>
    
  </entry>
  
  <entry>
    <title>代码审核标准.md</title>
    <link href="http://iwantjingjing.com/2022/04/20/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E6%A0%87%E5%87%86/"/>
    <id>http://iwantjingjing.com/2022/04/20/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E6%A0%87%E5%87%86/</id>
    <published>2022-04-20T04:53:20.000Z</published>
    <updated>2022-04-20T06:07:02.359Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="http://showdoc.huifanayb.cn:4999/web/#/p/e5e84799ec3272f72615d7090c95df7d" target="_blank" rel="noopener">原文链接</a></strong></p><h2 id="框架需符合项目目版本约束"><a href="#框架需符合项目目版本约束" class="headerlink" title="框架需符合项目目版本约束"></a>框架需符合<a href="http://showdoc.huifanayb.cn:4999/web/#/p/8fa06a08ccd4f8d8c51df9ec8b7c0a3b" target="_blank" rel="noopener">项目目版本约束</a></h2><h2 id="代码格式需符合-后端代码格式配置"><a href="#代码格式需符合-后端代码格式配置" class="headerlink" title="代码格式需符合 后端代码格式配置"></a>代码格式需符合 <a href="http://showdoc.huifanayb.cn:4999/web/#/p/38fef09fc67bec02f52fdc107cde88d7" target="_blank" rel="noopener">后端代码格式配置</a></h2><h2 id="接口文档需符合接口文档编写示例"><a href="#接口文档需符合接口文档编写示例" class="headerlink" title="接口文档需符合接口文档编写示例"></a>接口文档需符合接口<a href="http://49.4.55.138:4999/web/#/p/cb0301114aa68d405f30a65b8759df69" target="_blank" rel="noopener">文档编写示例</a></h2><h2 id="请求方式除get请求可以路径传参，其他请求类型一律使用对象传参"><a href="#请求方式除get请求可以路径传参，其他请求类型一律使用对象传参" class="headerlink" title="请求方式除get请求可以路径传参，其他请求类型一律使用对象传参"></a>请求方式除get请求可以路径传参，其他请求类型一律使用对象传参</h2><h2 id="请求路径多个单词用下划线分隔，不可使用驼峰"><a href="#请求路径多个单词用下划线分隔，不可使用驼峰" class="headerlink" title="请求路径多个单词用下划线分隔，不可使用驼峰"></a>请求路径多个单词用下划线分隔，不可使用驼峰</h2><h2 id="定义的feign一定要在请求头中定义token，以明确调用方"><a href="#定义的feign一定要在请求头中定义token，以明确调用方" class="headerlink" title="定义的feign一定要在请求头中定义token，以明确调用方"></a>定义的feign一定要在请求头中定义token，以明确调用方</h2><p><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-05-27/60af341b3de31.png" alt=""></p><h2 id="feign接口请求路径必须以-api开头"><a href="#feign接口请求路径必须以-api开头" class="headerlink" title="feign接口请求路径必须以/api开头"></a>feign接口请求路径必须以<code>/api</code>开头</h2><h2 id="请求需明确标明请求类型，GET、POST、PUT、DELETE等，所有写操作不允许为GET请求"><a href="#请求需明确标明请求类型，GET、POST、PUT、DELETE等，所有写操作不允许为GET请求" class="headerlink" title="请求需明确标明请求类型，GET、POST、PUT、DELETE等，所有写操作不允许为GET请求"></a>请求需明确标明请求类型，<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>等，所有写操作不允许为<code>GET</code>请求</h2><h2 id="项目中不允许直接throw-new-…异常，若要抛出异常需使用CheckUtil中的方法，自定义异常枚举抛出"><a href="#项目中不允许直接throw-new-…异常，若要抛出异常需使用CheckUtil中的方法，自定义异常枚举抛出" class="headerlink" title="项目中不允许直接throw new …异常，若要抛出异常需使用CheckUtil中的方法，自定义异常枚举抛出"></a>项目中不允许直接throw new …异常，若要抛出异常需使用CheckUtil中的方法，自定义异常枚举抛出</h2><h2 id="代码中手写SQL，不允许出现select-场景"><a href="#代码中手写SQL，不允许出现select-场景" class="headerlink" title="代码中手写SQL，不允许出现select * 场景"></a>代码中手写SQL，不允许出现select * 场景</h2><h2 id="每个请求接口（包含feign接口）都需要提供单元测试"><a href="#每个请求接口（包含feign接口）都需要提供单元测试" class="headerlink" title="每个请求接口（包含feign接口）都需要提供单元测试"></a>每个请求接口（包含feign接口）都需要提供单元测试</h2><h2 id="异常类code码需保持唯一"><a href="#异常类code码需保持唯一" class="headerlink" title="异常类code码需保持唯一"></a>异常类code码需保持唯一</h2><h2 id="接口响应时长不可超过2S-单位秒"><a href="#接口响应时长不可超过2S-单位秒" class="headerlink" title="接口响应时长不可超过2S(单位秒)"></a>接口响应时长不可超过2S(单位秒)</h2><h2 id="多表写操作必须保证事务一致性"><a href="#多表写操作必须保证事务一致性" class="headerlink" title="多表写操作必须保证事务一致性"></a>多表写操作必须保证事务一致性</h2><h2 id="严禁循环单表写操作，若有相应业务需将多条数据放入一个集合中，执行批量写操作"><a href="#严禁循环单表写操作，若有相应业务需将多条数据放入一个集合中，执行批量写操作" class="headerlink" title="严禁循环单表写操作，若有相应业务需将多条数据放入一个集合中，执行批量写操作"></a>严禁循环单表写操作，若有相应业务需将多条数据放入一个集合中，执行批量写操作</h2><h2 id="Controller中不允许进行try-catch操作"><a href="#Controller中不允许进行try-catch操作" class="headerlink" title="Controller中不允许进行try_catch操作"></a>Controller中不允许进行try_catch操作</h2><h2 id="涉及到equal-的方法，必须使用Objects-equals方法"><a href="#涉及到equal-的方法，必须使用Objects-equals方法" class="headerlink" title="涉及到equal()的方法，必须使用Objects.equals方法"></a>涉及到equal()的方法，必须使用Objects.equals方法</h2><h2 id="一个文件中的代码警告不可超过10个"><a href="#一个文件中的代码警告不可超过10个" class="headerlink" title="一个文件中的代码警告不可超过10个"></a>一个文件中的代码警告不可超过10个</h2><h2 id="git-提交标准"><a href="#git-提交标准" class="headerlink" title="git 提交标准"></a>git 提交标准</h2><ul><li>commit注释要清晰，必须注明所做提交具体做了什么</li></ul><p>正面示例：具体做了什么交待清楚（时间与用户名可不写）<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7945efe1d.png" alt=""></p><p>反面示例：具体做了什么从提交记录中无法体现（如：修改注册接口，修改了什么，不知道。可修改为：修改注册接口，同步标签服务，增加默认标签功能）<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a799da4aae.png" alt=""></p><ul><li>mvn test 通过<br><strong>三种实现方式</strong></li></ul><p>1、命令行实现方式<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7a3e4da7d.png" alt=""></p><p>2、maven插件形式<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7ab734b2d.png" alt=""></p><p>3、项目启动没问题<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7af106b32.png" alt=""></p><ul><li>代码格式化通过代码格式标准<br>在自己文件上按（Ctrl+alt+L）或者其他自己设置的格式化快捷键<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7b6189577.png" alt=""><br>出现上述红框内容说明格式非常好，没有要格式化的内容</li></ul><ul><li>阿里规约扫描无警告<br>反面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7cd65a085.png" alt=""></li></ul><p>正面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7d168237e.png" alt=""></p><h2 id="强制性约定（这是红线）"><a href="#强制性约定（这是红线）" class="headerlink" title="强制性约定（这是红线）"></a>强制性约定（这是红线）</h2><ul><li>idea中不可出现爆红<br>反面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7e2b5cc01.png" alt=""><br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7e395e6a6.png" alt=""><br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7e8b00d84.png" alt=""></li></ul><p>正面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7e68279a7.png" alt=""></p><ul><li><p>代码格式符合代码格式标准</p></li><li><p>代码中不可出现无用引用包<br>反面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a7f9f9842e.png" alt=""></p></li><li><p>阿里规约不可扫描出现问题</p></li><li><p>每个类上的注释说明要写清楚<br>正面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a809912a6a.png" alt=""></p></li></ul><p>反面示例<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a80f1e7679.png" alt=""></p><ul><li><p>方法上的描述注释要写清楚，出参、入参、返回值（接口实现方法上的注释可不写）<br>正面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a819bb734b.png" alt=""><br>反面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a81dda0bb2.png" alt=""><br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a821575209.png" alt=""><br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a827b4facd.png" alt=""></p></li><li><p>统一返回值HttpResult的返回类型在方法声明中必须有<br>正面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a82b960ba9.png" alt=""><br>反面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a83171277c.png" alt=""><br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a83dbc3dbb.png" alt=""></p></li><li><p>入口方法controller的请求实体不可公用（一个实体对应一个请求入口）<br>反面示例：<br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a84ee0aad1.png" alt=""><br><img src="http://showdoc.huifanayb.cn:4999/server/../Public/Uploads/2021-01-22/600a85b96fd80.png" alt=""></p></li></ul><h2 id="代码需符合-后端代码规范"><a href="#代码需符合-后端代码规范" class="headerlink" title="代码需符合 后端代码规范"></a>代码需符合 <a href="http://showdoc.huifanayb.cn:4999/web/#/p/9c0423d7da951ea5923f8f381c63a368" target="_blank" rel="noopener">后端代码规范</a></h2><h2 id="审查方式"><a href="#审查方式" class="headerlink" title="审查方式"></a>审查方式</h2><p>1、项目技术负责人负责自己所属项目代码审查</p><p>2、代码审查总负责人负责抽查项目</p><p>3、项目总负责人每周汇总每个人的代码不规范之处代码及数量，以Showdoc形式公示</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://showdoc.huifanayb.cn:4999/web/#/p/e5e84799ec3272f72615d7090c95df7d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/stro
      
    
    </summary>
    
    
      <category term="规范" scheme="http://iwantjingjing.com/categories/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="代码规范" scheme="http://iwantjingjing.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>现代市场调研</title>
    <link href="http://iwantjingjing.com/2022/04/20/%E7%8E%B0%E4%BB%A3%E5%B8%82%E5%9C%BA%E8%B0%83%E7%A0%94/"/>
    <id>http://iwantjingjing.com/2022/04/20/%E7%8E%B0%E4%BB%A3%E5%B8%82%E5%9C%BA%E8%B0%83%E7%A0%94/</id>
    <published>2022-04-20T04:42:32.000Z</published>
    <updated>2022-04-20T05:40:27.694Z</updated>
    
    <content type="html"><![CDATA[<p>产品上架，通过用户使用反馈情况发现，产品设计与用户需求有一定偏差，遂决定深入钻研市场调研以弥补差距。</p><p>最近在学习现代市场调研，自己整理了电子版。</p><p><img src="http://assets.processon.com/chart_image/625a76700e3e7410dc7ab1ee.png" alt="现代市场调研框架"></p><p><a href="https://vagrant.gitbook.io/xian-dai-shi-chang-tiao-yan/" target="_blank" rel="noopener">自己制作的电子书链接</a></p><p>要实现真正的消费者导向，首先，企业必须建立能够发现消费者需求并识别市场机会的系统。</p><p>这句真的点题。</p><p>使我想起了在分布式系统中的康威定律，组织架构一定要适配系统架构。</p><p>回想清末洋务运动，学其表，妄图治已根。</p><p>生产力与成产关系一定得统一。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;产品上架，通过用户使用反馈情况发现，产品设计与用户需求有一定偏差，遂决定深入钻研市场调研以弥补差距。&lt;/p&gt;
&lt;p&gt;最近在学习现代市场调研，自己整理了电子版。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://assets.processon.com/chart_image/
      
    
    </summary>
    
    
      <category term="市场" scheme="http://iwantjingjing.com/categories/%E5%B8%82%E5%9C%BA/"/>
    
    
      <category term="市场" scheme="http://iwantjingjing.com/tags/%E5%B8%82%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>2022成长计划.md</title>
    <link href="http://iwantjingjing.com/2022/04/20/2022%E6%88%90%E9%95%BF%E8%AE%A1%E5%88%92/"/>
    <id>http://iwantjingjing.com/2022/04/20/2022%E6%88%90%E9%95%BF%E8%AE%A1%E5%88%92/</id>
    <published>2022-04-20T04:38:49.000Z</published>
    <updated>2022-04-20T09:06:49.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="年度目标"><a href="#年度目标" class="headerlink" title="年度目标"></a>年度目标</h1><h2 id="1、微服务架构熟练掌握"><a href="#1、微服务架构熟练掌握" class="headerlink" title="1、微服务架构熟练掌握"></a>1、微服务架构熟练掌握</h2><h3 id="1-3月份：Java教程回顾"><a href="#1-3月份：Java教程回顾" class="headerlink" title="1-3月份：Java教程回顾"></a>1-3月份：Java教程回顾</h3><p><a href="https://iwantjingjing.com/2022/03/30/flyway/#more">flyway数据库迁移方案</a></p><h3 id="4月份：spring教程"><a href="#4月份：spring教程" class="headerlink" title="4月份：spring教程"></a>4月份：spring教程</h3><h3 id="5月份：spring-boot"><a href="#5月份：spring-boot" class="headerlink" title="5月份：spring boot"></a>5月份：spring boot</h3><h3 id="6-12月份：spring-cloud"><a href="#6-12月份：spring-cloud" class="headerlink" title="6-12月份：spring cloud"></a>6-12月份：spring cloud</h3><h2 id="2、掌握Go语言"><a href="#2、掌握Go语言" class="headerlink" title="2、掌握Go语言"></a>2、掌握Go语言</h2><h3 id="1-5-熟悉基本语法"><a href="#1-5-熟悉基本语法" class="headerlink" title="1-5: 熟悉基本语法"></a>1-5: 熟悉基本语法</h3><h3 id="6-12：实战项目"><a href="#6-12：实战项目" class="headerlink" title="6-12：实战项目"></a>6-12：实战项目</h3><h2 id="3、翻译一本英文文档（Grokking-System-Design）"><a href="#3、翻译一本英文文档（Grokking-System-Design）" class="headerlink" title="3、翻译一本英文文档（Grokking+System+Design）"></a>3、翻译一本英文文档（Grokking+System+Design）</h2><p>1-3月份：已翻译</p><h2 id="4-背10篇古文已完成0篇，距离目标还有10篇"><a href="#4-背10篇古文已完成0篇，距离目标还有10篇" class="headerlink" title="4.背10篇古文已完成0篇，距离目标还有10篇"></a>4.背10篇古文<font color=red>已完成0篇，距离目标还有<strong>10</strong>篇</font></h2><ul><li><p>4月份：寒窑赋</p></li><li><p>5月份：围炉夜话</p></li><li><p>6月份：钱本草</p></li><li><p>7月份：风赋</p></li><li><p>8月份：长门赋</p></li><li><p>9月份：洛神赋</p></li><li><p>10月份：侠客行、放言</p></li><li><p>11月份：素书</p></li><li><p>12月份：前赤壁赋</p></li></ul><h2 id="5-写博客48篇（平均一周一篇）已完成15篇，距离目标还有33篇"><a href="#5-写博客48篇（平均一周一篇）已完成15篇，距离目标还有33篇" class="headerlink" title="5.写博客48篇（平均一周一篇）已完成15篇，距离目标还有33篇"></a>5.写博客48篇（平均一周一篇）<font color=red>已完成15篇，距离目标还有<strong>33</strong>篇</font></h2><p><strong>下面为已完成</strong></p><ol><li><p><a href="https://iwantjingjing.com/2022/02/22/2021%E5%B9%B4%E6%8A%80%E6%9C%AF%E7%9B%98%E7%82%B9%E4%B8%8E%E5%B1%95%E6%9C%9B/">2021年技术盘点与展望</a></p></li><li><p><a href="https://iwantjingjing.com/2022/02/22/%E8%A7%A3%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E7%9A%842021%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE10%E4%BD%93%E7%B3%BB%E5%9F%BA%E6%9C%AC%E5%BB%BA%E6%88%90%EF%BC%8C%E4%BD%86%E5%A4%B4%E4%B8%8A%E4%BB%8D%E6%9C%89%E5%87%A0%E6%9C%B5%E4%B9%8C%E4%BA%91/">解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云</a></p></li><li><p><a href="https://iwantjingjing.com/2022/02/22/%E8%A7%A3%E8%AF%BB%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%842021%EF%BC%9A%E8%B6%85%E5%A4%A7%E8%A7%84%E6%A8%A1%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%88%86%E5%8F%91%EF%BC%8C%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%8E%E6%9D%A5%E5%95%86%E4%B8%9A%E5%8C%96%E5%89%8D%E5%A4%9C/">解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜</a></p></li><li><p><a href="https://iwantjingjing.com/2022/02/25/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD/">六顶思考帽</a></p></li><li><p><a href="https://iwantjingjing.com/2022/02/25/%E8%A7%A3%E8%AF%BBGo%E8%AF%AD%E8%A8%80%E7%9A%842021%EF%BC%9A%E7%A8%B3%E5%AE%9A%E4%B8%BA%E7%8E%8B/">解读Go语言的2021：稳定为王</a></p></li><li><p><a href="https://iwantjingjing.com/2022/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">设计模式</a></p></li><li><p><a href="https://iwantjingjing.com/2022/03/30/flyway/">flyway</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/08/Grokking-System-Design/#more">Grokking-System-Design</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/12/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%9B%B4%E5%A5%BD%E7%9A%84APIs%E4%B8%AD%E6%96%87%E7%89%88/#more">如何设计更好的APIs</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/13/JMH%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/">JMH应用指南</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/13/QPS%E3%80%81TPS%E3%80%81OPS%E3%80%81RPS/">QPS、TPS、OPS、RPS</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/20/2022%E6%88%90%E9%95%BF%E8%AE%A1%E5%88%92/">2022成长计划</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/20/%E7%8E%B0%E4%BB%A3%E5%B8%82%E5%9C%BA%E8%B0%83%E7%A0%94/">现代市场调研</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/20/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E6%A0%87%E5%87%86/">代码规范</a></p></li><li><p><a href="https://iwantjingjing.com/2022/04/20/Pandas%E6%95%99%E7%A8%8B/#more">Pandas教程</a></p></li></ol><h2 id="6、leetCode-36道题（一周一道题）已完成1道，距离目标还有35道"><a href="#6、leetCode-36道题（一周一道题）已完成1道，距离目标还有35道" class="headerlink" title="6、leetCode 36道题（一周一道题）已完成1道，距离目标还有35道"></a>6、leetCode 36道题（一周一道题）<font color=red>已完成1道，距离目标还有<strong>35</strong>道</font></h2><h3 id="2021-03-29至2021-04-02-第20题有效的括号"><a href="#2021-03-29至2021-04-02-第20题有效的括号" class="headerlink" title="2021-03-29至2021-04-02 第20题有效的括号"></a>2021-03-29至2021-04-02 <a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">第20题有效的括号</a></h3><h2 id="7、跑步500公里（平均一周13公里、每天2公里）已完成6公里，距离目标还有494公里"><a href="#7、跑步500公里（平均一周13公里、每天2公里）已完成6公里，距离目标还有494公里" class="headerlink" title="7、跑步500公里（平均一周13公里、每天2公里）已完成6公里，距离目标还有494公里"></a>7、跑步500公里（平均一周13公里、每天2公里）<font color=red>已完成<strong>6</strong>公里，距离目标还有<strong>494</strong>公里</font></h2><h2 id="8、读10本书已完成1本，距离目标还有9本"><a href="#8、读10本书已完成1本，距离目标还有9本" class="headerlink" title="8、读10本书已完成1本，距离目标还有9本"></a>8、读10本书<font color=red>已完成1本，距离目标还有<strong>9</strong>本</font></h2><ul><li><p>3月份《小王子》 已读完</p></li><li><p>4月份微信听书《资治通鉴白话篇》</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;年度目标&quot;&gt;&lt;a href=&quot;#年度目标&quot; class=&quot;headerlink&quot; title=&quot;年度目标&quot;&gt;&lt;/a&gt;年度目标&lt;/h1&gt;&lt;h2 id=&quot;1、微服务架构熟练掌握&quot;&gt;&lt;a href=&quot;#1、微服务架构熟练掌握&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="成长" scheme="http://iwantjingjing.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="成长" scheme="http://iwantjingjing.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>QPS、TPS、OPS、RPS.md</title>
    <link href="http://iwantjingjing.com/2022/04/13/QPS%E3%80%81TPS%E3%80%81OPS%E3%80%81RPS/"/>
    <id>http://iwantjingjing.com/2022/04/13/QPS%E3%80%81TPS%E3%80%81OPS%E3%80%81RPS/</id>
    <published>2022-04-13T05:37:51.000Z</published>
    <updated>2022-04-13T07:04:05.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h2><p>QPS Queries Per Second 是每秒查询率 ,是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。即每秒的响应请求数，也即是最大吞吐能力。</p><p>简单的说，QPS = req/sec = 请求数/秒。它代表的是服务器的机器的性能最大吞吐能力。</p><p>可以理解为：<font color=red>每秒处理的request 数量</font></p><p>通常QPS作用：<font color=red>表达和衡量当前系统的负载。</font></p><p>形容当前系统的运行状态时，例如可以说：当前QPS已经达到多少了</p><h3 id="并发量与QPS之间的关系"><a href="#并发量与QPS之间的关系" class="headerlink" title="并发量与QPS之间的关系"></a>并发量与QPS之间的关系</h3><p><code>QPS = 并发量 / 平均响应时间</code></p><p><code>并发量 = QPS * 平均响应时间</code></p><h3 id="典型案例："><a href="#典型案例：" class="headerlink" title="典型案例："></a>典型案例：</h3><p>一个OA签到系统，某公司假设有600个人进行上班打卡，8:00为签到时间。</p><p>从7:50至8:00这10分钟之内，600个人访问此系统，假设每人访问签到一次为1分钟。 </p><p>请问：此OA系统的QPS是多少？并发数为多少？</p><ul><li>首先确定平均响应时间，<strong>平均响应时间</strong> = 1 * 60 = 60秒<br>由于600人处理了10分钟，顾10分钟的并发量是600 </li><li>QPS = 并发量 / 平均响应时间 = 600 / （10*60） = 1人/秒</li><li>并发量 = QPS * 平均响应时间 = 1 * 60 = 60人</li></ul><h2 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h2><p>TPS Transactions Per Second 也就是事务数/秒。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息作出的评估分。</p><p>TPS 的过程包括：客户端请求服务端、服务端内部处理、服务端返回客户端。</p><h2 id="QPS和TPS的联系和区别"><a href="#QPS和TPS的联系和区别" class="headerlink" title="QPS和TPS的联系和区别"></a>QPS和TPS的联系和区别</h2><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p>联系：都是性能指标，都是以秒为单位进行计算。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>吞吐量是数据层的指标，指单位时间内系统传输的数据量，以MB/GB等为单位</p></li><li><p>TPS是网络协议层的指标，指一秒内成功完成的事务数。通常只在Loadrunner工具中使用。</p></li><li><p>吞吐量 = 一次性能测试过程中网络上传输的数据量的总和。</p></li></ul><p>1、Tps即每秒处理事务数，包括了</p><p>用户请求服务器</p><p>服务器自己的内部处理</p><p>服务器返回给用户</p><p>这三个过程，每秒能够完成N个这三个过程，Tps也就是N；</p><p>2、Qps基本类似于Tps，但是不同的是，对于一个页面的一次访问，形成一个Tps；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“Qps”之中。</p><p>例子：</p><p>例如：访问一个页面会请求服务器3次，一次放，产生一个“T”，产生3个“Q”</p><p>例如：一个大胃王一秒能吃10个包子，一个女孩子0.1秒能吃1个包子，那么他们是不是一样的呢？答案是否定的，因为这个女孩子不可能在一秒钟吃下10个包子，她可能要吃很久。这个时候这个大胃王就相当于TPS，而这个女孩子则是QPS。虽然很相似，但其实是不同的。</p><h2 id="并发数"><a href="#并发数" class="headerlink" title="并发数"></a>并发数</h2><p>并发数（并发度）：指系统同时能处理的请求数量，同样反应了系统的负载能力。这个数值可以分析机器1s内的访问日志数量来得到</p><h2 id="RPS-吞吐量"><a href="#RPS-吞吐量" class="headerlink" title="RPS 吞吐量"></a>RPS 吞吐量</h2><p>代表吞吐率，即 Requests Per Second 的缩写。吞吐率是服务器并发处理能力的量化描述，单位是 reqs/s，指的是某个并发用户数下单位时间内处理的请求数。</p><p>某个并发用户数下单位时间内能处理的最大的请求数，称之为最大吞吐率。</p><p>有人把 RPS 说等效于 QPS。其实可以看作同一个统计方式，只是叫法不同而已。RPS/QPS，可以使用 apche ab 工具进行测量。<br>吞吐量是指系统在单位时间内处理请求的数量，TPS、QPS都是吞吐量的常用量化指标。</p><p>系统吞吐量要素</p><p>一个系统的吞吐量（承压能力）与request（请求）对cpu的消耗，外部接口，IO等等紧密关联。</p><p>单个request 对cpu消耗越高，外部系统接口，IO影响速度越慢，系统吞吐能力越低，反之越高。</p><h3 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h3><ul><li><p>QPS(TPS),并发数，响应时间</p></li><li><p>QPS(TPS)：每秒钟request/事务 数量</p></li><li><p>并发数：系统同时处理的request/事务数</p></li><li><p>响应时间：一般取平均响应时间</p></li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>QPS(TPS)=并发数/平均响应时间</p><p>一个系统吞吐量通常有QPS(TPS),并发数两个因素决定，每套系统这个两个值都有一个相对极限值，在应用场景访问压力下，只要某一项达到系统最高值，系统吞吐量就上不去了，如果压力继续增大，系统的吞吐量反而会下降，原因是系统超负荷工作，上下文切换，内存等等其他消耗导致系统性能下降。</p><h2 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h2><p>PV（Page View）：页面访问量，即页面浏览量或点击量，用户每次刷新即被计算一次。可以统计服务一天的访问日志得到。</p><h2 id="UV"><a href="#UV" class="headerlink" title="UV"></a>UV</h2><p>UV（Unique Visitor）：独立访客，统计1天内访问某站点的用户数。可以统计服务一天的访问日志并根据用户的唯一标识去重得到。响应时间（RT）：响应时间是指系统对请求作出响应的时间，一般取平均响应时间。可以通过Nginx、Apache之类的Web Server得到。</p><h2 id="DAU"><a href="#DAU" class="headerlink" title="DAU"></a>DAU</h2><p>DAU(Daily Active User)，日活跃用户数量。常用于反映网站、互联网应用或网络游戏的运营情况。DAU通常统计一日（统计日）之内，登录或使用了某个产品的用户数（去除重复登录的用户），与UV概念相似</p><h2 id="MAU"><a href="#MAU" class="headerlink" title="MAU"></a>MAU</h2><p>MAU(Month Active User)：月活跃用户数量，指网站、app等去重后的月活跃用户数量</p><h2 id="系统吞吐量评估"><a href="#系统吞吐量评估" class="headerlink" title="系统吞吐量评估"></a>系统吞吐量评估</h2><p>我们在做系统设计的时候就需要考虑CPU运算，IO，外部系统响应因素造成的影响以及对系统性能的初步预估。</p><p>而通常情况下，我们面对需求，我们评估出来的出来QPS，并发数之外，还有另外一个维度：日pv。</p><p>通过观察系统的访问日志发现，在用户量很大的情况下，各个时间周期内的同一时间段的访问流量几乎一样。比如工作日的每天早上。只要能拿到日流量图和QPS我们就可以推算日流量。</p><p>通常的技术方法：</p><p>1、找出系统的最高TPS和日PV，这两个要素有相对比较稳定的关系（除了放假、季节性因素影响之外）</p><p>2、通过压力测试或者经验预估，得出最高TPS，然后跟进1的关系，计算出系统最高的日吞吐量。B2B中文和淘宝面对的客户群不一样，这两个客户群的网络行为不应用，他们之间的TPS和PV关系比例也不一样。</p><h2 id="软件性能测试的基本概念和计算公式"><a href="#软件性能测试的基本概念和计算公式" class="headerlink" title="软件性能测试的基本概念和计算公式"></a>软件性能测试的基本概念和计算公式</h2><p>软件做性能测试时需要关注哪些性能呢？</p><p>首先，开发软件的目的是为了让用户使用，我们先站在用户的角度分析一下，用户需要关注哪些性能。</p><p>对于用户来说，当点击一个按钮、链接或发出一条指令开始，到系统把结果已用户感知的形式展现出来为止，这个过程所消耗的时间是用户对这个软件性能的直观印 象。也就是我们所说的响应时间，当相应时间较小时，用户体验是很好的，当然用户体验的响应时间包括个人主观因素和客观响应时间，在设计软件时，我们就需要 考虑到如何更好地结合这两部分达到用户最佳的体验。如：用户在大数据量查询时，我们可以将先提取出来的数据展示给用户，在用户看的过程中继续进行数据检 索，这时用户并不知道我们后台在做什么。</p><p>用户关注的是用户操作的相应时间。</p><p>其次，我们站在管理员的角度考虑需要关注的性能点。</p><ul><li><p>1、 响应时间</p></li><li><p>2、 服务器资源使用情况是否合理</p></li><li><p>3、 应用服务器和数据库资源使用是否合理</p></li><li><p>4、 系统能否实现扩展</p></li><li><p>5、 系统最多支持多少用户访问、系统最大业务处理量是多少</p></li><li><p>6、 系统性能可能存在的瓶颈在哪里</p></li><li><p>7、 更换那些设备可以提高性能</p></li><li><p>8、 系统能否支持7×24小时的业务访问</p></li></ul><p>再次，站在开发（设计）人员角度去考虑。</p><ul><li><p>1、 架构设计是否合理</p></li><li><p>2、 数据库设计是否合理</p></li><li><p>3、 代码是否存在性能方面的问题</p></li><li><p>4、 系统中是否有不合理的内存使用方式</p></li><li><p>5、 系统中是否存在不合理的线程同步方式</p></li><li><p>6、 系统中是否存在不合理的资源竞争</p></li></ul><h2 id="EPS"><a href="#EPS" class="headerlink" title="EPS"></a>EPS</h2><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://blog.csdn.net/yu1xue1fei/article/details/112727927" target="_blank" rel="noopener">OPS TPS RPS 吞吐量 查询率 事物数目 每秒查询率 每秒处理事物数目</a></li><li><a href="https://opslabs.cn/archives/338" target="_blank" rel="noopener">QPS、TPS、并发用户数、吞吐量关系</a></li><li><a href="http://www.4k8k.xyz/article/liuming690452074/88385483" target="_blank" rel="noopener">并发量、QPS 和TPS区别_qq690452074的专栏-程序员资料_并发量</a></li><li><a href="https://www.google.com.hk/search?q=QPS%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97" target="_blank" rel="noopener">QPS如何计算</a></li><li><a href="https://www.cnblogs.com/fengjian2016/p/12321895.html" target="_blank" rel="noopener">这个很实用——网站qps计算方法</a></li><li><a href="https://www.zhihu.com/question/21556347" target="_blank" rel="noopener">PV、TPS、QPS是怎么计算出来的？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;QPS&quot;&gt;&lt;a href=&quot;#QPS&quot; class=&quot;headerlink&quot; title=&quot;QPS&quot;&gt;&lt;/a&gt;QPS&lt;/h2&gt;&lt;p&gt;QPS Queries Per Second 是每秒查询率 ,是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间
      
    
    </summary>
    
    
      <category term="性能测试" scheme="http://iwantjingjing.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="性能测试" scheme="http://iwantjingjing.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JMH应用指南.md</title>
    <link href="http://iwantjingjing.com/2022/04/13/JMH%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://iwantjingjing.com/2022/04/13/JMH%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2022-04-13T01:41:01.000Z</published>
    <updated>2022-04-13T07:35:21.473Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘抄自： <a href="https://hezhiqiang8909.gitbook.io/java/docs/javalib/jmh" target="_blank" rel="noopener">https://hezhiqiang8909.gitbook.io/java/docs/javalib/jmh</a></p><h1 id="JMH-应用指南"><a href="#JMH-应用指南" class="headerlink" title="JMH 应用指南"></a>JMH 应用指南</h1><h2 id="什么是-JMH"><a href="#什么是-JMH" class="headerlink" title="什么是 JMH"></a>什么是 JMH</h2><p><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener">JMH</a> 即Java Microbenchmark Harness,这是专门用于进行代码的微基准测试的一套工具API。</p><p>JMH由OpenJDK/Oracle里面那群开发了Java编译器的大牛们所开发。何谓Micro Benchmark呢？简单地说就是在method层面上的benchmark,精度可以精确到微妙级。</p><h2 id="为什么需要-JMH"><a href="#为什么需要-JMH" class="headerlink" title="为什么需要 JMH"></a>为什么需要 JMH</h2><p><strong>死码消除</strong></p><p>所谓死码，是指注释的代码，不可达的代码块，可达但不被使用的代码等等。</p><p><strong>常量折叠与常量传播</strong></p><p><a href="https://zh.wikipedia.org/wiki/%E5%B8%B8%E6%95%B8%E6%8A%98%E7%96%8A#%E5%B8%B8%E6%95%B8%E5%82%B3%E6%92%AD" target="_blank" rel="noopener">常量折叠</a> (Constant folding)是一个在编译时期简化常数的一个过程，常数在表示式中仅仅代表一个简单的数值，就像是整数2，若是一个变数从未被修改也可作为常数，或者直接将一个变数被明确地标注为常数。</p><h2 id="JMH-的注意点"><a href="#JMH-的注意点" class="headerlink" title="JMH 的注意点"></a>JMH 的注意点</h2><ul><li>测试前需要预热</li><li>防止无用代码进入测试方法中</li><li>并发测试</li><li>测试结果呈现</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><p>当你已经找出了热点函数，而需要对热点函数进行进一步的优化时，就可以使用JMH对优化的效果进行定量的分析。</p></li><li><p>想定量地知道某个函数需要执行多长时间，以及执行时间和输入n的相关性。</p></li><li><p>一个函数有两种不同实现（例如JSON序列化/反序列化有Jackson和Gson实现），不知道哪种实现性能更好</p></li></ol><h2 id="JMH-概念"><a href="#JMH-概念" class="headerlink" title="JMH 概念"></a>JMH 概念</h2><ul><li><code>Iteration</code> - iteration 是JMH进行测试的最小单位，包含一组 invocations 。</li><li><code>Invocation</code>-一次 benchmark 方法调用。</li><li><code>Operation</code>- benchmark 方法中，被测量操作的执行。如果被测试的操作在 benchmark 方法中循环执行，可以使用<code>@OperationsPerInvocation</code>表明循环次数，使测试结果为单次 operatrion 的性能。</li><li><code>Warmup</code> -在实际进行 benchmark 前先进行预热。因为某个函数被调用多次之后， JIT 会对其进行编译，通过预热可以使测量结果更加接近真实情况。 </li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="添加-maven-依赖"><a href="#添加-maven-依赖" class="headerlink" title="添加 maven 依赖"></a>添加 maven 依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.openjdk.jmh&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jmh-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;jmh.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.openjdk.jmh&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jmh-generator-annprocess&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;jmh.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import org.openjdk.jmh.annotations.*;</span><br><span class="line">import org.openjdk.jmh.runner.*;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">@BenchmarkMode(Mode.Throughput)</span><br><span class="line">@Warmup(iterations &#x3D; 3)</span><br><span class="line">@Measurement(iterations &#x3D; 10, time &#x3D; 5, timeUnit &#x3D; TimeUnit.SECONDS)</span><br><span class="line">@Threads(8)</span><br><span class="line">@Fork(2)</span><br><span class="line">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span><br><span class="line">public class StringBuilderBenchmark &#123;</span><br><span class="line"></span><br><span class="line">    @Benchmark</span><br><span class="line">    public void testStringAdd() &#123;</span><br><span class="line">        String a &#x3D; &quot;&quot;;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            a +&#x3D; i;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Benchmark</span><br><span class="line">    public void testStringBuilderAdd() &#123;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws RunnerException &#123;</span><br><span class="line">        Options options &#x3D; new OptionsBuilder()</span><br><span class="line">            .include(StringBuilderBenchmark.class.getSimpleName())</span><br><span class="line">            .output(&quot;d:&#x2F;Benchmark.log&quot;)</span><br><span class="line">            .build();</span><br><span class="line">        new Runner(options).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行-JMH"><a href="#执行-JMH" class="headerlink" title="执行 JMH"></a>执行 JMH</h3><p><strong>命令行</strong></p><h4 id="初始化-benchmarking-工程"><a href="#初始化-benchmarking-工程" class="headerlink" title="初始化 benchmarking 工程"></a>初始化 benchmarking 工程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mvn archetype:generate \</span></span><br><span class="line">          -DinteractiveMode=false \</span><br><span class="line">          -DarchetypeGroupId=org.openjdk.jmh \</span><br><span class="line">          -DarchetypeArtifactId=jmh-java-benchmark-archetype \</span><br><span class="line">          -DgroupId=org.sample \</span><br><span class="line">          -DartifactId=test \</span><br><span class="line">          -Dversion=1.0</span><br></pre></td></tr></table></figure><h4 id="构建-benchmark"><a href="#构建-benchmark" class="headerlink" title="构建 benchmark"></a>构建 benchmark</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="built_in">test</span>/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn clean install</span></span><br></pre></td></tr></table></figure><h4 id="运行-benchmark"><a href="#运行-benchmark" class="headerlink" title="运行 benchmark"></a>运行 benchmark</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar target/benchmarks.jar</span></span><br></pre></td></tr></table></figure><h4 id="执行-main-方法"><a href="#执行-main-方法" class="headerlink" title="执行 main 方法"></a>执行 main 方法</h4><p>执行 main 方法，耐心等待测试结果，最终会生成一个测试报告，内容大致如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"># JMH version: 1.22</span><br><span class="line"># VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13</span><br><span class="line"># VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe</span><br><span class="line"># VM options: -javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2019.2.3\lib\idea_rt.jar&#x3D;58635:D:\Program Files\JetBrains\IntelliJ IDEA 2019.2.3\bin -Dfile.encoding&#x3D;UTF-8</span><br><span class="line"># Warmup: 3 iterations, 10 s each</span><br><span class="line"># Measurement: 10 iterations, 5 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 8 threads, will synchronize iterations</span><br><span class="line"># Benchmark mode: Throughput, ops&#x2F;time</span><br><span class="line"># Benchmark: io.github.dunwu.javalib.jmh.StringBuilderBenchmark.testStringAdd</span><br><span class="line"></span><br><span class="line"># Run progress: 0.00% complete, ETA 00:05:20</span><br><span class="line"># Fork: 1 of 2</span><br><span class="line"># Warmup Iteration   1: 21803.050 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 22501.860 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 20953.944 ops&#x2F;ms</span><br><span class="line">Iteration   1: 21627.645 ops&#x2F;ms</span><br><span class="line">Iteration   2: 21215.269 ops&#x2F;ms</span><br><span class="line">Iteration   3: 20863.282 ops&#x2F;ms</span><br><span class="line">Iteration   4: 21617.715 ops&#x2F;ms</span><br><span class="line">Iteration   5: 21695.645 ops&#x2F;ms</span><br><span class="line">Iteration   6: 21886.784 ops&#x2F;ms</span><br><span class="line">Iteration   7: 21986.899 ops&#x2F;ms</span><br><span class="line">Iteration   8: 22389.540 ops&#x2F;ms</span><br><span class="line">Iteration   9: 22507.313 ops&#x2F;ms</span><br><span class="line">Iteration  10: 22124.133 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"># Run progress: 25.00% complete, ETA 00:04:02</span><br><span class="line"># Fork: 2 of 2</span><br><span class="line"># Warmup Iteration   1: 22262.108 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 21567.804 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 21787.002 ops&#x2F;ms</span><br><span class="line">Iteration   1: 21598.970 ops&#x2F;ms</span><br><span class="line">Iteration   2: 22486.133 ops&#x2F;ms</span><br><span class="line">Iteration   3: 22157.834 ops&#x2F;ms</span><br><span class="line">Iteration   4: 22321.827 ops&#x2F;ms</span><br><span class="line">Iteration   5: 22477.063 ops&#x2F;ms</span><br><span class="line">Iteration   6: 22154.760 ops&#x2F;ms</span><br><span class="line">Iteration   7: 21561.095 ops&#x2F;ms</span><br><span class="line">Iteration   8: 22194.863 ops&#x2F;ms</span><br><span class="line">Iteration   9: 22493.844 ops&#x2F;ms</span><br><span class="line">Iteration  10: 22568.078 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;io.github.dunwu.javalib.jmh.StringBuilderBenchmark.testStringAdd&quot;:</span><br><span class="line">  21996.435 ±(99.9%) 412.955 ops&#x2F;ms [Average]</span><br><span class="line">  (min, avg, max) &#x3D; (20863.282, 21996.435, 22568.078), stdev &#x3D; 475.560</span><br><span class="line">  CI (99.9%): [21583.480, 22409.390] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMH version: 1.22</span><br><span class="line"># VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13</span><br><span class="line"># VM invoker: C:\Program Files\Java\jdk1.8.0_181\jre\bin\java.exe</span><br><span class="line"># VM options: -javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2019.2.3\lib\idea_rt.jar&#x3D;58635:D:\Program Files\JetBrains\IntelliJ IDEA 2019.2.3\bin -Dfile.encoding&#x3D;UTF-8</span><br><span class="line"># Warmup: 3 iterations, 10 s each</span><br><span class="line"># Measurement: 10 iterations, 5 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 8 threads, will synchronize iterations</span><br><span class="line"># Benchmark mode: Throughput, ops&#x2F;time</span><br><span class="line"># Benchmark: io.github.dunwu.javalib.jmh.StringBuilderBenchmark.testStringBuilderAdd</span><br><span class="line"></span><br><span class="line"># Run progress: 50.00% complete, ETA 00:02:41</span><br><span class="line"># Fork: 1 of 2</span><br><span class="line"># Warmup Iteration   1: 241500.886 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 134206.032 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 86907.846 ops&#x2F;ms</span><br><span class="line">Iteration   1: 86143.339 ops&#x2F;ms</span><br><span class="line">Iteration   2: 74725.356 ops&#x2F;ms</span><br><span class="line">Iteration   3: 72316.121 ops&#x2F;ms</span><br><span class="line">Iteration   4: 77319.716 ops&#x2F;ms</span><br><span class="line">Iteration   5: 83469.256 ops&#x2F;ms</span><br><span class="line">Iteration   6: 87712.360 ops&#x2F;ms</span><br><span class="line">Iteration   7: 79421.899 ops&#x2F;ms</span><br><span class="line">Iteration   8: 80867.839 ops&#x2F;ms</span><br><span class="line">Iteration   9: 82619.163 ops&#x2F;ms</span><br><span class="line">Iteration  10: 87026.928 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"># Run progress: 75.00% complete, ETA 00:01:20</span><br><span class="line"># Fork: 2 of 2</span><br><span class="line"># Warmup Iteration   1: 228342.337 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   2: 124737.248 ops&#x2F;ms</span><br><span class="line"># Warmup Iteration   3: 82598.851 ops&#x2F;ms</span><br><span class="line">Iteration   1: 86877.318 ops&#x2F;ms</span><br><span class="line">Iteration   2: 89388.624 ops&#x2F;ms</span><br><span class="line">Iteration   3: 88523.558 ops&#x2F;ms</span><br><span class="line">Iteration   4: 87547.332 ops&#x2F;ms</span><br><span class="line">Iteration   5: 88376.087 ops&#x2F;ms</span><br><span class="line">Iteration   6: 88848.837 ops&#x2F;ms</span><br><span class="line">Iteration   7: 85998.124 ops&#x2F;ms</span><br><span class="line">Iteration   8: 86796.998 ops&#x2F;ms</span><br><span class="line">Iteration   9: 87994.726 ops&#x2F;ms</span><br><span class="line">Iteration  10: 87784.453 ops&#x2F;ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;io.github.dunwu.javalib.jmh.StringBuilderBenchmark.testStringBuilderAdd&quot;:</span><br><span class="line">  84487.902 ±(99.9%) 4355.525 ops&#x2F;ms [Average]</span><br><span class="line">  (min, avg, max) &#x3D; (72316.121, 84487.902, 89388.624), stdev &#x3D; 5015.829</span><br><span class="line">  CI (99.9%): [80132.377, 88843.427] (assumes normal distribution)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Run complete. Total time: 00:05:23</span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM&#x2F;OS&#x2F;HW level, ask for reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark                                     Mode  Cnt      Score      Error   Units</span><br><span class="line">StringBuilderBenchmark.testStringAdd         thrpt   20  21996.435 ±  412.955  ops&#x2F;ms</span><br><span class="line">StringBuilderBenchmark.testStringBuilderAdd  thrpt   20  84487.902 ± 4355.525  ops&#x2F;ms</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>下面来了解一下 jmh 常用 API</p><h3 id="BenchmarkMode"><a href="#BenchmarkMode" class="headerlink" title="@BenchmarkMode"></a>@BenchmarkMode</h3><p>基准测试类型。这里选择的是<code>Throughput</code>也就是吞吐量。根据源码点进去，每种类型后面都有对应的解释，比较好理解，吞吐量会得到单位时间内可以进行的操作数。</p><ul><li><code>Throughput</code>-整体吞吐量，例如”1秒内可以执行多少次调用”。</li><li><code>AverageTime</code> -调用的平均时间，例如”每次调用平均耗时xxx毫秒”。</li><li><code>SampleTime</code> -随机取样，最后输出取样结果的分布，例如”99%的调用在xxx毫秒以内，99.99%的调用在xxx毫秒以内”</li><li><code>SingleShotTime</code> -以上模式都是默认一次iteration是ls，唯有SingleShotTime是只运行一次。往往同时把warmup次数设为0，用于测试冷启动时的性能。</li><li><code>All</code>- 所有模式</li></ul><h3 id="Warmup"><a href="#Warmup" class="headerlink" title="@Warmup"></a>@Warmup</h3><p>上面我们提到了，进行基准测试前需要进行预热。一般我们前几次进行程序测试的时候会比较慢，所以要让程序进行几轮预热，保证测试的准确性</p><h3 id="Measurement"><a href="#Measurement" class="headerlink" title="@Measurement"></a>@Measurement</h3><p>度量，其实就是一些基本的测试参数。</p><ul><li><code>iterations</code> -进行测试的轮次</li><li><code>time</code> -每轮进行的时长</li><li><code>timeUnit</code>-时长单位</li></ul><p>都是一些基本的参数，可以根据具体情况调整。一般比较重的东西可以进行大量的测试，放到服务器上运行。</p><h3 id="Threads"><a href="#Threads" class="headerlink" title="@Threads"></a>@Threads</h3><p>每个进程中的测试线程，这个非常好理解，根据具体情况选择，一般为cpu乘以2。</p><h3 id="Fork"><a href="#Fork" class="headerlink" title="@Fork"></a>@Fork</h3><p>进行fork的次数。如果fork数是2的话，则JMH会fork出两个进程来进行测试。</p><h3 id="OutputTimeUnit"><a href="#OutputTimeUnit" class="headerlink" title="@OutputTimeUnit"></a>@OutputTimeUnit</h3><p>这个比较简单了，基准测试结果的时间类型。一般选择秒、毫秒、微妙。</p><h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="@Benchmark"></a>@Benchmark</h3><p>方法级注解，表示该方法是需要进行benchmark的对象，用法和JUnit的@Test类似。</p><h3 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h3><p>属性级注解，@Param可以用来指定某项参数的多种情况。特别适合用来测试一个函数在不同的参数输入的情况下的性能。</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="@Setup"></a>@Setup</h3><p>方法级注解，这个注解的作用就是我们需要在测试之前进行一些准备工作，比如对一些数据的初始化之类的。</p><h3 id="TearDown"><a href="#TearDown" class="headerlink" title="@TearDown"></a>@TearDown</h3><p>方法级注解，这个注解的作用就是我们需要在测试之后进行一些结束工作，比如关闭线程池，数据库连接等的，主要用于资源的回收等。</p><h3 id="State"><a href="#State" class="headerlink" title="@State"></a>@State</h3><p>当使用@Setup参数的时候，必须在类上加上这个参数，不然会提示无法运行。</p><p>State用于声明某个类时一个”状态”，然后接受一个Scope参数用来表示该状态的共享范围。因为很多benchmark会需要一些表示状态的类，JMH允许你把这些类以依赖注入的方式注入到benchmark的函数里。Scope主要分为三种。</p><ul><li><code>Thread</code> - 该状态为每个线程独享。</li><li><code>Group</code> - 该状态为同一个组里面所有线程共享。</li><li><code>Benchmark</code> - 该状态在所有线程间共享。</li></ul><p>关于 State 的用法，官方的 code sample 里有比较好的<a href="http://hg.openjdk.java.net/code-tools/jmh/file/cb9aa824b55a/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_03_States.java" target="_blank" rel="noopener">例子</a> 。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><ul><li>执行应该用run模式而不是debug模式</li><li>idea记得添加插件JMH Java Microbenchmark…</li><li>允许JMH能够对注解进行处理<pre><code>compiler -&gt; Annotation Processors -&gt; Enable Annotation Processing</code></pre></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" target="_blank" rel="noopener">jmh官方示例</a></li><li><a href="https://www.xncoding.com/2018/01/07/java/jmh.html" target="_blank" rel="noopener">Java微基准测试框架JMH</a></li><li><a href="https://www.cnkirito.moe/java-jmh/" target="_blank" rel="noopener">Java拾遗-JMH与8个测试陷阱</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文摘抄自： &lt;a href=&quot;https://hezhiqiang8909.gitbook.io/java/docs/javalib/jmh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hezhiqiang8909.gitbook.io
      
    
    </summary>
    
    
      <category term="java" scheme="http://iwantjingjing.com/categories/java/"/>
    
    
      <category term="java" scheme="http://iwantjingjing.com/tags/java/"/>
    
      <category term="性能测试" scheme="http://iwantjingjing.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>如何设计更好的APIs中文版</title>
    <link href="http://iwantjingjing.com/2022/04/12/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%9B%B4%E5%A5%BD%E7%9A%84APIs%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://iwantjingjing.com/2022/04/12/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%9B%B4%E5%A5%BD%E7%9A%84APIs%E4%B8%AD%E6%96%87%E7%89%88/</id>
    <published>2022-04-12T09:57:22.000Z</published>
    <updated>2022-04-12T10:08:31.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何设计更好的APIs"><a href="#如何设计更好的APIs" class="headerlink" title="如何设计更好的APIs"></a>如何设计更好的APIs</h1><p><a href="https://r.bluethl.net/how-to-design-better-apis" target="_blank" rel="noopener">原文链接</a></p><p>api很棒，但它们也非常难设计。在从头创建API时，需要正确地获取许多细节。从基本的安全考虑到使用正确的HTTP方法，实现身份验证，决定应该接受和返回哪些请求和响应，……这样的例子不胜枚举。</p><p>在这篇文章中，我尽我最大的努力压缩我所知道的所有关于什么是好的API的东西。一个你的消费者会喜欢使用的API。所有技巧都与语言无关，因此它们适用于任何框架或技术。</p><h2 id="1-一致性"><a href="#1-一致性" class="headerlink" title="1. 一致性"></a>1. 一致性</h2><p>我知道这听起来很合理，但这很难做到正确。我所知道的最好的api都是可预测的。当使用者使用并理解一个端点时，他们可以期望另一个端点以同样的方式工作。这对于整个API来说非常重要，也是判断API是否设计良好、是否适合使用的关键指标之一。</p><ul><li><p>对字段、资源和参数使用相同的大小写(我更喜欢使用snake_case)</p></li><li><p>使用复数或单数资源名(我更喜欢复数)</p><ul><li>/users/{id}, /orders/{id} or /user/{id}, /order/{id}</li></ul></li><li><p>对所有端点使用相同的身份验证和授权方法</p></li><li><p>在整个API中使用相同的HTTP头</p><ul><li>例如 <code>API-key</code>用于传递API键</li></ul></li><li><p>根据响应的类型使用相同的HTTP状态码</p><ul><li>例如，当找不到资源时，会出现404</li></ul></li><li><p>对相同类型的操作使用相同的HTTP方法</p><ul><li>例如删除资源时使用DELETE</li></ul></li></ul><h2 id="2-使用ISO-8601-UTC日期"><a href="#2-使用ISO-8601-UTC日期" class="headerlink" title="2. 使用ISO 8601 UTC日期"></a>2. 使用ISO 8601 UTC日期</h2><p>在处理日期和时间时，api应该总是返回ISO 8601格式的字符串。在特定时区显示日期通常是客户端应用程序关心的问题。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"published_at"</span>: <span class="string">"2022-03-03T21:59:08Z"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-对公共端点进行例外处理"><a href="#3-对公共端点进行例外处理" class="headerlink" title="3.对公共端点进行例外处理"></a>3.对公共端点进行例外处理</h2><p>默认情况下，每个端点都需要授权。大多数端点都需要调用经过身份验证的用户，因此将此设置为缺省值是有意义的。如果需要公开调用某个端点，则显式地将该端点设置为允许未经授权的请求。</p><h2 id="4-提供一个健康检查端点"><a href="#4-提供一个健康检查端点" class="headerlink" title="4. 提供一个健康检查端点"></a>4. 提供一个健康检查端点</h2><p>提供一个端点(例如GET健康状况)来确定服务是否健康。这个端点可以被负载均衡器等其他应用程序调用，以便在服务中断时采取行动。</p><h2 id="5-API的版本"><a href="#5-API的版本" class="headerlink" title="5. API的版本"></a>5. API的版本</h2><p>确保对API进行版本控制，并在每次请求时传递该版本，这样消费者就不会受到对另一个版本的任何更改的影响。API版本可以通过HTTP头或querypath参数传递。即使是API的第一个版本(1.0)也应该显式地进行版本控制。</p><p>Some examples:</p><ul><li><a href="https://api.averagecompany.com/v1/health" target="_blank" rel="noopener">https://api.averagecompany.com/v1/health</a></li><li><a href="https://api.averagecompany.com/health?api_version=1.0" target="_blank" rel="noopener">https://api.averagecompany.com/health?api_version=1.0</a></li></ul><h2 id="6-接受API密钥验证"><a href="#6-接受API密钥验证" class="headerlink" title="6. 接受API密钥验证"></a>6. 接受API密钥验证</h2><p>如果一个API需要由第三方调用，那么允许通过API密钥进行身份验证是有意义的。API键应该使用自定义的HTTP头(例如API - key)传递。它们应该有一个过期日期，并且必须能够撤销活动密钥，以便在它们被破坏时能够失效。避免将API键检查到源代码控制中(改为使用环境变量)。</p><h2 id="7-使用合理的HTTP状态码"><a href="#7-使用合理的HTTP状态码" class="headerlink" title="7. 使用合理的HTTP状态码"></a>7. 使用合理的HTTP状态码</h2><p>使用常规的HTTP状态码来指示请求的成功或失败。不要使用太多，在整个API中使用相同的状态码来实现相同的结果。一些例子:</p><ul><li>200 for general success</li><li>201 for successful creation</li><li>400 for bad requests from the client</li><li>401 for unauthorized requests</li><li>403 for missing permissions</li><li>404 for missing resources</li><li>429 for too many requests</li><li>5xx for internal errors (these should be avoided at all costs)</li></ul><h2 id="8-使用合理的HTTP方法"><a href="#8-使用合理的HTTP方法" class="headerlink" title="8. 使用合理的HTTP方法"></a>8. 使用合理的HTTP方法</h2><p>HTTP方法有很多，但最重要的是:</p><ul><li>POST for creating resources<ul><li>POST /users</li></ul></li><li>GET for reading resources (both single resources and collections)<ul><li>GET /users</li><li>GET /users/{id}</li></ul></li><li>PATCH for applying partial updates to a resource<ul><li>PATCH /users/{id}</li></ul></li><li>PUT for applying full updates to a resource (replaces the current resource)<ul><li>PUT /users/{id}</li></ul></li><li>DELETE for deleting resources<ul><li>DELETE /users/{id}</li></ul></li></ul><h2 id="9-使用不言自明、简单的名称"><a href="#9-使用不言自明、简单的名称" class="headerlink" title="9. 使用不言自明、简单的名称"></a>9. 使用不言自明、简单的名称</h2><p>大多数端点都是面向资源的，应该这样命名。不要添加从别处可以推断出来的不必要的信息。这也适用于字段名。</p><p>✅ GOOD</p><ul><li>GET /users =&gt; Retrieve users</li><li>DELETE /users/{id} =&gt; Delete a user</li><li>POST /users/{id}/notifications =&gt; Create a notification for a specific user<ul><li>user.first_name</li><li>order.number</li></ul></li></ul><p>❌ BAD</p><ul><li>GET /getUser</li><li>POST /updateUser</li><li>POST /notification/user</li><li>order.ordernumber</li><li>user.firstName</li></ul><h2 id="10-使用标准化错误反应"><a href="#10-使用标准化错误反应" class="headerlink" title="10. 使用标准化错误反应"></a>10. 使用标准化错误反应</h2><p>除了使用HTTP状态码来指示请求的结果(成功或错误)外，在返回错误时，始终使用一个标准化的错误响应，其中包含出错原因的更详细信息。消费者总是可以期待相同的结构，并采取相应的行动。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Request =&gt; GET /users/4TL011ax</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Response &lt;= 404 Not Found</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"user/not_found"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"A user with the ID 4TL011ax could not be found."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Request =&gt; POST /users</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Response &lt;= 400 Bad Request</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"user/email_required"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"The parameter [email] is required."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-在POST时返回创建的资源"><a href="#11-在POST时返回创建的资源" class="headerlink" title="11. 在POST时返回创建的资源"></a>11. 在POST时返回创建的资源</h2><p>使用POST请求创建资源后，最好返回已创建的资源。这是最重要的，因为返回的、创建的资源将反映基础数据源的当前状态，并将包含更近期的信息(例如生成的ID)。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Request: POST /users</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"jdoe@averagecompany.com"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Response</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"T9hoBuuTL4"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"jdoe@averagecompany.com"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"John Doe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-比起PUT，更喜欢PATCH"><a href="#12-比起PUT，更喜欢PATCH" class="headerlink" title="12. 比起PUT，更喜欢PATCH"></a>12. 比起PUT，更喜欢PATCH</h2><p>如前所述，PATCH请求应该对资源应用部分更新，而PUT则完全替换现有资源。围绕PATCH请求设计更新通常是个好主意，因为:</p><ul><li><p>当使用PUT仅更新一个资源的字段子集时，仍然需要传递整个资源，这使得它的网络密集性更强，也更容易出错</p></li><li><p>允许任何字段不受任何限制地更新也是相当危险的</p></li><li><p>从我的经验来看，在实践中几乎没有任何用例能够让资源的完整更新变得有意义</p></li><li><p>假设一个订单资源有一个id和一个状态</p></li><li><p>允许消费者更新订单的状态是非常危险的</p></li><li><p>状态更改更有可能由另一个端点触发(如订单{id}履行)</p></li></ul><h2 id="13-尽可能具体"><a href="#13-尽可能具体" class="headerlink" title="13. 尽可能具体"></a>13. 尽可能具体</h2><p>如前一节所述，在设计端点、命名字段和决定接受哪些请求和响应时，最好尽可能具体。如果PATCH请求只接受两个字段(名称和描述)，则不会有错误使用它和损坏数据的危险。</p><h2 id="14-使用分页"><a href="#14-使用分页" class="headerlink" title="14. 使用分页"></a>14. 使用分页</h2><p>对所有返回资源集合并使用相同响应结构的请求进行分页。使用page_number和page_size(或类似的)来控制要检索的数据块。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Response &lt;= 200 OK </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"page_number"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"page_size"</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">"count"</span>: <span class="number">378</span>,</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    <span class="comment">// resources</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"total_pages"</span>: <span class="number">26</span>,</span><br><span class="line">  <span class="attr">"has_previous_page"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"has_next_page"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-允许使用者使用名为expand-或类似-的查询参数加载相关数据。这对于避免往返和一次性加载特定操作所需的所有数据特别有用。"><a href="#15-允许使用者使用名为expand-或类似-的查询参数加载相关数据。这对于避免往返和一次性加载特定操作所需的所有数据特别有用。" class="headerlink" title="15. 允许使用者使用名为expand(或类似)的查询参数加载相关数据。这对于避免往返和一次性加载特定操作所需的所有数据特别有用。"></a>15. 允许使用者使用名为expand(或类似)的查询参数加载相关数据。这对于避免往返和一次性加载特定操作所需的所有数据特别有用。</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Response &lt;= 200 OK</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"T9hoBuuTL4"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"jdoe@averagecompany.com"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"orders"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"Hy3SSXU1PF"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"API course"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"iPhone 13"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"bx1zKmJLI6"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"SaaS subscription"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何设计更好的APIs&quot;&gt;&lt;a href=&quot;#如何设计更好的APIs&quot; class=&quot;headerlink&quot; title=&quot;如何设计更好的APIs&quot;&gt;&lt;/a&gt;如何设计更好的APIs&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://r.bluethl.net/how
      
    
    </summary>
    
    
      <category term="架构" scheme="http://iwantjingjing.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://iwantjingjing.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Grokking-System-Design</title>
    <link href="http://iwantjingjing.com/2022/04/08/Grokking-System-Design/"/>
    <id>http://iwantjingjing.com/2022/04/08/Grokking-System-Design/</id>
    <published>2022-04-08T08:54:23.000Z</published>
    <updated>2022-04-20T05:45:13.626Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在找Grokking-System-Design中文版，翻遍全网，发现没有，遂发挥主观能动性并借助Google翻译等工具整了版中文版。</p><p>能力有限，好多翻译不妥之处，望大家指正。</p><p><a href="https://github.com/jinghongdaxiong/Grokking-System-Design" target="_blank" rel="noopener">github</a></p><p><a href="https://vagrant.gitbook.io/grokking-system-design/fu-zai-jun-heng" target="_blank" rel="noopener">gitbook</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一直在找Grokking-System-Design中文版，翻遍全网，发现没有，遂发挥主观能动性并借助Google翻译等工具整了版中文版。&lt;/p&gt;
&lt;p&gt;能力有限，好多翻译不妥之处，望大家指正。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ji
      
    
    </summary>
    
    
      <category term="系统设计" scheme="http://iwantjingjing.com/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="系统设计" scheme="http://iwantjingjing.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>flyway</title>
    <link href="http://iwantjingjing.com/2022/03/30/flyway/"/>
    <id>http://iwantjingjing.com/2022/03/30/flyway/</id>
    <published>2022-03-30T02:44:42.000Z</published>
    <updated>2022-04-02T06:17:05.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>数据库版本管理工具</p><p><a href="https://flywaydb.org/" target="_blank" rel="noopener">官网</a></p><p><a href="https://github.com/flyway" target="_blank" rel="noopener">github</a></p><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><ul><li>自己写的SQL忘了在所有环境执行</li><li>别人写的SQL我们不能确定是否都在所有环境执行了</li><li>有人修改了已经执行过的SQL，期望再次执行</li><li>需要新增环境做数据迁移</li><li>每次发版需要手动控制先发DB版本，再发布应用版本</li></ul><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><h3 id="集成依赖"><a href="#集成依赖" class="headerlink" title="集成依赖"></a>集成依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.flywaydb&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;flyway-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="在项目resources中添加目录"><a href="#在项目resources中添加目录" class="headerlink" title="在项目resources中添加目录"></a>在项目resources中添加目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 你的目录&#x2F;resources</span><br><span class="line">$ mkdir -p db&#x2F;migration</span><br></pre></td></tr></table></figure><h3 id="在项目配置中添加flyway配置"><a href="#在项目配置中添加flyway配置" class="headerlink" title="在项目配置中添加flyway配置"></a>在项目配置中添加flyway配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  flyway:</span><br><span class="line">    enabled: true</span><br><span class="line">    # 禁止清理数据库表</span><br><span class="line">    clean-disabled: true</span><br><span class="line">    # 如果数据库不是空表，需要设置成 true，否则启动报错</span><br><span class="line">    baseline-on-migrate: true</span><br><span class="line">    # 与 baseline-on-migrate: true 搭配使用</span><br><span class="line">    baseline-version: 0</span><br></pre></td></tr></table></figure><h2 id="扩展学习"><a href="#扩展学习" class="headerlink" title="扩展学习"></a>扩展学习</h2><h3 id="脚本命名规范"><a href="#脚本命名规范" class="headerlink" title="脚本命名规范"></a>脚本命名规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$PREFIX$VERSION__$REMARK.$SUBFIX</span><br></pre></td></tr></table></figure><ul><li>$preifx表示前缀，可在配置中指定，默认为 V</li><li>$version 表示版本，中单可以使用 . 或 _分隔，在解析时会将_转换为.保存到fly_schema_history表的version字段中;</li><li>$remark 表示备注，解析后会将这部分写入到description字段中;</li><li>$subfix 表示后缀，可在配置中指定，默认为.sql;</li><li><font color=red>版本与描述之前使用__分隔（双下划线）否则识别不出来,不执行</font></li><li>V开头的脚本文件直接升序命名版本即可</li><li>R开头的脚本文件表示可重复执行的文件</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V1.1.__description.sql</span><br><span class="line">  </span><br><span class="line">R__description.sql</span><br></pre></td></tr></table></figure><p>prefix：可配置，前缀标识，默认值 V 表示 Versioned，R 表示 Repeatable；</p><p>Version：标识版本号，由一个或多个数字构成，数字之间的分隔符可用点.或单下划线_；</p><p>separator：分隔符，默认是<font color=red>双下划线</font>；</p><p>description：描述信息，文字之间可以用单下划线或空格分隔</p><p>suffix：可配置，后续标识，后续标识，默认为 .sql；</p><p>Versioned migration 用于版本升级，每个版本都有唯一的版本号并只能 apply 依次。（也就是V开头的）</p><p>Repeatable migration 是指可重复加载的 migration，可以重复修改内容使用一旦脚本的 checkksum 有变动，flyway 就会重新应用该脚本，它并不用于版本更新，这类的 migration 总是在 versioned migration 执行之后才被执行（R开头的）</p><h3 id="spring配置详解"><a href="#spring配置详解" class="headerlink" title="spring配置详解"></a>spring配置详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">flyway:</span><br><span class="line">  #开启</span><br><span class="line">  enabled: true</span><br><span class="line">  #当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.</span><br><span class="line">  baseline-on-migrate: true</span><br><span class="line">  # 检测迁移脚本的路径是否存在，如不存在，则抛出异常</span><br><span class="line">  check-location: true</span><br><span class="line">  #sql脚本位置</span><br><span class="line">  locations: classpath:db&#x2F;migration</span><br><span class="line">  #是否允许无序的迁移，默认false</span><br><span class="line">  out-of-order: false</span><br><span class="line">  #编码</span><br><span class="line">  encoding: UTF-8</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"># flyway.baseline-description对执行迁移时基准版本的描述.</span><br><span class="line"># flyway.baseline-on-migrate当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.</span><br><span class="line"># flyway.baseline-version开始执行基准迁移时对现有的schema的版本打标签，默认值为1.</span><br><span class="line"># flyway.check-location检查迁移脚本的位置是否存在，默认false.</span><br><span class="line"># flyway.clean-on-validation-error当发现校验错误时是否自动调用clean，默认false.</span><br><span class="line"># flyway.enabled是否开启flywary，默认true.</span><br><span class="line"># flyway.encoding设置迁移时的编码，默认UTF-8.</span><br><span class="line"># flyway.ignore-failed-future-migration当读取元数据表时是否忽略错误的迁移，默认false.</span><br><span class="line"># flyway.init-sqls当初始化好连接时要执行的SQL.</span><br><span class="line"># flyway.locations迁移脚本的位置，默认db&#x2F;migration.</span><br><span class="line"># flyway.out-of-order是否允许无序的迁移，默认false.</span><br><span class="line"># flyway.password目标数据库的密码.</span><br><span class="line"># flyway.placeholder-prefix设置每个placeholder的前缀，默认$&#123;.</span><br><span class="line"># flyway.placeholder-replacementplaceholders是否要被替换，默认true.</span><br><span class="line"># flyway.placeholder-suffix设置每个placeholder的后缀，默认&#125;.</span><br><span class="line"># flyway.placeholders.[placeholder name]设置placeholder的value</span><br><span class="line"># flyway.schemas设定需要flywary迁移的schema，大小写敏感，默认为连接默认的schema.</span><br><span class="line"># flyway.sql-migration-prefix迁移文件的前缀，默认为V.</span><br><span class="line"># flyway.sql-migration-separator迁移脚本的文件名分隔符，默认__</span><br><span class="line"># flyway.sql-migration-suffix迁移脚本的后缀，默认为.sql</span><br><span class="line"># flyway.tableflyway使用的元数据表名，默认为schema_version</span><br><span class="line"># flyway.target迁移时使用的目标版本，默认为latest version</span><br><span class="line"># flyway.url迁移时使用的JDBC URL，如果没有指定的话，将使用配置的主数据源</span><br><span class="line"># flyway.user迁移数据库的用户名</span><br><span class="line"># flyway.validate-on-migrate迁移时是否校验，默认为true.</span><br></pre></td></tr></table></figure><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><ul><li><p>坑一：命名SQL文件问题</p><p>没有按标准命名，导致执行不成功</p></li><li><p>坑二：执行失败的文件，再次启动时执行不了，可以删除数据库中<code>flyway_schema_history</code>表最后一条数据，然后再重启</p></li><li><p>坑三：云家园装配后不生效，但maven可以生效，目前还在解决中。</p></li></ul><h2 id="竞品对比"><a href="#竞品对比" class="headerlink" title="竞品对比"></a>竞品对比</h2><p>nextep(开源)<br><a href="http://www.nextep-softwares.com/" target="_blank" rel="noopener">http://www.nextep-softwares.com/</a></p><p>dbdeploy(开源)<br><a href="http://dbdeploy.com/" target="_blank" rel="noopener">http://dbdeploy.com/</a></p><p><strong>Liquibase</strong>(开源)<br><a href="http://www.liquibase.org/" target="_blank" rel="noopener">http://www.liquibase.org/</a></p><p>Post Facto(开源)<br><a href="http://www.post-facto.org/" target="_blank" rel="noopener">http://www.post-facto.org/</a></p><p>下面是red gate公司的商业软件</p><p>SQL Source Control (商业软件)<br><a href="http://www.red-gate.com/products/SQL_Source_Control/index.htm" target="_blank" rel="noopener">http://www.red-gate.com/products/SQL_Source_Control/index.htm</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://flywaydb.org" target="_blank" rel="noopener">flyway官网</a></li><li><a href="https://docs.spring.io/spring-boot/docs/2.3.2.RELEASE/reference/htmlsingle/#howto-execute-flyway-database-migrations-on-startup" target="_blank" rel="noopener">springBoot2.3.2.RELEASE手册</a>  </li><li><a href="https://www.jianshu.com/p/567a8a161641" target="_blank" rel="noopener">https://www.jianshu.com/p/567a8a161641</a></li><li><a href="https://blog.csdn.net/chenleiking/article/details/80691750" target="_blank" rel="noopener">https://blog.csdn.net/chenleiking/article/details/80691750</a></li><li><a href="https://segmentfault.com/a/1190000038960756" target="_blank" rel="noopener">https://segmentfault.com/a/1190000038960756</a></li><li><a href="https://juejin.cn/post/6844903802215071758" target="_blank" rel="noopener">https://juejin.cn/post/6844903802215071758</a></li><li><a href="https://blog.csdn.net/qq_33430083/article/details/105508025" target="_blank" rel="noopener">https://blog.csdn.net/qq_33430083/article/details/105508025</a></li><li><strong><a href="https://blog.51cto.com/u_15076233/4273411" target="_blank" rel="noopener">https://blog.51cto.com/u_15076233/4273411</a></strong></li><li><strong><a href="https://www.saoniuhuo.com/article/detail-30226.html" target="_blank" rel="noopener">https://www.saoniuhuo.com/article/detail-30226.html</a></strong></li><li><a href="https://blog.51cto.com/javastack/2967527" target="_blank" rel="noopener"><strong>这个用的比较新的flyway</strong></a></li><li><a href="https://zhuanlan.zhihu.com/p/63513168" target="_blank" rel="noopener">知乎的这篇原理介绍还可以</a></li><li><a href="https://www.zhihu.com/question/41782437/answer/1242972612" target="_blank" rel="noopener">知乎的这篇讨论也有点意思，尤其是其中的其他链接</a></li><li><a href="https://zhuanlan.zhihu.com/p/51170727" target="_blank" rel="noopener">这是要删库跑路的节奏啊</a></li><li><a href="https://zhuanlan.zhihu.com/p/334650852" target="_blank" rel="noopener">这篇讲的实战中k8s结合flyway很高大上</a></li><li><a href="https://blog.csdn.net/zxd1435513775/article/details/104392489" target="_blank" rel="noopener">这篇中idea新建项目及sql文件命名讲的不错</a></li><li><a href="https://stackoverflow.com/questions/55328817/flyway-cant-find-classpathdb-migrations" target="_blank" rel="noopener">这就是我遇到的一个坑，自己创建映射目录时没注意</a></li><li><a href="https://www.diglog.com/story/1032583.html" target="_blank" rel="noopener">这篇值得深入研究<strong>比较数据版本控制工具-2020</strong></a></li><li><a href="https://www.cnblogs.com/harrychinese/archive/2011/03/20/some_database_version_control_tool.html" target="_blank" rel="noopener">几个数据库的版本控制工具</a></li><li><a href="https://www.shangmayuan.com/a/54e27b8f31f740a9a95de09c.html" target="_blank" rel="noopener">数据库版本控制工具介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h2&gt;&lt;p&gt;数据库版本管理工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://flywaydb.org/&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="SQL" scheme="http://iwantjingjing.com/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://iwantjingjing.com/tags/SQL/"/>
    
      <category term="版本管理" scheme="http://iwantjingjing.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://iwantjingjing.com/2022/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://iwantjingjing.com/2022/03/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-15T03:59:23.000Z</published>
    <updated>2022-03-30T07:15:10.773Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式按类型分为3类：</p><ul><li>创建型模式</li><li>结构型模式</li><li>行为型模式</li></ul><p>其中创建型模式又分为5种</p><ul><li>工厂方法</li><li>抽象工厂</li><li>生成器</li><li>原型</li><li>单例</li></ul><p>结构型模式分为7种</p><ul><li>适配器</li><li>桥接</li><li>组合</li><li>装饰器</li><li>外观</li><li>享元</li><li>代理</li></ul><p>行为型模式分为11种</p><ul><li>责任链</li><li>命令</li><li>解释器</li><li>迭代器</li><li>中介</li><li>备忘录</li><li>观察者</li><li>状态</li><li>策略</li><li>模板方法</li><li>访问者</li></ul><h2 id="01-工厂方法"><a href="#01-工厂方法" class="headerlink" title="01 工厂方法"></a>01 工厂方法</h2><p>追 MM 少不了请吃饭了，麦当劳的鸡翅和肯德基的鸡翅都是 MM 爱吃的东西，虽然口味有所不同，但不管你带 MM 去麦当劳或肯德基，只管向服务员说「来四个鸡翅」就行了。麦当劳和肯德基就是生产鸡翅的 Factory 工厂模式：<strong>客户类和工厂类分开</strong>。</p><p>消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。缺点是当产品修改时，工厂类也要做相应的修改。如：<strong>如何创建及如何向客户端提供</strong>。</p><h2 id="02-建造者模式"><a href="#02-建造者模式" class="headerlink" title="02 建造者模式"></a>02 建造者模式</h2><p>MM 最爱听的就是「我爱你」这句话了，见到不同地方的 MM，要能够用她们的方言跟她说这句话哦，我有一个多种语言翻译机，上面每种语言都有一个按键，见到 MM 我只要按对应的键，它就能够用相应的语言说出「我爱你」这句话了，国外的 MM 也可以轻松搞掂，这就是我的「我爱你」builder。</p><p>建造模式：将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。建造模式可以强制实行一种分步骤进行的建造过程。</p><h2 id="03-抽象工厂"><a href="#03-抽象工厂" class="headerlink" title="03 抽象工厂"></a>03 抽象工厂</h2><p>请 MM 去麦当劳吃汉堡，不同的 MM 有不同的口味，要每个都记住是一件烦人的事情，我一般采用 Factory Method 模式，带着 MM 到服务员那儿，说「要一个汉堡」，具体要什么样的汉堡呢，让 MM 直接跟服务员说就行了。</p><p>工厂方法模式：核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给子类去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。</p><h2 id="04-原型模式"><a href="#04-原型模式" class="headerlink" title="04 原型模式"></a>04 原型模式</h2><p>跟 MM 用 QQ 聊天，一定要说些深情的话语了，我搜集了好多肉麻的情话，需要时只要 copy 出来放到 QQ 里面就行了，这就是我的情话 prototype 了。（100 块钱一份，你要不要）</p><p>原始模型模式：通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原始模型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构，原始模型模式适用于任何的等级结构。缺点是每一个类都必须配备一个克隆方法。</p><h2 id="05-单例模式"><a href="#05-单例模式" class="headerlink" title="05 单例模式"></a>05 单例模式</h2><p>俺有 6 个漂亮的老婆，她们的老公都是我，我就是我们家里的老公 Sigleton，她们只要说道「老公」，都是指的同一个人，那就是我 (刚才做了个梦啦，哪有这么好的事)</p><p>单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的 “单一实例” 的需求时才可使用。</p><h2 id="06-适配器模式"><a href="#06-适配器模式" class="headerlink" title="06 适配器模式"></a>06 适配器模式</h2><p>在朋友聚会上碰到了一个美女 Sarah，从香港来的，可我不会说粤语，她不会说普通话，只好求助于我的朋友 kent 了，他作为我和 Sarah 之间的 Adapter，让我和 Sarah 可以相互交谈了 (也不知道他会不会耍我)</p><p>适配器（变压器）模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口原因不匹配而无法一起工作的两个类能够一起工作。适配类可以根据参数返还一个合适的实例给客户端。</p><h2 id="07-桥接模式"><a href="#07-桥接模式" class="headerlink" title="07 桥接模式"></a>07 桥接模式</h2><p>早上碰到 MM，要说早上好，晚上碰到 MM，要说晚上好；碰到 MM 穿了件新衣服，要说你的衣服好漂亮哦，碰到 MM 新做的发型，要说你的头发好漂亮哦。不要问我 “早上碰到 MM 新做了个发型怎么说” 这种问题，自己用 BRIDGE 组合一下不就行了</p><p>桥梁模式：将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合 / 聚合关系而不是继承关系，从而使两者可以独立的变化。</p><p>定义俩接口再通过一个接口将这两个接口连接起来</p><h2 id="08-合成模式"><a href="#08-合成模式" class="headerlink" title="08 合成模式"></a>08 合成模式</h2><p>Mary 今天过生日。“我过生日，你要送我一件礼物。”“嗯，好吧，去商店，你自己挑。”“这件 T 恤挺漂亮，买，这条裙子好看，买，这个包也不错，买。”“喂，买了三件了呀，我只答应送一件礼物的哦。”“什么呀，T 恤加裙子加包包，正好配成一套呀，小姐，麻烦你包起来。”“……”，MM 都会用 Composite 模式了，你会了没有？</p><p>合成模式：合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式就是一个处理对象的树结构的模式。合成模式把部分与整体的关系用树结构表示出来。合成模式使得客户端把一个个单独的成分对象和由他们复合而成的合成对象同等看待。</p><h2 id="09-装饰模式"><a href="#09-装饰模式" class="headerlink" title="09 装饰模式"></a>09 装饰模式</h2><p>Mary 过完轮到 Sarly 过生日，还是不要叫她自己挑了，不然这个月伙食费肯定玩完，拿出我去年在华山顶上照的照片，在背面写上 “最好的的礼物，就是爱你的 Fita”，再到街上礼品店买了个像框（卖礼品的 MM 也很漂亮哦），再找隔壁搞美术设计的 Mike 设计了一个漂亮的盒子装起来……，我们都是 Decorator，最终都在修饰我这个人呀，怎么样，看懂了吗？</p><p>装饰模式：装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案，提供比继承更多的灵活性。动态给一个对象增加功能，这些功能可以再动态的撤消。增加由一些基本功能的排列组合而产生的非常大量的功能。</p><h2 id="10-门面模式"><a href="#10-门面模式" class="headerlink" title="10 门面模式"></a>10 门面模式</h2><p>我有一个专业的 Nikon 相机，我就喜欢自己手动调光圈、快门，这样照出来的照片才专业，但 MM 可不懂这些，教了半天也不会。幸好相机有 Facade 设计模式，把相机调整到自动档，只要对准目标按快门就行了，一切由相机自动调整，这样 MM 也可以用这个相机给我拍张照片了。门面模式：外部与一个子系统的通信必须通过一个统一的门面对象进行。</p><p>门面模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个门面类，而且此门面类只有一个实例，也就是说它是一个单例模式。但整个系统可以有多个门面类。</p><h2 id="11-享元模式"><a href="#11-享元模式" class="headerlink" title="11 享元模式"></a>11 享元模式</h2><p>每天跟 MM 发短信，手指都累死了，最近买了个新手机，可以把一些常用的句子存在手机里，要用的时候，直接拿出来，在前面加上 MM 的名字就可以发送了，再不用一个字一个字敲了。共享的句子就是 Flyweight，MM 的名字就是提取出来的外部特征，根据上下文情况使用。享元模式：FLYWEIGHT 在拳击比赛中指最轻量级。</p><p>享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。</p><p>将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。</p><h2 id="12-代理模式"><a href="#12-代理模式" class="headerlink" title="12 代理模式"></a>12 代理模式</h2><p>跟 MM 在网上聊天，一开头总是 “hi, 你好”,“你从哪儿来呀？”“你多大了？”“身高多少呀？” 这些话，真烦人，写个程序做为我的 Proxy 吧，凡是接收到这些话都设置好了自己的回答，接收到其他的话时再通知我回答，怎么样，酷吧。</p><p>代理模式：代理模式给某一个对象提供一个代理对象，并由代理对象控制对源对象的引用。代理就是一个人或一个机构代表另一个人或者一个机构采取行动。某些情况下，客户不想或者不能够直接引用一个对象，代理对象可以在客户和目标对象直接起到中介的作用。</p><p>客户端分辨不出代理主题对象与真实主题对象。代理模式可以并不知道真正的被代理对象，而仅仅持有一个被代理对象的接口，这时候代理对象不能够创建被代理对象，被代理对象必须有系统的其他角色代为创建并传入。</p><h2 id="13-责任链模式"><a href="#13-责任链模式" class="headerlink" title="13 责任链模式"></a>13 责任链模式</h2><p>晚上去上英语课，为了好开溜坐到了最后一排，哇，前面坐了好几个漂亮的 MM 哎，找张纸条，写上 “Hi, 可以做我的女朋友吗？如果不愿意请向前传”，纸条就一个接一个的传上去了，糟糕，传到第一排的 MM 把纸条传给老师了，听说是个老处女呀，快跑！</p><p>责任链模式：在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上的哪一个对象最终处理这个请求，系统可以在不影响客户端的情况下动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。</p><h2 id="14-命令模式"><a href="#14-命令模式" class="headerlink" title="14 命令模式"></a>14 命令模式</h2><p>俺有一个 MM 家里管得特别严，没法见面，只好借助于她弟弟在我们俩之间传送信息，她对我有什么指示，就写一张纸条让她弟弟带给我。这不，她弟弟又传送过来一个 COMMAND，为了感谢他，我请他吃了碗杂酱面，哪知道他说：“我同时给我姐姐三个男朋友送 COMMAND，就数你最小气，才请我吃面。”</p><p>命令模式：命令模式把一个请求或者操作封装到一个对象中。命令模式把发出命令的责任和执行命令的责任分割开，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。系统支持命令的撤消。</p><h2 id="15-解释器模式"><a href="#15-解释器模式" class="headerlink" title="15 解释器模式"></a>15 解释器模式</h2><p>俺有一个《泡 MM 真经》，上面有各种泡 MM 的攻略，比如说去吃西餐的步骤、去看电影的方法等等，跟 MM 约会时，只要做一个 Interpreter，照着上面的脚本执行就可以了。</p><p>解释器模式：给定一个语言后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。解释器模式将描述怎样在有了一个简单的文法后，使用模式设计解释这些语句。</p><p>在解释器模式里面提到的语言是指任何解释器对象能够解释的任何组合。在解释器模式中需要定义一个代表文法的命令类的等级结构，也就是一系列的组合规则。每一个命令对象都有一个解释方法，代表对命令对象的解释。命令对象的等级结构中的对象的任何排列组合都是一个语言。</p><h2 id="16-迭代模式"><a href="#16-迭代模式" class="headerlink" title="16 迭代模式"></a>16 迭代模式</h2><p>我爱上了 Mary，不顾一切的向她求婚。Mary：“想要我跟你结婚，得答应我的条件” 我：“什么条件我都答应，你说吧” Mary：“我看上了那个一克拉的钻石” 我：“我买，我买，还有吗？” Mary：“我看上了湖边的那栋别墅” 我：“我买，我买，还有吗？” Mary：“我看上那辆法拉利跑车” 我脑袋嗡的一声，坐在椅子上，一咬牙：“我买，我买，还有吗？”</p><p>迭代模式：迭代模式可以<strong>顺序访问一个聚集中的元素而不必暴露聚集的内部表象</strong>。多个对象聚在一起形成的总体称之为聚集，聚集对象是能够包容一组对象的容器对象。迭代子模式将迭代逻辑封装到一个独立的子对象中，从而与聚集本身隔开。</p><p>迭代模式简化了聚集的界面。每一个聚集对象都可以有一个或一个以上的迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。迭代算法可以独立于聚集角色变化。</p><h2 id="17-调停者模式"><a href="#17-调停者模式" class="headerlink" title="17 调停者模式"></a>17 调停者模式</h2><p>四个 MM 打麻将，相互之间谁应该给谁多少钱算不清楚了，幸亏当时我在旁边，按照各自的筹码数算钱，赚了钱的从我这里拿，赔了钱的也付给我，一切就 OK 啦，俺得到了四个 MM 的电话。调停者模式：调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散偶合。</p><p>当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p><h2 id="18-备忘录模式"><a href="#18-备忘录模式" class="headerlink" title="18 备忘录模式"></a>18 备忘录模式</h2><p>同时跟几个 MM 聊天时，一定要记清楚刚才跟 MM 说了些什么话，不然 MM 发现了会不高兴的哦，幸亏我有个备忘录，刚才与哪个 MM 说了什么话我都拷贝一份放到备忘录里面保存，这样可以随时察看以前的记录啦。</p><p>备忘录模式：备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。</p><h2 id="19-观察者模式"><a href="#19-观察者模式" class="headerlink" title="19 观察者模式"></a>19 观察者模式</h2><p>想知道咱们公司最新 MM 情报吗？加入公司的 MM 情报邮件组就行了，tom 负责搜集情报，他发现的新情报不用一个一个通知我们，直接发布给邮件组，我们作为订阅者（观察者）就可以及时收到情报啦。</p><p>观察者模式：观察者模式定义了一种一队多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。关注微信订阅号码匠笔记回复设计模式还有视频版本哦</p><h2 id="20-状态模式"><a href="#20-状态模式" class="headerlink" title="20 状态模式"></a>20 状态模式</h2><p>跟 MM 交往时，一定要注意她的状态哦，在不同的状态时她的行为会有不同，比如你约她今天晚上去看电影，对你没兴趣的 MM 就会说 “有事情啦”，对你不讨厌但还没喜欢上的 MM 就会说 “好啊，不过可以带上我同事么？”，已经喜欢上你的 MM 就会说 “几点钟？看完电影再去泡吧怎么样？”，当然你看电影过程中表现良好的话，也可以把 MM 的状态从不讨厌不喜欢变成喜欢哦。</p><p>状态模式：状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。<strong>状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类</strong>。</p><p>状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。</p><h2 id="21-策略模式"><a href="#21-策略模式" class="headerlink" title="21 策略模式"></a>21 策略模式</h2><p>跟不同类型的 MM 约会，要用不同的策略，有的请电影比较好，有的则去吃小吃效果不错，有的去海边浪漫最合适，单目的都是为了得到 MM 的芳心，我的追 MM 锦囊中有好多 Strategy 哦。策略模式：策略模式针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。</p><p>策略模式使得算法可以在不影响到客户端的情况下发生变化。策略模把行为和环境分开。环境类负责维持和查询行为类，各种算法在具体的策略类中提供。由于算法和环境独立开来，算法的增减，修改都不会影响到环境和客户端。</p><h2 id="22-模板方法模式"><a href="#22-模板方法模式" class="headerlink" title="22 模板方法模式"></a>22 模板方法模式</h2><p>看过《如何说服女生上床》这部经典文章吗？女生从认识到上床的不变的步骤分为巧遇、打破僵局、展开追求、接吻、前戏、动手、爱抚、进去八大步骤 (Template method)，但每个步骤针对不同的情况，都有不一样的做法，这就要看你随机应变啦 (具体实现)；</p><p>模板方法模式：模板方法模式<strong>准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑</strong>。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。</p><h2 id="23-访问者模式"><a href="#23-访问者模式" class="headerlink" title="23 访问者模式"></a>23 访问者模式</h2><p>情人节到了，要给每个 MM 送一束鲜花和一张卡片，可是每个 MM 送的花都要针对她个人的特点，每张卡片也要根据个人的特点来挑，我一个人哪搞得清楚，还是找花店老板和礼品店老板做一下 Visitor，让花店老板根据 MM 的特点选一束花，让礼品店老板也根据每个人特点选一张卡，这样就轻松多了；</p><p>访问者模式：访问者模式的<strong>目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构可以保持不变</strong>。访问者模式适用于<strong>数据结构相对稳定</strong>的系统，它<strong>把数据结构和作用于结构上的操作之间的耦合解脱开</strong>，使得操作集合可以相对自由的演化。访问者模式使得增加新的操作变的很容易，就是增加一个新的访问者类。</p><p>访问者模式将有关的行为集中到一个访问者对象中，而不是分散到一个个的节点类中。当使用访问者模式时，要将尽可能多的对象浏览逻辑放在访问者类中，而不是放到它的子类中。访问者模式可以跨过几个类的等级结构访问属于不同的等级结构的成员类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计模式按类型分为3类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建型模式&lt;/li&gt;
&lt;li&gt;结构型模式&lt;/li&gt;
&lt;li&gt;行为型模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中创建型模式又分为5种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂方法&lt;/li&gt;
&lt;li&gt;抽象工厂&lt;/li&gt;
&lt;li&gt;生成器&lt;/li
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://iwantjingjing.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://iwantjingjing.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="重构" scheme="http://iwantjingjing.com/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>解读Go语言的2021：稳定为王</title>
    <link href="http://iwantjingjing.com/2022/02/25/%E8%A7%A3%E8%AF%BBGo%E8%AF%AD%E8%A8%80%E7%9A%842021%EF%BC%9A%E7%A8%B3%E5%AE%9A%E4%B8%BA%E7%8E%8B/"/>
    <id>http://iwantjingjing.com/2022/02/25/%E8%A7%A3%E8%AF%BBGo%E8%AF%AD%E8%A8%80%E7%9A%842021%EF%BC%9A%E7%A8%B3%E5%AE%9A%E4%B8%BA%E7%8E%8B/</id>
    <published>2022-02-25T06:39:42.000Z</published>
    <updated>2022-02-25T08:23:32.487Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘抄自infoQ《2021年技术盘点与展望》</p><p><a href="https://www.infoq.cn/minibook/Rmc3QT7vIXdr0ovFhZZ8" target="_blank" rel="noopener">原文链接</a></p><h2 id="年度回顾"><a href="#年度回顾" class="headerlink" title="年度回顾"></a>年度回顾</h2><h3 id="新的官网网站"><a href="#新的官网网站" class="headerlink" title="新的官网网站"></a>新的官网网站</h3><p><a href="https://golang.org" target="_blank" rel="noopener">官网</a></p><p><a href="https://golang.google.cn" target="_blank" rel="noopener">中国官网</a></p><p><a href="https://go.dev" target="_blank" rel="noopener">google新搞的</a></p><p><a href="https://pkg.go.dev" target="_blank" rel="noopener">google新搞的二级域名存文档啥的</a></p><h3 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h3><h4 id="系统环境变量-GO111MODULE"><a href="#系统环境变量-GO111MODULE" class="headerlink" title="系统环境变量 GO111MODULE"></a>系统环境变量 GO111MODULE</h4><h4 id="Go-模块的配置文件：模块图修剪"><a href="#Go-模块的配置文件：模块图修剪" class="headerlink" title="Go 模块的配置文件：模块图修剪"></a>Go 模块的配置文件：模块图修剪</h4><h4 id="Go-模块的配置文件：新的指令"><a href="#Go-模块的配置文件：新的指令" class="headerlink" title="Go 模块的配置文件：新的指令"></a>Go 模块的配置文件：新的指令</h4><h4 id="Go-模块的配置文件：新的注释"><a href="#Go-模块的配置文件：新的注释" class="headerlink" title="Go 模块的配置文件：新的注释"></a>Go 模块的配置文件：新的注释</h4><h3 id="标准命令"><a href="#标准命令" class="headerlink" title="标准命令"></a>标准命令</h3><h4 id="go-install-命令"><a href="#go-install-命令" class="headerlink" title="go install 命令"></a>go install 命令</h4><h4 id="go-get命令"><a href="#go-get命令" class="headerlink" title="go get命令"></a>go get命令</h4><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><h4 id="新增的-3-个代码包"><a href="#新增的-3-个代码包" class="headerlink" title="新增的 3 个代码包"></a>新增的 3 个代码包</h4><h4 id="废弃-io-ioutil-包"><a href="#废弃-io-ioutil-包" class="headerlink" title="废弃 io/ioutil 包"></a>废弃 io/ioutil 包</h4><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h3 id="其他更新"><a href="#其他更新" class="headerlink" title="其他更新"></a>其他更新</h3><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><h4 id="模块管理工具"><a href="#模块管理工具" class="headerlink" title="模块管理工具"></a>模块管理工具</h4><h4 id="泛型语法支持"><a href="#泛型语法支持" class="headerlink" title="泛型语法支持"></a>泛型语法支持</h4><h4 id="其他期待"><a href="#其他期待" class="headerlink" title="其他期待"></a>其他期待</h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文摘抄自infoQ《2021年技术盘点与展望》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/minibook/Rmc3QT7vIXdr0ovFhZZ8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/categories/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/tags/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
      <category term="Go" scheme="http://iwantjingjing.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>六顶思考帽</title>
    <link href="http://iwantjingjing.com/2022/02/25/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD/"/>
    <id>http://iwantjingjing.com/2022/02/25/%E5%85%AD%E9%A1%B6%E6%80%9D%E8%80%83%E5%B8%BD/</id>
    <published>2022-02-25T01:26:43.000Z</published>
    <updated>2022-02-25T05:02:13.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="img_2.png" alt=""></p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>作者: [英] 爱德华•德•博诺 (Edward De Bono)</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><ul><li>01 引言 </li><li>02 六顶帽子，六种颜色 </li><li>03 使用思考帽 <h3 id="蓝帽思考"><a href="#蓝帽思考" class="headerlink" title="蓝帽思考"></a>蓝帽思考</h3></li><li>04 蓝帽思考：掌控思考 </li><li>05 蓝帽思考：专注 </li><li>06 蓝帽思考：程序设计 </li><li>07 蓝帽思考：归纳与总结 </li><li>08 蓝帽思考：控制与监控 </li><li>09 蓝色思考帽小结 <h3 id="白帽思考"><a href="#白帽思考" class="headerlink" title="白帽思考"></a>白帽思考</h3></li><li>10 白帽思考：事实和数据 </li><li>11 白帽思考：这是谁的事实？ </li><li>12 白帽思考：日式输入 </li><li>13 白帽思考：事实、真理和哲学家 </li><li>14 白帽思考：谁戴上了这顶帽子？ </li><li>15 白色思考帽小结 <h3 id="红帽思考"><a href="#红帽思考" class="headerlink" title="红帽思考"></a>红帽思考</h3></li><li>16 红帽思考：情绪与情感 </li><li>17 红帽思考：情绪在思考中的地位 </li><li>18 红帽思考：直觉和预感 </li><li>19 红帽思考：时时刻刻 </li><li>20 红帽思考：用对情绪 </li><li>21 红帽思考：情绪的语言 </li><li>22 红色思考帽小结 <h3 id="黄帽思考"><a href="#黄帽思考" class="headerlink" title="黄帽思考"></a>黄帽思考</h3></li><li>23 黄帽思考：冒险之帽——积极探索 </li><li>24 黄帽思考：积极的范围 </li><li>25 黄帽思考：理由和逻辑证据 </li><li>26 黄帽思考：建设性思考 </li><li>27 黄帽思考：投机远见 </li><li>28 黄帽思考：与创造力的关系 </li><li>29 黄色思考帽小结 <h3 id="黑帽思考"><a href="#黑帽思考" class="headerlink" title="黑帽思考"></a>黑帽思考</h3></li><li>30 黑帽思考：谨慎和小心 </li><li>31 黑帽思考：内容和过程 </li><li>32 黑帽思考：过去和未来 </li><li>33 黑帽思考：过度使用的问题 </li><li>34 黑色思考帽小结 <h3 id="绿帽思考"><a href="#绿帽思考" class="headerlink" title="绿帽思考"></a>绿帽思考</h3></li><li>35 绿帽思考：创造性思考 </li><li>36 绿帽思考：水平思考 </li><li>37 绿帽思考：行动而非判断 </li><li>38 绿帽思考：激发的必要性 </li><li>39 绿帽思考：备选路线 </li><li>40 绿帽思考：性格与技能 </li><li>41 绿帽思考：创意的遭遇？ </li><li>42 绿色思考帽小结 </li><li>43 六顶思考帽方法的优点 <h3 id="结-语"><a href="#结-语" class="headerlink" title="结 语"></a>结 语</h3></li></ul><h2 id="最近感悟"><a href="#最近感悟" class="headerlink" title="最近感悟"></a>最近感悟</h2><p>最近在读六顶思考帽这本书。很早之前就听过这本书，一直也没看，最近公司读书会形式有所改变，不再是大家通读一本书，说实话原来那种形式我不是太喜欢，每天往群里发几页，遇见想看的吧嫌发的太少，大多数时候都是不喜欢读，从书的选择和读形式我都是很抵触的，本来自我感觉还是喜欢看书的人，但读书会的这种形式，我看还是算了吧！</p><p>别把我好不容易来的读书兴趣给抹杀了！</p><p>现在信息爆炸，每天被各种垃圾信息包围，读书也是：如果不经过认真挑选，你就会被垃圾环绕。</p><p>作为一个挑食（精神食粮）的人，初看到这本书，扫了眼豆瓣，评分好像是6点多，属实不高。用什么6个颜色来表达6种思考方式，我觉得很欠妥。本来就有见文知意的字来形容这6种思维模式。愣是自造概念整了6种颜色。好吧——在我创造的世界里我就是上帝。</p><p>以上吐槽告一段落。说点积极的，书中还是有一些积极意义的：</p><p>6中思维模式</p><table><thead><tr><th align="left">颜色</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">蓝色</td><td align="left">框架思维</td></tr><tr><td align="left">白色</td><td align="left">事实思维</td></tr><tr><td align="left">绿色</td><td align="left">创造性思维</td></tr><tr><td align="left">黄色</td><td align="left">积极思维</td></tr><tr><td align="left">黑色</td><td align="left">危机思维</td></tr><tr><td align="left">红色</td><td align="left">情绪思维</td></tr></tbody></table><p>咋用呢？</p><p>书中说可以单独用，也可以顺序都用，也可以定时用，注意纪律性。好吧貌似都是说给开会使用的。</p><p>说到开会，想起了一句话：”评价一个人领导力水平高低就是看这人会不会开会”</p><p>书中说到了一句话我很喜欢，在此记录：”思考最大的敌人是复杂性，因为那会导致混乱。当思考过程清晰简单，它本身就很愉快，也更有效。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;脑图&quot;&gt;&lt;a href=&quot;#脑图&quot; class=&quot;headerlink&quot; title=&quot;脑图&quot;&gt;&lt;/a&gt;脑图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;img_2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者&quot;&gt;&lt;a href=&quot;#作者&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="读书" scheme="http://iwantjingjing.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="思维模型" scheme="http://iwantjingjing.com/tags/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜</title>
    <link href="http://iwantjingjing.com/2022/02/22/%E8%A7%A3%E8%AF%BB%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%842021%EF%BC%9A%E8%B6%85%E5%A4%A7%E8%A7%84%E6%A8%A1%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%88%86%E5%8F%91%EF%BC%8C%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%8E%E6%9D%A5%E5%95%86%E4%B8%9A%E5%8C%96%E5%89%8D%E5%A4%9C/"/>
    <id>http://iwantjingjing.com/2022/02/22/%E8%A7%A3%E8%AF%BB%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%842021%EF%BC%9A%E8%B6%85%E5%A4%A7%E8%A7%84%E6%A8%A1%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E7%88%86%E5%8F%91%EF%BC%8C%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%BF%8E%E6%9D%A5%E5%95%86%E4%B8%9A%E5%8C%96%E5%89%8D%E5%A4%9C/</id>
    <published>2022-02-22T08:17:50.000Z</published>
    <updated>2022-02-25T01:25:38.962Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘抄自infoQ《2021年技术盘点与展望》</p><p><a href="https://www.infoq.cn/minibook/Rmc3QT7vIXdr0ovFhZZ8" target="_blank" rel="noopener">原文链接</a></p><h2 id="解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜"><a href="#解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜" class="headerlink" title="解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜"></a>解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜</h2><p><strong>AI 技术</strong></p><ul><li><p>人工智能大模型</p></li><li><p>深度学习框架</p></li><li><p>NLP</p></li><li><p>智能语音</p><table><thead><tr><th>col1</th><th>col2</th><th>col3</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>自动驾驶</p></li><li><p>知识图谱</p></li></ul><h3 id="2021-年度-AI-技术突破"><a href="#2021-年度-AI-技术突破" class="headerlink" title="2021 年度 AI 技术突破"></a>2021 年度 AI 技术突破</h3><h4 id="人工智能预测蛋白质结构"><a href="#人工智能预测蛋白质结构" class="headerlink" title="人工智能预测蛋白质结构"></a>人工智能预测蛋白质结构</h4><h5 id="AphaFold2“解锁”98-人类蛋白质组"><a href="#AphaFold2“解锁”98-人类蛋白质组" class="headerlink" title="AphaFold2“解锁”98%人类蛋白质组"></a>AphaFold2“解锁”98%人类蛋白质组</h5><h5 id="RoseTTAFold-可十分钟内计算出蛋白质结构"><a href="#RoseTTAFold-可十分钟内计算出蛋白质结构" class="headerlink" title="RoseTTAFold 可十分钟内计算出蛋白质结构"></a>RoseTTAFold 可十分钟内计算出蛋白质结构</h5><h5 id="其他研究进展"><a href="#其他研究进展" class="headerlink" title="其他研究进展"></a>其他研究进展</h5><h3 id="AI-技术-2021-年发展总结与展望"><a href="#AI-技术-2021-年发展总结与展望" class="headerlink" title="AI 技术 2021 年发展总结与展望"></a>AI 技术 2021 年发展总结与展望</h3><p>去年，GPT-3 横空出世，这个具有 1750 亿参数规模的预训练模型所表现出来的零样本与小样本学习能力刷新了人们的认知，也引爆了 2021 年 AI 大模型研究的热潮。</p><h4 id="人工智能迈向“炼大模型”阶段"><a href="#人工智能迈向“炼大模型”阶段" class="headerlink" title="人工智能迈向“炼大模型”阶段"></a>人工智能迈向“炼大模型”阶段</h4><p>2021 年 1 月，Google 推出的 Switch Transformer 模型以高达 1.6 万亿的参数量打 破了 GPT-3 作为最大 AI 模型的统治地位，成为史上首个万亿级语言模型。</p><p>国内研究机构也不甘示弱。今年 6 月，北京智源人工智能研究院发布了超大规模智能 模型“悟道 2.0”，达到 1.75 万亿参数，超过 Switch Transformer 成为全球最大的预训 练模型。</p><h5 id="超大规模预训练模型的“军备竞赛”"><a href="#超大规模预训练模型的“军备竞赛”" class="headerlink" title="超大规模预训练模型的“军备竞赛”"></a>超大规模预训练模型的“军备竞赛”</h5><h5 id="预训练模型技术新进展"><a href="#预训练模型技术新进展" class="headerlink" title="预训练模型技术新进展"></a>预训练模型技术新进展</h5><h5 id="降低-AI-规模化落地的门槛"><a href="#降低-AI-规模化落地的门槛" class="headerlink" title="降低 AI 规模化落地的门槛"></a>降低 AI 规模化落地的门槛</h5><h5 id="小结和展望"><a href="#小结和展望" class="headerlink" title="小结和展望"></a>小结和展望</h5><h4 id="国产深度学习框架不再是“技术的跟随者”"><a href="#国产深度学习框架不再是“技术的跟随者”" class="headerlink" title="国产深度学习框架不再是“技术的跟随者”"></a>国产深度学习框架不再是“技术的跟随者”</h4><h5 id="新进展，新趋势"><a href="#新进展，新趋势" class="headerlink" title="新进展，新趋势"></a>新进展，新趋势</h5><h5 id="技术自立之路"><a href="#技术自立之路" class="headerlink" title="技术自立之路"></a>技术自立之路</h5><h5 id="研发难点"><a href="#研发难点" class="headerlink" title="研发难点"></a>研发难点</h5><h5 id="将更好地支持大模型训练"><a href="#将更好地支持大模型训练" class="headerlink" title="将更好地支持大模型训练"></a>将更好地支持大模型训练</h5><h4 id="智能语音这一年：技术突破不断，工业落地加速"><a href="#智能语音这一年：技术突破不断，工业落地加速" class="headerlink" title="智能语音这一年：技术突破不断，工业落地加速"></a>智能语音这一年：技术突破不断，工业落地加速</h4><h5 id="语⾳领域的⼤规模预训练模型层出不穷"><a href="#语⾳领域的⼤规模预训练模型层出不穷" class="headerlink" title="语⾳领域的⼤规模预训练模型层出不穷"></a>语⾳领域的⼤规模预训练模型层出不穷</h5><h5 id="工业界落地加速"><a href="#工业界落地加速" class="headerlink" title="工业界落地加速"></a>工业界落地加速</h5><h5 id="商业化难点主要在于商业模式选择"><a href="#商业化难点主要在于商业模式选择" class="headerlink" title="商业化难点主要在于商业模式选择"></a>商业化难点主要在于商业模式选择</h5><h5 id="端到端和预训练等技术仍然值得关注"><a href="#端到端和预训练等技术仍然值得关注" class="headerlink" title="端到端和预训练等技术仍然值得关注"></a>端到端和预训练等技术仍然值得关注</h5><h4 id="群雄逐鹿，谁能赢得自动驾驶之战？"><a href="#群雄逐鹿，谁能赢得自动驾驶之战？" class="headerlink" title="群雄逐鹿，谁能赢得自动驾驶之战？"></a>群雄逐鹿，谁能赢得自动驾驶之战？</h4><h5 id="造车热"><a href="#造车热" class="headerlink" title="造车热"></a>造车热</h5><h5 id="商业化前夜"><a href="#商业化前夜" class="headerlink" title="商业化前夜"></a>商业化前夜</h5><h5 id="2022，这些技术将是下半场竞争胜负的关键"><a href="#2022，这些技术将是下半场竞争胜负的关键" class="headerlink" title="2022，这些技术将是下半场竞争胜负的关键"></a>2022，这些技术将是下半场竞争胜负的关键</h5><h4 id="NLP，黄金时代持续？"><a href="#NLP，黄金时代持续？" class="headerlink" title="NLP，黄金时代持续？"></a>NLP，黄金时代持续？</h4><h5 id="基于提示的微调技术迅速流行"><a href="#基于提示的微调技术迅速流行" class="headerlink" title="基于提示的微调技术迅速流行"></a>基于提示的微调技术迅速流行</h5><h5 id="与-CV、语音识别相比，NLP-项目在业务中落地往往较慢"><a href="#与-CV、语音识别相比，NLP-项目在业务中落地往往较慢" class="headerlink" title="与 CV、语音识别相比，NLP 项目在业务中落地往往较慢"></a>与 CV、语音识别相比，NLP 项目在业务中落地往往较慢</h5><h5 id="明年，NLP-将在哪些场景实现规模化落地？"><a href="#明年，NLP-将在哪些场景实现规模化落地？" class="headerlink" title="明年，NLP 将在哪些场景实现规模化落地？"></a>明年，NLP 将在哪些场景实现规模化落地？</h5><h5 id="2022-年，NLP-值得关注的技术点"><a href="#2022-年，NLP-值得关注的技术点" class="headerlink" title="2022 年，NLP 值得关注的技术点"></a>2022 年，NLP 值得关注的技术点</h5><h4 id="元宇宙概念大火，计算机视觉是基石技术之一"><a href="#元宇宙概念大火，计算机视觉是基石技术之一" class="headerlink" title="元宇宙概念大火，计算机视觉是基石技术之一"></a>元宇宙概念大火，计算机视觉是基石技术之一</h4><h5 id="具身智能，从被动式-AI-转向主动式人工智能"><a href="#具身智能，从被动式-AI-转向主动式人工智能" class="headerlink" title="具身智能，从被动式 AI 转向主动式人工智能"></a>具身智能，从被动式 AI 转向主动式人工智能</h5><h5 id="进入元宇宙，需要智能感知和交互这张门票"><a href="#进入元宇宙，需要智能感知和交互这张门票" class="headerlink" title="进入元宇宙，需要智能感知和交互这张门票"></a>进入元宇宙，需要智能感知和交互这张门票</h5><h5 id="趋势一：面向内容生成的-AIGC"><a href="#趋势一：面向内容生成的-AIGC" class="headerlink" title="趋势一：面向内容生成的 AIGC"></a>趋势一：面向内容生成的 AIGC</h5><h5 id="趋势二：SCV-合成"><a href="#趋势二：SCV-合成" class="headerlink" title="趋势二：SCV 合成"></a>趋势二：SCV 合成</h5><h4 id="制约知识图谱商业化落地的主要问题在于标准化"><a href="#制约知识图谱商业化落地的主要问题在于标准化" class="headerlink" title="制约知识图谱商业化落地的主要问题在于标准化"></a>制约知识图谱商业化落地的主要问题在于标准化</h4><h5 id="重要技术进展"><a href="#重要技术进展" class="headerlink" title="重要技术进展"></a>重要技术进展</h5><h5 id="应用落地进展"><a href="#应用落地进展" class="headerlink" title="应用落地进展"></a>应用落地进展</h5><h3 id="2022-年，值得关注的重要技术趋势"><a href="#2022-年，值得关注的重要技术趋势" class="headerlink" title="2022 年，值得关注的重要技术趋势"></a>2022 年，值得关注的重要技术趋势</h3><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文摘抄自infoQ《2021年技术盘点与展望》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/minibook/Rmc3QT7vIXdr0ovFhZZ8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/categories/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/tags/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
      <category term="人工智能" scheme="http://iwantjingjing.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云</title>
    <link href="http://iwantjingjing.com/2022/02/22/%E8%A7%A3%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E7%9A%842021%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE10%E4%BD%93%E7%B3%BB%E5%9F%BA%E6%9C%AC%E5%BB%BA%E6%88%90%EF%BC%8C%E4%BD%86%E5%A4%B4%E4%B8%8A%E4%BB%8D%E6%9C%89%E5%87%A0%E6%9C%B5%E4%B9%8C%E4%BA%91/"/>
    <id>http://iwantjingjing.com/2022/02/22/%E8%A7%A3%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E7%9A%842021%EF%BC%9A%E5%A4%A7%E6%95%B0%E6%8D%AE10%E4%BD%93%E7%B3%BB%E5%9F%BA%E6%9C%AC%E5%BB%BA%E6%88%90%EF%BC%8C%E4%BD%86%E5%A4%B4%E4%B8%8A%E4%BB%8D%E6%9C%89%E5%87%A0%E6%9C%B5%E4%B9%8C%E4%BA%91/</id>
    <published>2022-02-22T07:51:28.000Z</published>
    <updated>2022-02-22T08:21:07.370Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘抄自infoQ《2021年技术盘点与展望》</p><p><a href="https://www.infoq.cn/minibook/Rmc3QT7vIXdr0ovFhZZ8" target="_blank" rel="noopener">原文链接</a></p><h2 id="解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云"><a href="#解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云" class="headerlink" title="解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云"></a>解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云</h2><h3 id="2021年，大数据领域发展到哪一阶段？"><a href="#2021年，大数据领域发展到哪一阶段？" class="headerlink" title="2021年，大数据领域发展到哪一阶段？"></a>2021年，大数据领域发展到哪一阶段？</h3><p>Gartner Hype Cycle 把整个发展周期分成 5 个部分</p><ul><li>创新期  </li><li>狂热期</li><li>冷静期</li><li>复兴期</li><li>普惠期 </li></ul><h4 id="大数据技术体系-1-0-基本建成"><a href="#大数据技术体系-1-0-基本建成" class="headerlink" title="大数据技术体系 1.0 基本建成"></a>大数据技术体系 1.0 基本建成</h4><p>新技术</p><ul><li>湖仓一体</li><li>边缘计算</li><li>区块链账本<h4 id="数据平台赛道价值显性化，带来大量投资和创业机会"><a href="#数据平台赛道价值显性化，带来大量投资和创业机会" class="headerlink" title="数据平台赛道价值显性化，带来大量投资和创业机会"></a>数据平台赛道价值显性化，带来大量投资和创业机会</h4></li><li> 2021 年 6 月 25 日，Apache Kafka 商业化公司 Confluent 正式登陆纳斯达克，首日开涨 25%，市值超过 110 亿美元。</li><li> 2021 年 8 月 29 日，Apache Iceberg 的创建者 Ryan Blue、Dan Weeks 和 Netflix数据架构总监 Jason Reid 宣布从风投 a16z 处拿到了 A 轮融资，正式成立围绕</li><li>Apache Iceberg 构建新型数据平台的商业公司 Tabular。  2021 年 8 月 31 日，大数据初创公司 Databricks 宣布获得 16 亿美元 H 轮融资，</li><li>最新估值飙升至 380 亿美元，距离上一轮 10 亿美元的 G 轮融资仅仅过去 7 个月时间。</li><li> 2021 年 9 月 20 日，ClickHouse 的创建者 Alexey 正式从 Yandex 独立出来并成成立了一个公司ClickHouse, Inc。同时 ClickHouse 公司获得由 Index Ventures 和 Benchmark 领投的 5000 万美元 A 轮融资，Yandex 也参与其中。</li><li> 2021 年 10 月 12 日，基于开源的 Apache Pulsar 的商业化公司 StreamNative 宣布获得 2300 万美元 A 轮融资。</li><li>2021 年，Clickhouse、Tebula（Apache Iceberg 背后的商业公司）、Firebolt 以及国内诸多新兴创业公司为这一领域带来了很好的讨论度。</li></ul><h4 id="客户开始明确分层，带来平台架构的不同取舍"><a href="#客户开始明确分层，带来平台架构的不同取舍" class="headerlink" title="客户开始明确分层，带来平台架构的不同取舍"></a>客户开始明确分层，带来平台架构的不同取舍</h4><p><strong>客户分层</strong></p><ol><li><p>头部互联网技术公司，以 Top30-50 一线互联网公司为代表。技术栈上，以自建平台为主，且大部分公司采用以开源为基础的自建方式（其中少数 Top10 头部厂商会投资 0 到 1 自研）。</p></li><li><p>中腰部技术公司，其中又可以细分为两类：  </p><ul><li><p>中腰部互联网公司，这类型公司大多数诞生于云时代（近 8 年），通常处于成 长期并聚焦自身业务发展，对基础设施投资有限，同时追求更低的 TCO（包含 硬件和人力的总成本），倾向直接采用公共云平台架构并购买 PaaS 服务。（注：这类型客户是 SnowFlake 的典型客户）。 </p></li><li><p>有技术能力的非互联网公司，以银行/通信等领域企业为主。因监管或者资管要 求，通常采用专有云或者混合云模式，企业具备数据开发人员，能够在数据平 台上完成数据应用/解决方案的开发。这类型客户通常负责关键业务，对平台的 企业级能力（包括稳定性、安全性、免运维能力）要求很高。</p></li></ul></li><li><p>纯甲方应用型客户，以线下大型非技术型企业为主。这类型客户通常没有数据开发 和应用建设的经验和团队，对数据类应用的需求多通过与合作伙伴（ISV）合作或 者外包方式完成。对技术栈和技术选型通常不敏感，但对稳定性要求很高。</p></li></ol><h3 id="当下技术架构的五个热点"><a href="#当下技术架构的五个热点" class="headerlink" title="当下技术架构的五个热点"></a>当下技术架构的五个热点</h3><h4 id="引擎架构的进化，向进一步解耦和池化发展"><a href="#引擎架构的进化，向进一步解耦和池化发展" class="headerlink" title="引擎架构的进化，向进一步解耦和池化发展"></a>引擎架构的进化，向进一步解耦和池化发展</h4><h4 id="面向云原生、云中立的系统架构设计"><a href="#面向云原生、云中立的系统架构设计" class="headerlink" title="面向云原生、云中立的系统架构设计"></a>面向云原生、云中立的系统架构设计</h4><h4 id="数据湖与数据仓库技术相互融合：湖仓一体"><a href="#数据湖与数据仓库技术相互融合：湖仓一体" class="headerlink" title="数据湖与数据仓库技术相互融合：湖仓一体"></a>数据湖与数据仓库技术相互融合：湖仓一体</h4><table><thead><tr><th>对比维度</th><th>数据湖</th><th>数据仓库</th></tr></thead><tbody><tr><td>方法论</td><td>事后建模</td><td>事前建模</td></tr><tr><td>存储类型</td><td>结构化、半结构化、非结构化</td><td>结构化、半结构化</td></tr><tr><td>计算引擎</td><td>向所有引擎开放 各引擎有限优化</td><td>向特定引擎开放</td></tr><tr><td>成本</td><td>难运维管理</td><td>难启动</td></tr><tr><td>数据治理</td><td>质量低 难管理使用</td><td>质量高 易管理使用</td></tr></tbody></table><p>发展趋势：湖仓一体</p><p>实际上湖仓一体有两个流派：数据仓库到数据湖，数据湖到数据仓库</p><p>第一个流派是以数仓这种方式诞生的，它是一个左右派，左边是一个数据仓库，右边是一个数据湖，中间以高速网络相连形成一个反对式的联动；</p><p>第二个流派是从数据湖向数仓演进，整体架构是在数据湖上搭建数据仓库。</p><p>这两个流派的代表分别是 AWS Redshift/阿里云 MaxCompute，以及 Databricks，目前这两个流派都还在发展中。</p><h4 id="AI-成为数据平台的一等公民"><a href="#AI-成为数据平台的一等公民" class="headerlink" title="AI 成为数据平台的一等公民"></a>AI 成为数据平台的一等公民</h4><p>数据分析和 BI 更侧重于历史数据的总结</p><p>而算法/AI 具备越来越好的面向未来做预测,给大家带来更多决策支撑</p><h4 id="“1-N-1”的系统架构"><a href="#“1-N-1”的系统架构" class="headerlink" title="“1+N+1”的系统架构"></a>“1+N+1”的系统架构</h4><p>第一个 1，代表存储和资源的统一。</p><p>中间的 N 指代的是多种运算引擎和模式，例如批处理、流处理、机器学习、图计算等等，不同的计算引擎共享底层的数据和资源池。</p><p>最后一个 1，是指统一的接入层和数据开发应用层，这个层次是可选的。有些企业选择统一入口管理的架构，做更好的权限管理等。有些企业和厂商选择不再收敛了，引擎可以被各种团队或者各种用户独立使用。</p><h3 id="面向未来的四个发展趋势"><a href="#面向未来的四个发展趋势" class="headerlink" title="面向未来的四个发展趋势"></a>面向未来的四个发展趋势</h3><h4 id="实现从离线到实时的全频谱"><a href="#实现从离线到实时的全频谱" class="headerlink" title="实现从离线到实时的全频谱"></a>实现从离线到实时的全频谱</h4><p>Apache Delta、Hudi为代表的近实时化技术</p><p>Data Freshness、Resource Costs 和 Query Performance</p><h4 id="IoT-类数据处理成为新热点"><a href="#IoT-类数据处理成为新热点" class="headerlink" title="IoT 类数据处理成为新热点"></a>IoT 类数据处理成为新热点</h4><p>云边端协同的计算模式会成为热点，统称 IoT。</p><h4 id="数据安全、共享与隐私保护的矛盾需要新解法"><a href="#数据安全、共享与隐私保护的矛盾需要新解法" class="headerlink" title="数据安全、共享与隐私保护的矛盾需要新解法"></a>数据安全、共享与隐私保护的矛盾需要新解法</h4><p>数据安全不仅仅是一个权限问题，还涉及很复杂的系统架构包括:</p><ul><li>权限管理</li><li>用户隔离</li><li>存储加密</li><li>异地备份</li><li>敏感数据、风险行为的识别</li></ul><h4 id="AI-for-System（DW-Automation）"><a href="#AI-for-System（DW-Automation）" class="headerlink" title="AI for System（DW Automation）"></a>AI for System（DW Automation）</h4><ul><li>PB级别</li><li>EB级别</li><li>每天百万级别</li></ul><p>DBA 以人为轴的数据管理和优化方式不再胜任</p><p>机器学习、深度学习的自动化技术</p><p>通过机器学习自动进行数据分层：</p><ul><li>依据访问的统计判断什么样的数据更重要</li><li>什么样的数据其实不重要</li><li>哪些作业可以放在冷存储上</li><li>哪些是关键作业需要放在更高优先级的存储上。</li></ul><p><font color=red>当作业量达到百万量级时，这些决策应该由机器来自动完成，而不应该由人来完成。</font></p><h3 id="三个未解的挑战"><a href="#三个未解的挑战" class="headerlink" title="三个未解的挑战"></a>三个未解的挑战</h3><h4 id="疑问1：引擎多样化，最终是否能诞生一套OneSizeForAll引擎满足多样的计算需求，并兼顾通用性和效率？"><a href="#疑问1：引擎多样化，最终是否能诞生一套OneSizeForAll引擎满足多样的计算需求，并兼顾通用性和效率？" class="headerlink" title="疑问1：引擎多样化，最终是否能诞生一套OneSizeForAll引擎满足多样的计算需求，并兼顾通用性和效率？"></a>疑问1：引擎多样化，最终是否能诞生一套OneSizeForAll引擎满足多样的计算需求，并兼顾通用性和效率？</h4><p>自建系统：</p><ul><li>Spark 做批处理</li><li>Flink 做流处理</li><li>Clickhouse 做交互分析</li><li>HBase 做 KV 查询</li><li>ElasticSearch 做文本检索。</li></ul><h4 id="疑问-2：基于开源自建与直接选购企业级产品，谁更能获得用户的认可？"><a href="#疑问-2：基于开源自建与直接选购企业级产品，谁更能获得用户的认可？" class="headerlink" title="疑问 2：基于开源自建与直接选购企业级产品，谁更能获得用户的认可？"></a>疑问 2：基于开源自建与直接选购企业级产品，谁更能获得用户的认可？</h4><p>这个答案可能需要结合客户分层来看</p><p><strong>一个简单的经验公式是：</strong></p><p><font color=red>对于百台规模的平台，基于开源软件自建的总 TCO=物理硬件成本+开发和维护人力成本=物理硬件成本*2</font></p><h4 id="疑问-3：关系模型之外，是否会发展出其他主流计算范式？"><a href="#疑问-3：关系模型之外，是否会发展出其他主流计算范式？" class="headerlink" title="疑问 3：关系模型之外，是否会发展出其他主流计算范式？"></a>疑问 3：关系模型之外，是否会发展出其他主流计算范式？</h4><p>主流的计算范式就是二维关系表达</p><p>图计算是目前最被看好的方向，它是点边模型。</p><p>图学习 GraphEmbedding 技术</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文摘抄自infoQ《2021年技术盘点与展望》&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/minibook/Rmc3QT7vIXdr0ovFhZZ8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/categories/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/tags/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
      <category term="大数据" scheme="http://iwantjingjing.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>2021年技术盘点与展望</title>
    <link href="http://iwantjingjing.com/2022/02/22/2021%E5%B9%B4%E6%8A%80%E6%9C%AF%E7%9B%98%E7%82%B9%E4%B8%8E%E5%B1%95%E6%9C%9B/"/>
    <id>http://iwantjingjing.com/2022/02/22/2021%E5%B9%B4%E6%8A%80%E6%9C%AF%E7%9B%98%E7%82%B9%E4%B8%8E%E5%B1%95%E6%9C%9B/</id>
    <published>2022-02-22T07:20:02.000Z</published>
    <updated>2022-02-22T08:17:40.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021年技术盘点与展望"><a href="#2021年技术盘点与展望" class="headerlink" title="2021年技术盘点与展望"></a>2021年技术盘点与展望</h1><p>本文摘抄自infoQ《2021年技术盘点与展望》</p><p><a href="https://www.infoq.cn/minibook/Rmc3QT7vIXdr0ovFhZZ8" target="_blank" rel="noopener">原文链接</a></p><p><strong>2021 年度技术盘点</strong></p><h2 id="解读编程语言的-2021：Go-与-Rust-走向「成熟」，Kotlin、wasm、Julia「无限生长」1"><a href="#解读编程语言的-2021：Go-与-Rust-走向「成熟」，Kotlin、wasm、Julia「无限生长」1" class="headerlink" title="解读编程语言的 2021：Go 与 Rust 走向「成熟」，Kotlin、wasm、Julia「无限生长」1"></a>解读编程语言的 2021：Go 与 Rust 走向「成熟」，Kotlin、wasm、Julia「无限生长」1</h2><h2 id="解读云原生的2021：抢占技术C位，迎来落地大爆发"><a href="#解读云原生的2021：抢占技术C位，迎来落地大爆发" class="headerlink" title="解读云原生的2021：抢占技术C位，迎来落地大爆发"></a>解读云原生的2021：抢占技术C位，迎来落地大爆发</h2><h2 id="解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云"><a href="#解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云" class="headerlink" title="解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云"></a>解读数据架构的2021：大数据10体系基本建成，但头上仍有几朵乌云</h2><h2 id="解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜"><a href="#解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜" class="headerlink" title="解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜"></a>解读人工智能的2021：超大规模预训练模型爆发，自动驾驶迎来商业化前夜</h2><h3 id="2021-年度-AI-技术突破"><a href="#2021-年度-AI-技术突破" class="headerlink" title="2021 年度 AI 技术突破"></a>2021 年度 AI 技术突破</h3><h4 id="人工智能预测蛋白质结构"><a href="#人工智能预测蛋白质结构" class="headerlink" title="人工智能预测蛋白质结构"></a>人工智能预测蛋白质结构</h4><h5 id="AphaFold2“解锁”98-人类蛋白质组"><a href="#AphaFold2“解锁”98-人类蛋白质组" class="headerlink" title="AphaFold2“解锁”98%人类蛋白质组"></a>AphaFold2“解锁”98%人类蛋白质组</h5><h5 id="RoseTTAFold-可十分钟内计算出蛋白质结构"><a href="#RoseTTAFold-可十分钟内计算出蛋白质结构" class="headerlink" title="RoseTTAFold 可十分钟内计算出蛋白质结构"></a>RoseTTAFold 可十分钟内计算出蛋白质结构</h5><h5 id="其他研究进展"><a href="#其他研究进展" class="headerlink" title="其他研究进展"></a>其他研究进展</h5><h3 id="AI-技术-2021-年发展总结与展望"><a href="#AI-技术-2021-年发展总结与展望" class="headerlink" title="AI 技术 2021 年发展总结与展望"></a>AI 技术 2021 年发展总结与展望</h3><h4 id="人工智能迈向“炼大模型”阶段"><a href="#人工智能迈向“炼大模型”阶段" class="headerlink" title="人工智能迈向“炼大模型”阶段"></a>人工智能迈向“炼大模型”阶段</h4><h5 id="超大规模预训练模型的“军备竞赛”"><a href="#超大规模预训练模型的“军备竞赛”" class="headerlink" title="超大规模预训练模型的“军备竞赛”"></a>超大规模预训练模型的“军备竞赛”</h5><h5 id="预训练模型技术新进展"><a href="#预训练模型技术新进展" class="headerlink" title="预训练模型技术新进展"></a>预训练模型技术新进展</h5><h5 id="降低-AI-规模化落地的门槛"><a href="#降低-AI-规模化落地的门槛" class="headerlink" title="降低 AI 规模化落地的门槛"></a>降低 AI 规模化落地的门槛</h5><h5 id="小结和展望"><a href="#小结和展望" class="headerlink" title="小结和展望"></a>小结和展望</h5><h4 id="国产深度学习框架不再是“技术的跟随者”"><a href="#国产深度学习框架不再是“技术的跟随者”" class="headerlink" title="国产深度学习框架不再是“技术的跟随者”"></a>国产深度学习框架不再是“技术的跟随者”</h4><h5 id="新进展，新趋势"><a href="#新进展，新趋势" class="headerlink" title="新进展，新趋势"></a>新进展，新趋势</h5><h5 id="技术自立之路"><a href="#技术自立之路" class="headerlink" title="技术自立之路"></a>技术自立之路</h5><h5 id="研发难点"><a href="#研发难点" class="headerlink" title="研发难点"></a>研发难点</h5><h5 id="将更好地支持大模型训练"><a href="#将更好地支持大模型训练" class="headerlink" title="将更好地支持大模型训练"></a>将更好地支持大模型训练</h5><h4 id="智能语音这一年：技术突破不断，工业落地加速"><a href="#智能语音这一年：技术突破不断，工业落地加速" class="headerlink" title="智能语音这一年：技术突破不断，工业落地加速"></a>智能语音这一年：技术突破不断，工业落地加速</h4><h5 id="语⾳领域的⼤规模预训练模型层出不穷"><a href="#语⾳领域的⼤规模预训练模型层出不穷" class="headerlink" title="语⾳领域的⼤规模预训练模型层出不穷"></a>语⾳领域的⼤规模预训练模型层出不穷</h5><h5 id="工业界落地加速"><a href="#工业界落地加速" class="headerlink" title="工业界落地加速"></a>工业界落地加速</h5><h5 id="商业化难点主要在于商业模式选择"><a href="#商业化难点主要在于商业模式选择" class="headerlink" title="商业化难点主要在于商业模式选择"></a>商业化难点主要在于商业模式选择</h5><h5 id="端到端和预训练等技术仍然值得关注"><a href="#端到端和预训练等技术仍然值得关注" class="headerlink" title="端到端和预训练等技术仍然值得关注"></a>端到端和预训练等技术仍然值得关注</h5><h4 id="群雄逐鹿，谁能赢得自动驾驶之战？"><a href="#群雄逐鹿，谁能赢得自动驾驶之战？" class="headerlink" title="群雄逐鹿，谁能赢得自动驾驶之战？"></a>群雄逐鹿，谁能赢得自动驾驶之战？</h4><h5 id="造车热"><a href="#造车热" class="headerlink" title="造车热"></a>造车热</h5><h5 id="商业化前夜"><a href="#商业化前夜" class="headerlink" title="商业化前夜"></a>商业化前夜</h5><h5 id="2022，这些技术将是下半场竞争胜负的关键"><a href="#2022，这些技术将是下半场竞争胜负的关键" class="headerlink" title="2022，这些技术将是下半场竞争胜负的关键"></a>2022，这些技术将是下半场竞争胜负的关键</h5><h4 id="NLP，黄金时代持续？"><a href="#NLP，黄金时代持续？" class="headerlink" title="NLP，黄金时代持续？"></a>NLP，黄金时代持续？</h4><h5 id="基于提示的微调技术迅速流行"><a href="#基于提示的微调技术迅速流行" class="headerlink" title="基于提示的微调技术迅速流行"></a>基于提示的微调技术迅速流行</h5><h5 id="与-CV、语音识别相比，NLP-项目在业务中落地往往较慢"><a href="#与-CV、语音识别相比，NLP-项目在业务中落地往往较慢" class="headerlink" title="与 CV、语音识别相比，NLP 项目在业务中落地往往较慢"></a>与 CV、语音识别相比，NLP 项目在业务中落地往往较慢</h5><h5 id="明年，NLP-将在哪些场景实现规模化落地？"><a href="#明年，NLP-将在哪些场景实现规模化落地？" class="headerlink" title="明年，NLP 将在哪些场景实现规模化落地？"></a>明年，NLP 将在哪些场景实现规模化落地？</h5><h5 id="2022-年，NLP-值得关注的技术点"><a href="#2022-年，NLP-值得关注的技术点" class="headerlink" title="2022 年，NLP 值得关注的技术点"></a>2022 年，NLP 值得关注的技术点</h5><h4 id="元宇宙概念大火，计算机视觉是基石技术之一"><a href="#元宇宙概念大火，计算机视觉是基石技术之一" class="headerlink" title="元宇宙概念大火，计算机视觉是基石技术之一"></a>元宇宙概念大火，计算机视觉是基石技术之一</h4><h5 id="具身智能，从被动式-AI-转向主动式人工智能"><a href="#具身智能，从被动式-AI-转向主动式人工智能" class="headerlink" title="具身智能，从被动式 AI 转向主动式人工智能"></a>具身智能，从被动式 AI 转向主动式人工智能</h5><h5 id="进入元宇宙，需要智能感知和交互这张门票"><a href="#进入元宇宙，需要智能感知和交互这张门票" class="headerlink" title="进入元宇宙，需要智能感知和交互这张门票"></a>进入元宇宙，需要智能感知和交互这张门票</h5><h5 id="趋势一：面向内容生成的-AIGC"><a href="#趋势一：面向内容生成的-AIGC" class="headerlink" title="趋势一：面向内容生成的 AIGC"></a>趋势一：面向内容生成的 AIGC</h5><h5 id="趋势二：SCV-合成"><a href="#趋势二：SCV-合成" class="headerlink" title="趋势二：SCV 合成"></a>趋势二：SCV 合成</h5><h4 id="制约知识图谱商业化落地的主要问题在于标准化"><a href="#制约知识图谱商业化落地的主要问题在于标准化" class="headerlink" title="制约知识图谱商业化落地的主要问题在于标准化"></a>制约知识图谱商业化落地的主要问题在于标准化</h4><h5 id="重要技术进展"><a href="#重要技术进展" class="headerlink" title="重要技术进展"></a>重要技术进展</h5><h5 id="应用落地进展"><a href="#应用落地进展" class="headerlink" title="应用落地进展"></a>应用落地进展</h5><h3 id="2022-年，值得关注的重要技术趋势"><a href="#2022-年，值得关注的重要技术趋势" class="headerlink" title="2022 年，值得关注的重要技术趋势"></a>2022 年，值得关注的重要技术趋势</h3><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><h2 id="解读大前端的2021：究竟“卷”出了什么名堂？"><a href="#解读大前端的2021：究竟“卷”出了什么名堂？" class="headerlink" title="解读大前端的2021：究竟“卷”出了什么名堂？"></a>解读大前端的2021：究竟“卷”出了什么名堂？</h2><h2 id="解读操作系统的2021：触到了创新的天花板，却站在巨变的前夜"><a href="#解读操作系统的2021：触到了创新的天花板，却站在巨变的前夜" class="headerlink" title="解读操作系统的2021：触到了创新的天花板，却站在巨变的前夜"></a>解读操作系统的2021：触到了创新的天花板，却站在巨变的前夜</h2><h2 id="解读服务网格的2021：告别架构“大跃进”，技术生态百家争鸣"><a href="#解读服务网格的2021：告别架构“大跃进”，技术生态百家争鸣" class="headerlink" title="解读服务网格的2021：告别架构“大跃进”，技术生态百家争鸣"></a>解读服务网格的2021：告别架构“大跃进”，技术生态百家争鸣</h2><h2 id="解读Julia的2021：逐步迈向主流编程语言"><a href="#解读Julia的2021：逐步迈向主流编程语言" class="headerlink" title="解读Julia的2021：逐步迈向主流编程语言"></a>解读Julia的2021：逐步迈向主流编程语言</h2><h2 id="解读中间件的2021：被云原生重塑之后，选型更难了"><a href="#解读中间件的2021：被云原生重塑之后，选型更难了" class="headerlink" title="解读中间件的2021：被云原生重塑之后，选型更难了"></a>解读中间件的2021：被云原生重塑之后，选型更难了</h2><h2 id="解读架构的2021：服务网格开道，云原生架构成型"><a href="#解读架构的2021：服务网格开道，云原生架构成型" class="headerlink" title="解读架构的2021：服务网格开道，云原生架构成型"></a>解读架构的2021：服务网格开道，云原生架构成型</h2><h2 id="2021年是开源鸿蒙的元年，也是打基础的一年"><a href="#2021年是开源鸿蒙的元年，也是打基础的一年" class="headerlink" title="2021年是开源鸿蒙的元年，也是打基础的一年"></a>2021年是开源鸿蒙的元年，也是打基础的一年</h2><h2 id="解读鸿蒙系统的2021：喧嚣褪去，生态初具规模"><a href="#解读鸿蒙系统的2021：喧嚣褪去，生态初具规模" class="headerlink" title="解读鸿蒙系统的2021：喧嚣褪去，生态初具规模"></a>解读鸿蒙系统的2021：喧嚣褪去，生态初具规模</h2><h2 id="解读开源的2021：从“开发者亚文化”，变成主流软件开发模式"><a href="#解读开源的2021：从“开发者亚文化”，变成主流软件开发模式" class="headerlink" title="解读开源的2021：从“开发者亚文化”，变成主流软件开发模式"></a>解读开源的2021：从“开发者亚文化”，变成主流软件开发模式</h2><h2 id="解读计算机视觉的2021：「进化」的力量推动技术变革，元宇宙时代的重要技术基础"><a href="#解读计算机视觉的2021：「进化」的力量推动技术变革，元宇宙时代的重要技术基础" class="headerlink" title="解读计算机视觉的2021：「进化」的力量推动技术变革，元宇宙时代的重要技术基础"></a>解读计算机视觉的2021：「进化」的力量推动技术变革，元宇宙时代的重要技术基础</h2><h2 id="解读预训练大模型的2021年：人们正在驯服这些“庞然大物”"><a href="#解读预训练大模型的2021年：人们正在驯服这些“庞然大物”" class="headerlink" title="解读预训练大模型的2021年：人们正在驯服这些“庞然大物”"></a>解读预训练大模型的2021年：人们正在驯服这些“庞然大物”</h2><h2 id="解读Go语言的2021：稳定为王"><a href="#解读Go语言的2021：稳定为王" class="headerlink" title="解读Go语言的2021：稳定为王"></a>解读Go语言的2021：稳定为王</h2><h2 id="解读数据库的2021：资本进来添了一把火，开源已占据半壁江山"><a href="#解读数据库的2021：资本进来添了一把火，开源已占据半壁江山" class="headerlink" title="解读数据库的2021：资本进来添了一把火，开源已占据半壁江山"></a>解读数据库的2021：资本进来添了一把火，开源已占据半壁江山</h2><h2 id="漫谈操作系统现状：波澜不惊的应用环境与风起云涌的技术狂潮"><a href="#漫谈操作系统现状：波澜不惊的应用环境与风起云涌的技术狂潮" class="headerlink" title="漫谈操作系统现状：波澜不惊的应用环境与风起云涌的技术狂潮"></a>漫谈操作系统现状：波澜不惊的应用环境与风起云涌的技术狂潮</h2><p><strong>2022年度技术展望</strong></p><h2 id="编程语言将走入怎样的2022"><a href="#编程语言将走入怎样的2022" class="headerlink" title="编程语言将走入怎样的2022"></a>编程语言将走入怎样的2022</h2><h2 id="展望2022年大数据趋势：上云短期不会是ClickHouse社区目标，现在仍是“黄金时代”"><a href="#展望2022年大数据趋势：上云短期不会是ClickHouse社区目标，现在仍是“黄金时代”" class="headerlink" title="展望2022年大数据趋势：上云短期不会是ClickHouse社区目标，现在仍是“黄金时代”"></a>展望2022年大数据趋势：上云短期不会是ClickHouse社区目标，现在仍是“黄金时代”</h2><h2 id="展望中间件的2022：微服务中间件还需进一步优化，消息队列迈向“标准-化”"><a href="#展望中间件的2022：微服务中间件还需进一步优化，消息队列迈向“标准-化”" class="headerlink" title="展望中间件的2022：微服务中间件还需进一步优化，消息队列迈向“标准 化”"></a>展望中间件的2022：微服务中间件还需进一步优化，消息队列迈向“标准 化”</h2><h2 id="2022年，云原生领域有哪些值得关注的趋势？"><a href="#2022年，云原生领域有哪些值得关注的趋势？" class="headerlink" title="2022年，云原生领域有哪些值得关注的趋势？"></a>2022年，云原生领域有哪些值得关注的趋势？</h2><h2 id="展望架构的2022：热度居高不下的云原生，如何撑起架构的未来"><a href="#展望架构的2022：热度居高不下的云原生，如何撑起架构的未来" class="headerlink" title="展望架构的2022：热度居高不下的云原生，如何撑起架构的未来"></a>展望架构的2022：热度居高不下的云原生，如何撑起架构的未来</h2><h2 id="展望大前端的2022：VR大潮来袭，大前端迎来新机遇"><a href="#展望大前端的2022：VR大潮来袭，大前端迎来新机遇" class="headerlink" title="展望大前端的2022：VR大潮来袭，大前端迎来新机遇"></a>展望大前端的2022：VR大潮来袭，大前端迎来新机遇</h2><h2 id="展望操作系统的2022：加速驶向快车道，云、XPU和开源成“催化剂”"><a href="#展望操作系统的2022：加速驶向快车道，云、XPU和开源成“催化剂”" class="headerlink" title="展望操作系统的2022：加速驶向快车道，云、XPU和开源成“催化剂”"></a>展望操作系统的2022：加速驶向快车道，云、XPU和开源成“催化剂”</h2><h2 id="对话小马智行：量产、商业化、路线之争，聊聊自动驾驶的现在和未来"><a href="#对话小马智行：量产、商业化、路线之争，聊聊自动驾驶的现在和未来" class="headerlink" title="对话小马智行：量产、商业化、路线之争，聊聊自动驾驶的现在和未来"></a>对话小马智行：量产、商业化、路线之争，聊聊自动驾驶的现在和未来</h2><h3 id="对话腾讯云数据库技术负责人：得益于开源的深入和云厂商的崛起，数据库又重新回到了聚光灯下"><a href="#对话腾讯云数据库技术负责人：得益于开源的深入和云厂商的崛起，数据库又重新回到了聚光灯下" class="headerlink" title="对话腾讯云数据库技术负责人：得益于开源的深入和云厂商的崛起，数据库又重新回到了聚光灯下"></a>对话腾讯云数据库技术负责人：得益于开源的深入和云厂商的崛起，数据库又重新回到了聚光灯下</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2021年技术盘点与展望&quot;&gt;&lt;a href=&quot;#2021年技术盘点与展望&quot; class=&quot;headerlink&quot; title=&quot;2021年技术盘点与展望&quot;&gt;&lt;/a&gt;2021年技术盘点与展望&lt;/h1&gt;&lt;p&gt;本文摘抄自infoQ《2021年技术盘点与展望》&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/categories/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
    
      <category term="技术视野" scheme="http://iwantjingjing.com/tags/%E6%8A%80%E6%9C%AF%E8%A7%86%E9%87%8E/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch7.15指南</title>
    <link href="http://iwantjingjing.com/2021/11/30/Elasticsearch7-15%E6%8C%87%E5%8D%97/"/>
    <id>http://iwantjingjing.com/2021/11/30/Elasticsearch7-15%E6%8C%87%E5%8D%97/</id>
    <published>2021-11-30T08:41:17.000Z</published>
    <updated>2021-12-03T08:28:30.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch7-15指南"><a href="#Elasticsearch7-15指南" class="headerlink" title="Elasticsearch7.15指南"></a>Elasticsearch7.15指南</h2><h3 id="什么是Elasticsearch"><a href="#什么是Elasticsearch" class="headerlink" title="什么是Elasticsearch?"></a>什么是Elasticsearch?</h3><p>你知道，为了搜索（和分析）</p><p>Elasticsearch 是位于 Elastic Stack 核心的分布式搜索和分析引擎。Logstash 和 Beats 有助于收集、聚合和丰富您的数据并将其存储在 Elasticsearch 中。Kibana<br>使您能够以交互方式探索、可视化和共享对数据的洞察，并管理和监控堆栈。Elasticsearch 是索引、搜索和分析魔法发生的地方。</p><p>Elasticsearch 为所有类型的数据提供近乎实时的搜索和分析。无论您拥有结构化或非结构化文本、数值数据还是地理空间数据，Elasticsearch<br>都可以以支持快速搜索的方式高效地存储和索引它。您可以超越简单的数据检索和聚合信息来发现数据中的趋势和模式。随着您的数据和查询量的增长，Elasticsearch 的分布式特性使您的部署能够随之无缝增长。</p><p>虽然并非所有问题都是搜索问题，但 Elasticsearch 提供了在各种用例中处理数据的速度和灵活性：</p><ul><li>向应用程序或网站添加搜索框</li><li>存储和分析日志、指标和安全事件数据</li><li>使用机器学习自动实时建模数据的行为</li><li>使用 Elasticsearch 作为存储引擎自动化业务工作流</li><li>使用 Elasticsearch 作为地理信息系统 (GIS) 管理、集成和分析空间信息</li><li>使用 Elasticsearch 作为生物信息学研究工具存储和处理遗传数据</li></ul><p>我们不断对人们使用搜索的新颖方式感到惊讶。但是，无论您的用例是否与其中之一类似，或者您正在使用 Elasticsearch 来解决新问题，您在 Elasticsearch 中处理数据、文档和索引的方式都是相同的。</p><h3 id="数据输入：文档和索引"><a href="#数据输入：文档和索引" class="headerlink" title="数据输入：文档和索引"></a>数据输入：文档和索引</h3><p>Elasticsearch 是一个分布式文档存储。Elasticsearch 不是将信息存储为列状数据的行，而是存储已序列化为 JSON 文档的复杂数据结构。当集群中有多个 Elasticsearch<br>节点时，存储的文档分布在整个集群中，并且可以从任何节点立即访问。</p><p>存储文档后，它会被编入索引，并且可以近乎实时地在1 秒内完全搜索。Elasticsearch 使用一种称为倒排索引的数据结构，它支持非常快速的全文搜索。倒排索引列出出现在任何文档中的每个唯一单词，并标识每个单词出现的所有文档。</p><p>可以将索引视为文档的优化集合，每个文档都是字段的集合，这些字段是包含您的数据的键值对。默认情况下，Elasticsearch<br>索引每个字段中的所有数据，每个索引字段都有一个专用的、优化的数据结构。例如，文本字段存储在倒排索引中，数值和地理字段存储在 BKD 树中。使用每个字段的数据结构来组合和返回搜索结果的能力使 Elasticsearch 如此之快。</p><p>Elasticsearch 还具有无模式的能力，这意味着可以在不明确指定如何处理文档中可能出现的每个不同字段的情况下为文档编制索引。启用动态映射后，Elasticsearch<br>会自动检测并将新字段添加到索引中。这种默认行为使索引和探索数据变得容易——只需开始索引文档，Elasticsearch 就会检测并将布尔值、浮点和整数值、日期和字符串映射到适当的 Elasticsearch 数据类型。</p><p>但是，归根结底，您比 Elasticsearch 更了解您的数据以及您希望如何使用它。您可以定义规则来控制动态映射并显式定义映射以完全控制字段的存储和索引方式。</p><p>定义您自己的映射使您能够：</p><ul><li>区分全文字符串字段和精确值字符串字段</li><li>执行特定于语言的文本分析</li><li>优化部分匹配的字段</li><li>使用自定义日期格式</li><li>使用无法自动检测到的 数据类型geo_point和geo_shape<br>为了不同的目的以不同的方式索引相同的字段通常很有用。例如，您可能希望将字符串字段索引为用于全文搜索的文本字段和用于排序或聚合数据的关键字字段。或者，您可以选择使用多个语言分析器来处理包含用户输入的字符串字段的内容。</li></ul><p>在索引期间应用于全文字段的分析链也在搜索时使用。当您查询全文字段时，在索引中查找术语之前，查询文本会经过相同的分析。</p><h3 id="信息输出：搜索和分析"><a href="#信息输出：搜索和分析" class="headerlink" title="信息输出：搜索和分析"></a>信息输出：搜索和分析</h3><p>虽然您可以将 Elasticsearch 用作文档存储并检索文档及其元数据，但真正的强大之处在于能够轻松访问构建在 Apache Lucene 搜索引擎库上的全套搜索功能。</p><p>Elasticsearch 提供了一个简单、一致的 REST API 来管理您的集群以及索引和搜索您的数据。出于测试目的，您可以直接从命令行或通过 Kibana 中的开发人员控制台轻松提交请求。在您的应用程序中，您可以将<br>Elasticsearch 客户端 用于您选择的语言：Java、JavaScript、Go、.NET、PHP、Perl、Python 或 Ruby。</p><p>搜索您的数据</p><p>Elasticsearch REST API 支持结构化查询、全文查询和将两者结合的复杂查询。结构化查询类似于您可以在 SQL<br>中构造的查询类型。例如，您可以搜索索引中的gender和age字段并按字段employee对匹配项进行排序hire_date。全文查询查找与查询字符串匹配的所有文档，并按相关性排序返回它们——它们与您的搜索词的匹配程度。</p><p>除了搜索单个术语外，您还可以执行短语搜索、相似性搜索和前缀搜索，并获得自动完成建议。</p><p>有要搜索的地理空间数据或其他数字数据吗？Elasticsearch 在支持高性能地理和数值查询的优化数据结构中索引非文本数据。</p><p>您可以使用 Elasticsearch 的综合 JSON 样式查询语言 ( Query DSL )访问所有这些搜索功能。您还可以构建SQL 样式的查询以在 Elasticsearch 内部搜索和聚合数据，JDBC 和 ODBC<br>驱动程序使广泛的第三方应用程序能够通过 SQL 与 Elasticsearch 交互。</p><p>分析您的数据编辑 Elasticsearch 聚合使您能够构建复杂的数据摘要并深入了解关键指标、模式和趋势。聚合不仅可以找到众所周知的“大海捞针”，还可以让您回答以下问题：</p><ul><li>大海捞针有多少针？</li><li>针的平均长度是多少？</li><li>制造商细分的针的中位数长度是多少？</li><li>在过去的六个月中，每一个月都向大海捞针添加了多少针？</li></ul><p>您还可以使用聚合来回答更微妙的问题，例如：</p><ul><li>您最受欢迎的针头制造商是哪些？</li><li>是否有异常或异常的针团？</li></ul><p>因为聚合利用了用于搜索的相同数据结构，所以它们也非常快。这使您能够实时分析和可视化数据。您的报告和仪表板会随着数据的变化而更新，以便您可以根据最新信息采取行动。</p><p>更重要的是，聚合与搜索请求一起运行。您可以在单个请求中对相同数据同时搜索文档、过滤结果和执行分析。并且因为聚合是在特定搜索的上下文中计算的，所以您不仅会显示所有 70 号针的计数，还显示了与用户搜索条件匹配的 70<br>号针的计数——例如，所有尺寸 70不粘绣花针。</p><p>但是等等，还有更多编辑</p><p>想要自动化时间序列数据的分析吗？您可以使用 机器学习功能创建数据中正常行为的准确基线并识别异常模式。通过机器学习，您可以检测：</p><ul><li>与值、计数或频率的时间偏差相关的异常</li><li>统计稀有度</li><li>某个群体成员的异常行为</li></ul><p>最好的部分是？您无需指定算法、模型或其他与数据科学相关的配置即可执行此操作。</p><h3 id="可扩展性和弹性：集群、节点和分片"><a href="#可扩展性和弹性：集群、节点和分片" class="headerlink" title="可扩展性和弹性：集群、节点和分片"></a>可扩展性和弹性：集群、节点和分片</h3><p>Elasticsearch 旨在始终可用并根据您的需求进行扩展。它通过自然分布来做到这一点。您可以将服务器（节点）添加到集群以增加容量，Elasticsearch<br>会自动在所有可用节点之间分配您的数据和查询负载。无需大修您的应用程序，Elasticsearch 知道如何平衡多节点集群以提供可扩展性和高可用性。节点越多越好。</p><p>这是如何运作的？在幕后，Elasticsearch 索引实际上只是一个或多个物理分片的逻辑分组，其中每个分片实际上是一个独立的索引。通过将索引中的文档分布在多个分片中，并将这些分片分布在多个节点上，Elasticsearch<br>可以确保冗余，这既可以防止硬件故障，又可以在将节点添加到集群时增加查询容量。随着集群的增长（或缩小），Elasticsearch 会自动迁移分片以重新平衡集群。</p><p>有两种类型的分片：主分片和副本。索引中的每个文档都属于一个主分片。副本分片是主分片的副本。副本提供数据的冗余副本，以防止硬件故障并增加处理读取请求（如搜索或检索文档）的容量。</p><p>索引中的主分片数量在创建索引时是固定的，但副本分片的数量可以随时更改，而不会中断索引或查询操作。</p><p>这取决于……</p><p>关于分片大小和为索引配置的主分片数量，有许多性能考虑和权衡。分片越多，维护这些索引的开销就越大。分片大小越大，当 Elasticsearch 需要重新平衡集群时，移动分片所需的时间就越长。</p><p>查询大量小分片会使每个分片的处理速度更快，但更多查询意味着更多开销，因此查询较少数量的较大分片可能会更快。简而言之……视情况而定。</p><p>作为起点：</p><ul><li>旨在将平均分片大小保持在几 GB 到几十 GB 之间。对于具有基于时间的数据的用例，通常会看到 20GB 到 40GB 范围内的分片。</li><li>避免大量碎片问题。一个节点可以容纳的分片数量与可用的堆空间成正比。作为一般规则，每 GB 堆空间的分片数应小于 20。</li></ul><p>为您的用例确定最佳配置的最佳方法是 使用您自己的数据和查询进行测试。</p><p>发生灾害时</p><p>集群节点之间需要良好、可靠的连接。为了提供更好的连接，您通常将节点放在同一数据中心或附近的数据中心。但是，为了保持高可用性，您还需要避免任何单点故障。在一个位置发生重大中断的情况下，另一个位置的服务器需要能够接管。答案？跨集群复制 (<br>CCR)。</p><p>CCR 提供了一种将索引从主集群自动同步到可用作热备份的辅助远程集群的方法。如果主集群出现故障，辅助集群可以接管。您还可以使用 CCR 创建辅助集群，以便为您的用户提供地理位置邻近的读取请求。</p><p>跨集群复制是主动-被动的。主集群上的索引是活动的领导者索引，处理所有写请求。复制到辅助集群的索引是只读的跟随者。</p><p>护理和喂养</p><p>与任何企业系统一样，您需要工具来保护、管理和监控您的 Elasticsearch 集群。集成到 Elasticsearch 中的安全、监控和管理功能使您能够将Kibana 用作管理集群的控制中心。类似的特征数据汇总和指标生命周期管理<br>可帮助您明智随着时间的推移管理您的数据。</p><h3 id="7-15-中的新功能"><a href="#7-15-中的新功能" class="headerlink" title="7.15 中的新功能"></a>7.15 中的新功能</h3><p>以下是 Elasticsearch 7.15 中新增和改进的亮点！</p><p>有关此版本的详细信息，请参阅发行说明和 迁移指南。</p><p>其他版本： 7.14 | 7.13 | 7.12 | 7.11 | 7.10 | 7.9 | 7.8 | 7.7 | 7.6 | 7.5 | 7.4 | 7.3 | 7.2 | 7.1 | 7.0</p><p>索引磁盘使用API编辑</p><p>有一个新的 API 支持分析索引的每个字段的磁盘使用情况，包括整个索引本身。API 通过迭代字段的内容并跟踪读取的字节数来估计字段的磁盘使用情况。请参阅分析索引磁盘使用情况 API。</p><p>搜索矢量切片 API编辑</p><p>有一个新端点可用于从存储在 Elasticsearch 中的地理空间数据生成矢量切片。此功能对于想要在地图上呈现存储在 Elasticsearch 中的地理空间信息的任何应用程序都很有用。请参阅搜索矢量切片 API。</p><p>复合运行时字段编辑</p><p>运行时字段支持 grok 和 dissect 模式，但之前仅针对单个字段发出值。您现在可以使用composite运行时字段从单个字段发出多个值。请参阅定义复合运行时字段。</p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>本指南帮助初学者学习如何：</p><ul><li>在测试环境中安装和运行 Elasticsearch</li><li>将数据添加到 Elasticsearch</li><li>搜索和排序数据</li><li>在搜索期间从非结构化内容中提取字段</li></ul><h4 id="运行-Elasticsearch编辑"><a href="#运行-Elasticsearch编辑" class="headerlink" title="运行 Elasticsearch编辑"></a>运行 Elasticsearch编辑</h4><p>设置 Elasticsearch 的最简单方法是在 Elastic Cloud 上使用 Elasticsearch Service 创建托管部署。如果您更喜欢管理自己的测试环境，可以使用 Docker 安装和运行<br>Elasticsearch。</p><blockquote><blockquote><p>弹性搜索服务</p></blockquote><ol><li>获得免费试用。</li><li>登录Elastic Cloud。</li><li>单击创建部署。</li><li>选择一个解决方案并为您的部署命名。</li><li>单击创建部署并下载elastic用户的密码。</li></ol></blockquote><blockquote><blockquote><p>docker 安装</p></blockquote><p><strong>安装并运行 Elasticsearch</strong></p><p>1.安装并启动Docker 桌面。</p><p>2.运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create elastic</span><br><span class="line">docker pull docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.15.2</span><br><span class="line">docker run --name es01-test --net elastic -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.15.2</span><br></pre></td></tr></table></figure><p><strong>安装并运行 Kibana</strong></p><p>要使用直观的 UI 分析、可视化和管理 Elasticsearch 数据，请安装 Kibana。</p><p>1.在新的终端会话中，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker pull docker.elastic.co&#x2F;kibana&#x2F;kibana:7.15.2</span><br><span class="line">&gt;docker run --name kib01-test --net elastic -p 127.0.0.1:5601:5601 -e &quot;ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;es01-test:9200&quot; docker.elastic.co&#x2F;kibana&#x2F;kibana:7.15.2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.要访问 Kibana，请转到<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a></p></blockquote><h4 id="向-Elasticsearch-发送请求编辑"><a href="#向-Elasticsearch-发送请求编辑" class="headerlink" title="向 Elasticsearch 发送请求编辑"></a>向 Elasticsearch 发送请求编辑</h4><p>您使用 REST API 向 Elasticsearch 发送数据和其他请求。这使您可以使用任何发送 HTTP 请求的客户端（例如curl ）与 Elasticsearch 进行交互 。您还可以使用 Kibana 的控制台向<br>Elasticsearch 发送请求。</p><blockquote><blockquote><p>弹性搜索服务<br>使用卷曲</p></blockquote><p>1.要使用 curl 或其他客户端与 Elasticsearch 通信，您需要集群的端点。进入Elasticsearch页面，点击Copy endpoint。<br>2.要提交示例 API 请求，请在新的终端会话中运行以下 curl 命令。替换<password>为elastic用户的密码。替换<elasticsearch_endpoint>为您的端点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl - u elastic :&lt;密码&gt; &lt; elasticsearch_endpoint &gt;&#x2F;</span><br></pre></td></tr></table></figure><p>使用 Kibana</p><p>1.转到Kibana页面并单击Launch。</p><p>2.打开 Kibana 的主菜单并转到Dev Tools &gt; Console。</p><p>在控制台中运行以下示例 API 请求：</p></blockquote><p>Add dataedit</p><p>You add data to Elasticsearch as JSON objects called documents. Elasticsearch stores these documents in searchable indices.</p><p>For time series data, such as logs and metrics, you typically add documents to a data stream made up of multiple auto-generated backing indices.</p><p>A data stream requires an index template that matches its name. Elasticsearch uses this template to configure the stream’s backing indices. Documents sent to a data stream must have a @timestamp field.</p><p>Add a single documentedit</p><p>Submit the following indexing request to add a single log entry to the logs-my_app-default data stream. Since logs-my_app-default doesn’t exist, the request automatically creates it using the built-in logs-<em>-</em> index template.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_doc?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;@timestamp&quot;: &quot;2099-05-06T16:21:15.000Z&quot;,</span><br><span class="line">  &quot;event&quot;: &#123;</span><br><span class="line">    &quot;original&quot;: &quot;192.0.2.42 - - [06&#x2F;May&#x2F;2099:16:21:15 +0000] \&quot;GET &#x2F;images&#x2F;bg.jpg HTTP&#x2F;1.0\&quot; 200 24736&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>The response includes metadata that Elasticsearch generates for the document:</p><ul><li>The backing _index that contains the document. Elasticsearch automatically generates the names of backing indices.</li><li>A unique _id for the document within the index.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;.ds-logs-my_app-default-2099-05-06-000001&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;gl5MJXMBMk1dGnErnBW8&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot;: 0,</span><br><span class="line">  &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Add multiple documentsedit</li></ul><p>Use the _bulk endpoint to add multiple documents in one request. Bulk data must be newline-delimited JSON (NDJSON). Each line must end in a newline character (\n), including the last line.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_bulk?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &#125; &#125;</span><br><span class="line">&#123; &quot;@timestamp&quot;: &quot;2099-05-07T16:24:32.000Z&quot;, &quot;event&quot;: &#123; &quot;original&quot;: &quot;192.0.2.242 - - [07&#x2F;May&#x2F;2020:16:24:32 -0500] \&quot;GET &#x2F;images&#x2F;hm_nbg.jpg HTTP&#x2F;1.0\&quot; 304 0&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &#125; &#125;</span><br><span class="line">&#123; &quot;@timestamp&quot;: &quot;2099-05-08T16:25:42.000Z&quot;, &quot;event&quot;: &#123; &quot;original&quot;: &quot;192.0.2.255 - - [08&#x2F;May&#x2F;2099:16:25:42 +0000] \&quot;GET &#x2F;favicon.ico HTTP&#x2F;1.0\&quot; 200 3638&quot; &#125; &#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><h4 id="Search-dataedit"><a href="#Search-dataedit" class="headerlink" title="Search dataedit"></a>Search dataedit</h4><p>Indexed documents are available for search in near real-time. The following search matches all log entries in logs-my_app-default and sorts them by @timestamp in descending order.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_search?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>By default, the hits section of the response includes up to the first 10 documents that match the search. The _source of each hit contains the original JSON object submitted during indexing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 2,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 3,</span><br><span class="line">      &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: null,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;.ds-logs-my_app-default-2099-05-06-000001&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;PdjWongB9KPnaVm2IyaL&quot;,</span><br><span class="line">        &quot;_score&quot;: null,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;@timestamp&quot;: &quot;2099-05-08T16:25:42.000Z&quot;,</span><br><span class="line">          &quot;event&quot;: &#123;</span><br><span class="line">            &quot;original&quot;: &quot;192.0.2.255 - - [08&#x2F;May&#x2F;2099:16:25:42 +0000] \&quot;GET &#x2F;favicon.ico HTTP&#x2F;1.0\&quot; 200 3638&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          4081940742000</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Get-specific-fields"><a href="#Get-specific-fields" class="headerlink" title="Get specific fields"></a>Get specific fields</h5><p>Parsing the entire _source is unwieldy for large documents. To exclude it from the response, set the _source parameter to false. Instead, use the fields parameter to retrieve the fields you want.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_search?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;@timestamp&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: false,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>The response contains each hit’s fields values as a flat array.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;.ds-logs-my_app-default-2099-05-06-000001&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;PdjWongB9KPnaVm2IyaL&quot;,</span><br><span class="line">        &quot;_score&quot;: null,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;@timestamp&quot;: [</span><br><span class="line">            &quot;2099-05-08T16:25:42.000Z&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot;: [</span><br><span class="line">          4081940742000</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Search-a-date-range"><a href="#Search-a-date-range" class="headerlink" title="Search a date range"></a>Search a date range</h5><p>To search across a specific time or IP range, use a range query.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_search?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;2099-05-05&quot;,</span><br><span class="line">        &quot;lt&quot;: &quot;2099-05-08&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;@timestamp&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: false,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>You can use date math to define relative time ranges. The following query searches for data from the past day, which won’t match any log entries in logs-my_app-default.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_search?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;now-1d&#x2F;d&quot;,</span><br><span class="line">        &quot;lt&quot;: &quot;now&#x2F;d&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;@timestamp&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: false,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><h5 id="Extract-fields-from-unstructured-contentedit"><a href="#Extract-fields-from-unstructured-contentedit" class="headerlink" title="Extract fields from unstructured contentedit"></a>Extract fields from unstructured contentedit</h5><p>You can extract runtime fields from unstructured content, such as log messages, during a search.</p><p>Use the following search to extract the source.ip runtime field from event.original. To include it in the response, add source.ip to the fields parameter.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_search?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;runtime_mappings&quot;: &#123;</span><br><span class="line">    &quot;source.ip&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;ip&quot;,</span><br><span class="line">      &quot;script&quot;: &quot;String sourceip&#x3D;grok(\u0027%&#123;IPORHOST:sourceip&#125; .*\u0027).extract(doc[ \&quot;event.original\&quot; ].value)?.sourceip;\nif (sourceip !&#x3D; null) emit(sourceip);&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: &quot;2099-05-05&quot;,</span><br><span class="line">        &quot;lt&quot;: &quot;2099-05-08&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;@timestamp&quot;,</span><br><span class="line">    &quot;source.ip&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: false,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><h5 id="Combine-queriesedit"><a href="#Combine-queriesedit" class="headerlink" title="Combine queriesedit"></a>Combine queriesedit</h5><p>You can use the bool query to combine multiple queries. The following search combines two range queries: one on @timestamp and one on the source.ip runtime field.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_search?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;runtime_mappings&quot;: &#123;</span><br><span class="line">    &quot;source.ip&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;ip&quot;,</span><br><span class="line">      &quot;script&quot;: &quot;String sourceip&#x3D;grok(\u0027%&#123;IPORHOST:sourceip&#125; .*\u0027).extract(doc[ \&quot;event.original\&quot; ].value)?.sourceip;\nif (sourceip !&#x3D; null) emit(sourceip);&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;@timestamp&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: &quot;2099-05-05&quot;,</span><br><span class="line">              &quot;lt&quot;: &quot;2099-05-08&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;source.ip&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: &quot;192.0.2.0&quot;,</span><br><span class="line">              &quot;lte&quot;: &quot;192.0.2.240&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;@timestamp&quot;,</span><br><span class="line">    &quot;source.ip&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: false,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><h5 id="Aggregate-dataedit"><a href="#Aggregate-dataedit" class="headerlink" title="Aggregate dataedit"></a>Aggregate dataedit</h5><p>Use aggregations to summarize data as metrics, statistics, or other analytics.</p><p>The following search uses an aggregation to calculate the average_response_size using the http.response.body.bytes runtime field. The aggregation only runs on documents that match the query.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &quot;localhost:9200&#x2F;logs-my_app-default&#x2F;_search?pretty&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;runtime_mappings&quot;: &#123;</span><br><span class="line">    &quot;http.response.body.bytes&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;long&quot;,</span><br><span class="line">      &quot;script&quot;: &quot;String bytes&#x3D;grok(\u0027%&#123;COMMONAPACHELOG&#125;\u0027).extract(doc[ \&quot;event.original\&quot; ].value)?.bytes;\nif (bytes !&#x3D; null) emit(Integer.parseInt(bytes));&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;average_response_size&quot;:&#123;</span><br><span class="line">      &quot;avg&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;http.response.body.bytes&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;@timestamp&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: &quot;2099-05-05&quot;,</span><br><span class="line">              &quot;lt&quot;: &quot;2099-05-08&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;@timestamp&quot;,</span><br><span class="line">    &quot;http.response.body.bytes&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: false,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><p>The response’s aggregations object contains aggregation results.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;average_response_size&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 12368.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Explore more search optionsedit<br>To keep exploring, index more data to your data stream and check out Common search options.</p><h4 id="Clean-upedit"><a href="#Clean-upedit" class="headerlink" title="Clean upedit"></a>Clean upedit</h4><p>When you’re done, delete your test data stream and its backing indices.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE &quot;localhost:9200&#x2F;_data_stream&#x2F;logs-my_app-default?pretty&quot;</span><br></pre></td></tr></table></figure><p>You can also delete your test deployment.</p><blockquote><blockquote><p>Elasticsearch Service</p></blockquote><p>Click Delete deployment from the deployment overview page and follow the prompts.</p></blockquote><blockquote><blockquote><p>Self-managed</p></blockquote><p>To stop your Elasticsearch and Kibana Docker containers, run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop es01-test</span><br><span class="line">docker stop kib01-test</span><br></pre></td></tr></table></figure><p>To remove the containers and their network, run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;docker network rm elastic</span><br><span class="line">docker rm es01-test</span><br><span class="line">docker rm kib01-test</span><br></pre></td></tr></table></figure></blockquote><p><strong>What’s next?edit</strong></p><ul><li>Get the most out of your time series data by setting up data tiers and ILM. See Use Elasticsearch for time series data.</li><li>Use Fleet and Elastic Agent to collect logs and metrics directly from your data sources and send them to Elasticsearch. See the Fleet quick start guide.</li><li>Use Kibana to explore, visualize, and manage your Elasticsearch data. See the Kibana quick start guide.</li></ul><h3 id="Set-up-Elasticsearchedit"><a href="#Set-up-Elasticsearchedit" class="headerlink" title="Set up Elasticsearchedit"></a>Set up Elasticsearchedit</h3><p>This section includes information on how to setup Elasticsearch and get it running, including:</p><ul><li>Downloading</li><li>Installing</li><li>Starting</li><li>Configuring</li></ul><h4 id="Supported-platforms"><a href="#Supported-platforms" class="headerlink" title="Supported platforms"></a>Supported platforms</h4><p>The matrix of officially supported operating systems and JVMs is available here: Support Matrix. Elasticsearch is tested on the listed platforms, but it is possible that it will work on other platforms too.</p><h4 id="Java-JVM-Version"><a href="#Java-JVM-Version" class="headerlink" title="Java (JVM) Version"></a>Java (JVM) Version</h4><p>Elasticsearch is built using Java, and includes a bundled version of OpenJDK from the JDK maintainers (GPLv2+CE) within each distribution. The bundled JVM is the recommended JVM and is located within the jdk directory of the Elasticsearch home directory.</p><p>To use your own version of Java, set the ES_JAVA_HOME environment variable. If you must use a version of Java that is different from the bundled JVM, we recommend using a supported LTS version of Java. Elasticsearch will refuse to start if a known-bad version of Java is used. The bundled JVM directory may be removed when using your own JVM.</p><h4 id="Use-dedicated-hosts"><a href="#Use-dedicated-hosts" class="headerlink" title="Use dedicated hosts"></a>Use dedicated hosts</h4><p>In production, we recommend you run Elasticsearch on a dedicated host or as a primary service. Several Elasticsearch features, such as automatic JVM heap sizing, assume it’s the only resource-intensive application on the host or container. For example, you might run Metricbeat alongside Elasticsearch for cluster statistics, but a resource-heavy Logstash deployment should be on its own host.</p><h3 id="Installing-Elasticsearch"><a href="#Installing-Elasticsearch" class="headerlink" title="Installing Elasticsearch"></a>Installing Elasticsearch</h3><h4 id="Hosted-Elasticsearch"><a href="#Hosted-Elasticsearch" class="headerlink" title="Hosted Elasticsearch"></a>Hosted Elasticsearch</h4><p>You can run Elasticsearch on your own hardware or use our hosted Elasticsearch Service that is available on AWS, GCP, and Azure. Try the Elasticsearch Service for free.</p><h4 id="Installing-Elasticsearch-Yourself"><a href="#Installing-Elasticsearch-Yourself" class="headerlink" title="Installing Elasticsearch Yourself"></a>Installing Elasticsearch Yourself</h4><p>Elasticsearch is provided in the following package formats:</p><table><thead><tr><th align="left">系统</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Linux and MacOS tar.gz archives</td><td align="left">The tar.gz archives are available for installation on any Linux distribution and MacOS.</td></tr><tr><td align="left">Windows .zip archive</td><td align="left">The zip archive is suitable for installation on Windows.</td></tr><tr><td align="left">deb</td><td align="left">The deb package is suitable for Debian, Ubuntu, and other Debian-based systems. Debian packages may be downloaded from the Elasticsearch website or from our Debian repository.</td></tr><tr><td align="left">rpm</td><td align="left">The rpm package is suitable for installation on Red Hat, Centos, SLES, OpenSuSE and other RPM-based systems. RPMs may be downloaded from the Elasticsearch website or from our RPM repository.</td></tr><tr><td align="left">msi</td><td align="left">[beta] This functionality is in beta and is subject to change. The design and code is less mature than official GA features and is being provided as-is with no warranties. Beta features are not subject to the support SLA of official GA features.The msi package is suitable for installation on Windows 64-bit systems with at least .NET 4.5 framework installed, and is the easiest choice for getting started with Elasticsearch on Windows. MSIs may be downloaded from the Elasticsearch website.</td></tr><tr><td align="left">docker</td><td align="left">Images are available for running Elasticsearch as Docker containers. They may be downloaded from the Elastic Docker Registry.<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.15/docker.html" target="_blank" rel="noopener">Install Elasticsearch with Docker</a></td></tr><tr><td align="left">brew</td><td align="left">Formulae are available from the Elastic Homebrew tap for installing Elasticsearch on macOS with the Homebrew package manager.</td></tr></tbody></table><h4 id="Configuration-Management-Tools"><a href="#Configuration-Management-Tools" class="headerlink" title="Configuration Management Tools"></a>Configuration Management Tools</h4><p>We also provide the following configuration management tools to help with large deployments:</p><table><thead><tr><th align="left">tool</th><th align="left">url</th></tr></thead><tbody><tr><td align="left">Puppet</td><td align="left"><a href="https://github.com/voxpupuli/puppet-elasticsearch" target="_blank" rel="noopener">puppet-elasticsearch</a></td></tr><tr><td align="left">Chef</td><td align="left"><a href="https://github.com/elastic/cookbook-elasticsearch" target="_blank" rel="noopener">cookbook-elasticsearch</a></td></tr><tr><td align="left">Ansible</td><td align="left"><a href="https://github.com/elastic/ansible-elasticsearch" target="_blank" rel="noopener">ansible-elasticsearch</a></td></tr></tbody></table><h3 id="Install-Elasticsearch-from-archive-on-Linux-or-MacOS"><a href="#Install-Elasticsearch-from-archive-on-Linux-or-MacOS" class="headerlink" title="Install Elasticsearch from archive on Linux or MacOS"></a>Install Elasticsearch from archive on Linux or MacOS</h3><h3 id="Configuring-Elasticsearchedit"><a href="#Configuring-Elasticsearchedit" class="headerlink" title="Configuring Elasticsearchedit"></a>Configuring Elasticsearchedit</h3><p>Elasticsearch ships with good defaults and requires very little configuration. Most settings can be changed on a running cluster using the Cluster update settings API.</p><p>The configuration files should contain settings which are node-specific (such as node.name and paths), or settings which a node requires in order to be able to join a cluster, such as cluster.name and network.host.</p><h4 id="Config-files-locationedit"><a href="#Config-files-locationedit" class="headerlink" title="Config files locationedit"></a>Config files locationedit</h4><p>Elasticsearch has three configuration files:</p><ul><li>elasticsearch.yml for configuring Elasticsearch</li><li>jvm.options for configuring Elasticsearch JVM settings</li><li>log4j2.properties for configuring Elasticsearch logging</li></ul><p>These files are located in the config directory, whose default location depends on whether or not the installation is from an archive distribution (tar.gz or zip) or a package distribution (Debian or RPM packages).</p><p>For the archive distributions, the config directory location defaults to $ES_HOME/config. The location of the config directory can be changed via the ES_PATH_CONF environment variable as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES_PATH_CONF&#x3D;&#x2F;path&#x2F;to&#x2F;my&#x2F;config .&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><p>Alternatively, you can export the ES_PATH_CONF environment variable via the command line or via your shell profile.</p><p>For the package distributions, the config directory location defaults to /etc/elasticsearch. The location of the config directory can also be changed via the ES_PATH_CONF environment variable, but note that setting this in your shell is not sufficient. Instead, this variable is sourced from /etc/default/elasticsearch (for the Debian package) and /etc/sysconfig/elasticsearch (for the RPM package). You will need to edit the ES_PATH_CONF=/etc/elasticsearch entry in one of these files accordingly to change the config directory location.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Elasticsearch7-15指南&quot;&gt;&lt;a href=&quot;#Elasticsearch7-15指南&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch7.15指南&quot;&gt;&lt;/a&gt;Elasticsearch7.15指南&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="elk" scheme="http://iwantjingjing.com/categories/elk/"/>
    
    
      <category term="elk" scheme="http://iwantjingjing.com/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid实用教程</title>
    <link href="http://iwantjingjing.com/2021/11/25/Mermaid%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://iwantjingjing.com/2021/11/25/Mermaid%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-11-25T08:54:16.000Z</published>
    <updated>2021-11-26T11:00:11.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://vincentruan.github.io/2020/02/04/Mermaid-%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">转发自</a></p><p><a href="https://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://github.com/knsv/mermaid" target="_blank" rel="noopener">github</a></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h3><h4 id="图标方向"><a href="#图标方向" class="headerlink" title="图标方向"></a>图标方向</h4><p>Mermaid支持多种图表的方向，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph 方向描述</span><br><span class="line">    图表中的其他语句...</span><br></pre></td></tr></table></figure><h5 id="方向描述"><a href="#方向描述" class="headerlink" title="方向描述"></a>方向描述</h5><table><thead><tr><th align="left">方向描述</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">TB</td><td align="left">从上到下</td></tr><tr><td align="left">BT</td><td align="left">从下到上</td></tr><tr><td align="left">RL</td><td align="left">从右到左</td></tr><tr><td align="left">LR</td><td align="left">从左到右</td></tr></tbody></table><h5 id="节点描述"><a href="#节点描述" class="headerlink" title="节点描述"></a>节点描述</h5><p>即流程图中每个文本块，包括开始、结束、处理、判断等。Mermaid中每个节点都有一个id，以及节点的文字。</p><table><thead><tr><th align="left">表述</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">id[文字]</td><td align="left">矩形节点</td></tr><tr><td align="left">id(文字)</td><td align="left">圆角矩形节点</td></tr><tr><td align="left">id((文字))</td><td align="left">圆形节点</td></tr><tr><td align="left">id&gt;文字}</td><td align="left">右向旗帜状节点</td></tr><tr><td align="left">id{文字}</td><td align="left">菱形节点</td></tr><tr><td align="left">需要注意的是，如果节点的文字中包含标点符号，需要时用双引号包裹起来。</td><td align="left"></td></tr></tbody></table><p>希望在文字中换行，请使用</p><p>替换换行</p><h5 id="节点间的连线"><a href="#节点间的连线" class="headerlink" title="节点间的连线"></a>节点间的连线</h5><table><thead><tr><th align="left">表述</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">&gt;</td><td align="left">添加尾部箭头</td></tr><tr><td align="left">-</td><td align="left">不添加尾部箭头</td></tr><tr><td align="left">–</td><td align="left">单线</td></tr><tr><td align="left">–text–</td><td align="left">单线上加文字</td></tr><tr><td align="left">==</td><td align="left">粗线</td></tr><tr><td align="left">==text==</td><td align="left">粗线加文字</td></tr><tr><td align="left">-.-</td><td align="left">虚线</td></tr><tr><td align="left">-.text.-</td><td align="left">虚线上加文字</td></tr></tbody></table><h5 id="子图表"><a href="#子图表" class="headerlink" title="子图表"></a>子图表</h5><p>使用以下语法添加子图表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph 子图表名称</span><br><span class="line">    子图表中的描述语句...</span><br><span class="line">end123</span><br></pre></td></tr></table></figure><h5 id="对font-awesome的支持"><a href="#对font-awesome的支持" class="headerlink" title="对font awesome的支持"></a>对font awesome的支持</h5><p>使用<code>fa: #图表名称#</code>的语法添加fontawesome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><ul><li>TB/TD - top bottom</li><li>BT - bottom top</li><li>RL - right left</li><li>LR - left right</li></ul><h4 id="向下"><a href="#向下" class="headerlink" title="向下"></a>向下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">Start --&gt; Stop</span><br></pre></td></tr></table></figure><h4 id="向下-1"><a href="#向下-1" class="headerlink" title="向下"></a>向下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">Start --&gt; Stop</span><br></pre></td></tr></table></figure><h4 id="向上"><a href="#向上" class="headerlink" title="向上"></a>向上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph BT</span><br><span class="line">Start --&gt; Stop</span><br></pre></td></tr></table></figure><h4 id="从右向左"><a href="#从右向左" class="headerlink" title="从右向左"></a>从右向左</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph RL</span><br><span class="line">Start --&gt; Stop</span><br></pre></td></tr></table></figure><h4 id="从左向右"><a href="#从左向右" class="headerlink" title="从左向右"></a>从左向右</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">Start --&gt; Stop</span><br></pre></td></tr></table></figure><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><h4 id="普通节点"><a href="#普通节点" class="headerlink" title="普通节点"></a>普通节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id</span><br></pre></td></tr></table></figure><h4 id="带文字节点"><a href="#带文字节点" class="headerlink" title="带文字节点"></a>带文字节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id[带文字节点]</span><br></pre></td></tr></table></figure><h4 id="圆角节点"><a href="#圆角节点" class="headerlink" title="圆角节点"></a>圆角节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id(圆角节点)</span><br></pre></td></tr></table></figure><h4 id="圆形节点"><a href="#圆形节点" class="headerlink" title="圆形节点"></a>圆形节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id((圆形节点))</span><br></pre></td></tr></table></figure><h4 id="不对称节点"><a href="#不对称节点" class="headerlink" title="不对称节点"></a>不对称节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id&gt;不对称节点]</span><br></pre></td></tr></table></figure><h4 id="菱形节点"><a href="#菱形节点" class="headerlink" title="菱形节点"></a>菱形节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id&#123;菱形节点&#125;</span><br></pre></td></tr></table></figure><h3 id="连接线"><a href="#连接线" class="headerlink" title="连接线"></a>连接线</h3><h4 id="实线，有箭头，无文字"><a href="#实线，有箭头，无文字" class="headerlink" title="实线，有箭头，无文字"></a>实线，有箭头，无文字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--&gt;B</span><br></pre></td></tr></table></figure><h4 id="实线，无箭头，无文字"><a href="#实线，无箭头，无文字" class="headerlink" title="实线，无箭头，无文字"></a>实线，无箭头，无文字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A---B</span><br></pre></td></tr></table></figure><h4 id="实线，无箭头，有文字"><a href="#实线，无箭头，有文字" class="headerlink" title="实线，无箭头，有文字"></a>实线，无箭头，有文字</h4><p>前面两个<code>-</code>,后面三个<code>-</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A-- 文字 ---B</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--- |文字| B</span><br></pre></td></tr></table></figure><h4 id="实线，有箭头，有文字"><a href="#实线，有箭头，有文字" class="headerlink" title="实线，有箭头，有文字"></a>实线，有箭头，有文字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A-- 文字 --&gt;B</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--&gt; |文字| B</span><br></pre></td></tr></table></figure><h4 id="虚线，有箭头，有文字"><a href="#虚线，有箭头，有文字" class="headerlink" title="虚线，有箭头，有文字"></a>虚线，有箭头，有文字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A-. text .-&gt; B</span><br></pre></td></tr></table></figure><h4 id="大箭头，无文字"><a href="#大箭头，无文字" class="headerlink" title="大箭头，无文字"></a>大箭头，无文字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A &#x3D;&#x3D;&gt; B</span><br></pre></td></tr></table></figure><h4 id="大箭头，文字"><a href="#大箭头，文字" class="headerlink" title="大箭头，文字"></a>大箭头，文字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A &#x3D;&#x3D; text &#x3D;&#x3D;&gt; B</span><br></pre></td></tr></table></figure><h3 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h3><h4 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h4><p>文字里用引号避免一些特殊字符的错误。比如矩形节点里有（）时就无法渲染，所以加上引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id1[&quot;This is the (text) in the box&quot;]</span><br></pre></td></tr></table></figure><h4 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h4><p>可以使用 HTML 中的实体字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[&quot;A double quote:#quot;&quot;] --&gt;B[&quot;A dec char:#9829;&quot;]</span><br></pre></td></tr></table></figure><h3 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="linkStyle-后面的数字表示第几根线，从-0-开始。可以指定颜色和粗细。"><a href="#linkStyle-后面的数字表示第几根线，从-0-开始。可以指定颜色和粗细。" class="headerlink" title="linkStyle 后面的数字表示第几根线，从 0 开始。可以指定颜色和粗细。"></a>linkStyle 后面的数字表示第几根线，从 0 开始。可以指定颜色和粗细。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br><span class="line">    linkStyle 0 stroke:#0ff,stroke-width:2px;</span><br><span class="line">    linkStyle 3 stroke:#ff3,stroke-width:4px;</span><br></pre></td></tr></table></figure><h4 id="设置节点背景，边框颜色，粗细，实线还是虚线"><a href="#设置节点背景，边框颜色，粗细，实线还是虚线" class="headerlink" title="设置节点背景，边框颜色，粗细，实线还是虚线"></a>设置节点背景，边框颜色，粗细，实线还是虚线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id1(Start)--&gt;id2(Stop)</span><br><span class="line">    style id1 fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</span><br></pre></td></tr></table></figure><h4 id="样式类"><a href="#样式类" class="headerlink" title="样式类"></a>样式类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A--&gt;B</span><br><span class="line"></span><br><span class="line">    %% 定义样式类</span><br><span class="line">    classDef className fill:#f9f,stroke:#333,stroke-width:4px;</span><br><span class="line"></span><br><span class="line">    %% 应用样式类，markdown里没效果</span><br><span class="line">    class A className</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classDef default fill:#f9f,stroke:#333,stroke-width:4px;</span><br></pre></td></tr></table></figure><p>定义一个名为 default 的类，节点没有指定特定样式类时，将都会应用这个样式类。</p><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>可以使用 Font Awesome 图标。语法 fa:icon class name。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">   B[&quot;fa:fa-twitter for peace&quot;]</span><br><span class="line">   B--&gt;C[fa:fa-ban forbidden]</span><br><span class="line">   B--&gt;D(fa:fa-spinner);</span><br><span class="line">   B--&gt;E(A fa:fa-camera-retro perhaps?);</span><br></pre></td></tr></table></figure><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right of John: Rational thoughts &lt;br&#x2F;&gt;prevail...</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">    John-&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><h3 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h3><p>如果不显示声明，参与者将根据第一次出现的顺序排列，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure><p>第一条语句出现了两个参与者角色，而在这条语句中，Alice 在 John 之前，所以图中也是这个顺序。如果不想根据第一次出现的顺序来排，可以主动声明以定义顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant John</span><br><span class="line">    participant Alice</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>可以给角色写一个简短的别名以方便书写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant A as Alice</span><br><span class="line">    participant J as John</span><br><span class="line">    A-&gt;&gt;J: Hello John, how are you?</span><br><span class="line">    J-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>消息连线有六种样式。</p><p>有一个<code>-</code>是实线，两个<code>-</code>是虚线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    A-&gt;B: 无箭头实线</span><br><span class="line">    A--&gt;B: 无箭头虚线(点线)</span><br><span class="line">    A-&gt;&gt;B: 有箭头实线</span><br><span class="line">    A--&gt;&gt;B: 有箭头实线</span><br><span class="line">    A-x B: 有箭头实线，加上叉</span><br><span class="line">    A--x B: 有箭头虚线，加上叉</span><br></pre></td></tr></table></figure><h3 id="活动期"><a href="#活动期" class="headerlink" title="活动期"></a>活动期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    %% activate 角色名 表示激活控制焦点</span><br><span class="line">    activate John</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    %% deactivate 角色名 表示控制焦点结束</span><br><span class="line">    deactivate John</span><br></pre></td></tr></table></figure><p>使用 <code>+/-</code> 的更方便的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;-Alice: Great!</span><br></pre></td></tr></table></figure><p>可以嵌套：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class="line">    Alice-&gt;&gt;+John: John, can you hear me?</span><br><span class="line">    John--&gt;&gt;-Alice: Hi Alice, I can hear you!</span><br><span class="line">    John--&gt;&gt;-Alice: I feel great!</span><br></pre></td></tr></table></figure><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>语法：Note [ right of | left of | over ] [Actor]。</p><table><thead><tr><th align="left">表述</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">right of</td><td align="left">右侧</td></tr><tr><td align="left">left of</td><td align="left">左侧</td></tr><tr><td align="left">over</td><td align="left">在当中，可以横跨多个参与者</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant John</span><br><span class="line">    Note right of John: Text in note</span><br></pre></td></tr></table></figure><p>over 可用于单独一个角色上，也可以用于相邻两个角色间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    Note over Alice,John: A typical interaction</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">loop Loop text</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    %% loop 后跟循环体说明文字</span><br><span class="line">    loop Every minute</span><br><span class="line">        John--&gt;Alice: Great!</span><br><span class="line">    %% 标记循环结束</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alt Describing text</span><br><span class="line">... statements ...</span><br><span class="line">else</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>可选条件，比如在没有 else 分支的情况下使用，有点类似 java 中的 switch 的 default 分支，代表剩下所有情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">opt Describing text</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class="line">    alt is sick</span><br><span class="line">        Bob-&gt;&gt;Alice: Not so good :(</span><br><span class="line">    else is well</span><br><span class="line">        Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span><br><span class="line">    end</span><br><span class="line">    opt Extra response</span><br><span class="line">        Bob-&gt;&gt;Alice: Thanks for asking</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考文档&quot;&gt;&lt;a href=&quot;#参考文档&quot; class=&quot;headerlink&quot; title=&quot;参考文档&quot;&gt;&lt;/a&gt;参考文档&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vincentruan.github.io/2020/02/04/Mermaid-%E5%
      
    
    </summary>
    
    
      <category term="markdown" scheme="http://iwantjingjing.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://iwantjingjing.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>markdown画流程图</title>
    <link href="http://iwantjingjing.com/2021/11/25/markdown%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <id>http://iwantjingjing.com/2021/11/25/markdown%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/</id>
    <published>2021-11-25T02:54:53.000Z</published>
    <updated>2021-11-25T07:39:44.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程图各个形状的含义"><a href="#流程图各个形状的含义" class="headerlink" title="流程图各个形状的含义"></a>流程图各个形状的含义</h2><p><img src="flow.png" alt=""></p><ul><li>圆角矩形（表示起止）</li><li>平行四边形（输入输出）</li><li>菱形（判断）</li><li>直角矩形（操作/执行）</li></ul><table><thead><tr><th align="left">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">start</td><td align="left">开始（圆角矩形）</td></tr><tr><td align="left">end</td><td align="left">结束（圆角矩形）</td></tr><tr><td align="left">condition</td><td align="left">判断（菱形）</td></tr><tr><td align="left">operation</td><td align="left">操作（直角矩形）</td></tr><tr><td align="left">inputoutput</td><td align="left">输入输出（平行四边形）</td></tr></tbody></table><p>** note:可以对符号自定义命名，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt; start: 输入数据</span><br><span class="line">解释：</span><br><span class="line">    st就是对start的命名，命名用&#x3D;&gt;符号</span><br><span class="line">    start: 后的文字，就是图形框内要显示的文字</span><br><span class="line">    start: 冒号后一定要空格再写文字</span><br></pre></td></tr></table></figure><p><strong>注意: 冒号后一定要加一个空格！！！</strong></p><p>下面表示各个图形和流程的串联，一个简单的-&gt;符号就好:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 下面是赋值语句</span><br><span class="line">st&#x3D;&gt;start: Start|past:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end: End:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation|past</span><br><span class="line">op2&#x3D;&gt;operation: Stuff</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">c2&#x3D;&gt;condition: Good idea</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line"># 下面是连接语句</span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;c2</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br><span class="line"></span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure><h2 id="横向流程图源码格式："><a href="#横向流程图源码格式：" class="headerlink" title="横向流程图源码格式："></a>横向流程图源码格式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">graph LR</span><br><span class="line"></span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line"></span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line"></span><br><span class="line">C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line"></span><br><span class="line">C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line"></span><br><span class="line">F[横向流程图]</span><br></pre></td></tr></table></figure><h2 id="竖向流程图源码格式："><a href="#竖向流程图源码格式：" class="headerlink" title="竖向流程图源码格式："></a>竖向流程图源码格式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">graph TD</span><br><span class="line"></span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line"></span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line"></span><br><span class="line">C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line"></span><br><span class="line">C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line"></span><br><span class="line">F[竖向流程图]</span><br></pre></td></tr></table></figure><h2 id="标准流程图源码格式："><a href="#标准流程图源码格式：" class="headerlink" title="标准流程图源码格式："></a>标准流程图源码格式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h2 id="标准流程图源码格式（横向）："><a href="#标准流程图源码格式（横向）：" class="headerlink" title="标准流程图源码格式（横向）："></a>标准流程图源码格式（横向）：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line"></span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line"></span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line"></span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line"></span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line"></span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line"></span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line"></span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line"></span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h2 id="UML时序图源码样例："><a href="#UML时序图源码样例：" class="headerlink" title="UML时序图源码样例："></a>UML时序图源码样例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sequenceDiagram</span><br><span class="line"></span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line"></span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line"></span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line"></span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line"></span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><h2 id="UML时序图源码复杂样例："><a href="#UML时序图源码复杂样例：" class="headerlink" title="UML时序图源码复杂样例："></a>UML时序图源码复杂样例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sequenceDiagram</span><br><span class="line"></span><br><span class="line">Title: 标题：复杂使用</span><br><span class="line"></span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line"></span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line"></span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line"></span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line"></span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line"></span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line"></span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line"></span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line"></span><br><span class="line">participant C</span><br><span class="line"></span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><h2 id="UML标准时序图样例："><a href="#UML标准时序图样例：" class="headerlink" title="UML标准时序图样例："></a>UML标准时序图样例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line"></span><br><span class="line">sequenceDiagram</span><br><span class="line"></span><br><span class="line">participant 张三</span><br><span class="line"></span><br><span class="line">participant 李四</span><br><span class="line"></span><br><span class="line">张三-&gt;王五: 王五你好吗？</span><br><span class="line"></span><br><span class="line">loop 健康检查</span><br><span class="line"></span><br><span class="line">王五-&gt;王五: 与疾病战斗</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 很好!</span><br><span class="line"></span><br><span class="line">王五-&gt;李四: 你怎么样?</span><br><span class="line"></span><br><span class="line">李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><h2 id="甘特图样例："><a href="#甘特图样例：" class="headerlink" title="甘特图样例："></a>甘特图样例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gantt</span><br><span class="line"></span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">title 软件开发甘特图</span><br><span class="line"></span><br><span class="line">section 设计</span><br><span class="line"></span><br><span class="line">需求 :done, des1, 2014-01-06,2014-01-08</span><br><span class="line"></span><br><span class="line">原型 :active, des2, 2014-01-09, 3d</span><br><span class="line"></span><br><span class="line">UI设计 : des3, after des2, 5d</span><br><span class="line"></span><br><span class="line">未来任务 : des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">section 开发</span><br><span class="line"></span><br><span class="line">学习准备理解需求 :crit, done, 2014-01-06,24h</span><br><span class="line"></span><br><span class="line">设计框架 :crit, done, after des2, 2d</span><br><span class="line"></span><br><span class="line">开发 :crit, active, 3d</span><br><span class="line"></span><br><span class="line">未来任务 :crit, 5d</span><br><span class="line"></span><br><span class="line">耍 :2d</span><br><span class="line"></span><br><span class="line">section 测试</span><br><span class="line"></span><br><span class="line">功能测试 :active, a1, after des3, 3d</span><br><span class="line"></span><br><span class="line">压力测试 :after a1 , 20h</span><br><span class="line"></span><br><span class="line">测试报告 : 48h</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;流程图各个形状的含义&quot;&gt;&lt;a href=&quot;#流程图各个形状的含义&quot; class=&quot;headerlink&quot; title=&quot;流程图各个形状的含义&quot;&gt;&lt;/a&gt;流程图各个形状的含义&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;flow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="markdown" scheme="http://iwantjingjing.com/categories/markdown/"/>
    
      <category term="idea" scheme="http://iwantjingjing.com/categories/markdown/idea/"/>
    
    
      <category term="markdown" scheme="http://iwantjingjing.com/tags/markdown/"/>
    
  </entry>
  
</feed>
