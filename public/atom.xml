<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I want jing jing</title>
  
  <subtitle>I want jing jing ,Don&#39;t ask me who is jing jing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iwantjingjing.com/"/>
  <updated>2021-06-12T07:29:31.572Z</updated>
  <id>http://iwantjingjing.com/</id>
  
  <author>
    <name>给予ππ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java9改进的Javadoc</title>
    <link href="http://iwantjingjing.com/2021/06/12/java9%E6%94%B9%E8%BF%9B%E7%9A%84Javadoc/"/>
    <id>http://iwantjingjing.com/2021/06/12/java9%E6%94%B9%E8%BF%9B%E7%9A%84Javadoc/</id>
    <published>2021-06-12T07:17:59.000Z</published>
    <updated>2021-06-12T07:29:31.572Z</updated>
    
    <content type="html"><![CDATA[<p>javadoc 工具可以生成 Java 文档， Java 9 的 javadoc 的输出现在符合兼容 HTML5 标准。</p><p>Java 9 之前的旧版本文档</p><p>考虑以下文件代码 C:/JAVA/Tester.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * @author MahKumar</span><br><span class="line">  * @version 0.1</span><br><span class="line">*&#x2F;</span><br><span class="line">public class Tester &#123;</span><br><span class="line">   &#x2F;**</span><br><span class="line">      * Default method to be run to print </span><br><span class="line">      * &lt;p&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">      * @param args command line arguments</span><br><span class="line">   *&#x2F;</span><br><span class="line">   public static void main(String []args) &#123;</span><br><span class="line">      System.out.println(&quot;Hello World&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 jdk 7 的 javadoc 生成文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C:\JAVA&gt;javadoc -d C:&#x2F;JAVA Tester.java</span><br><span class="line">Loading source file tester.java...</span><br><span class="line">Constructing Javadoc information...</span><br><span class="line">Standard Doclet version 1.7.0_21</span><br><span class="line">Building tree for all the packages and classes...</span><br><span class="line">Generating C:\JAVA\Tester.html...</span><br><span class="line">Generating C:\JAVA\package-frame.html...</span><br><span class="line">Generating C:\JAVA\package-summary.html...</span><br><span class="line">Generating C:\JAVA\package-tree.html...</span><br><span class="line">Generating C:\JAVA\constant-values.html...</span><br><span class="line">Building index for all the packages and classes...</span><br><span class="line">Generating C:\JAVA\overview-tree.html...</span><br><span class="line">Generating C:\JAVA\index-all.html...</span><br><span class="line">Generating C:\JAVA\deprecated-list.html...</span><br><span class="line">Building index for all classes...</span><br><span class="line">Generating C:\JAVA\allclasses-frame.html...</span><br><span class="line">Generating C:\JAVA\allclasses-noframe.html...</span><br><span class="line">Generating C:\JAVA\index.html...</span><br><span class="line">Generating C:\JAVA\help-doc.html...</span><br></pre></td></tr></table></figure><p>执行以上命令会再 C:/JAVA 命令下生成文档页面，如下图所示：<br><img src="img.png" alt="img.png"></p><p>Java 9 生成的文档兼容 HTML5 标准</p><p>使用 jdk 9 javadoc 命令中的 -html5 参数可以让生成的文档支持 HTML5 标准：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\JAVA&gt; javadoc -d C:&#x2F;JAVA -html5 Tester.java</span><br><span class="line">Loading source file Tester.java...</span><br><span class="line">Constructing Javadoc information...</span><br><span class="line">Standard Doclet version 9.0.1</span><br><span class="line">Building tree for all the packages and classes...</span><br><span class="line">Generating C:\JAVA\Tester.html...</span><br><span class="line">Generating C:\JAVA\package-frame.html...</span><br><span class="line">Generating C:\JAVA\package-summary.html...</span><br><span class="line">Generating C:\JAVA\package-tree.html...</span><br><span class="line">Generating C:\JAVA\constant-values.html...</span><br><span class="line">Building index for all the packages and classes...</span><br><span class="line">Generating C:\JAVA\overview-tree.html...</span><br><span class="line">Generating C:\JAVA\index-all.html...</span><br><span class="line">Generating C:\JAVA\deprecated-list.html...</span><br><span class="line">Building index for all classes...</span><br><span class="line">Generating C:\JAVA\allclasses-frame.html...</span><br><span class="line">Generating C:\JAVA\allclasses-frame.html...</span><br><span class="line">Generating C:\JAVA\allclasses-noframe.html...</span><br><span class="line">Generating C:\JAVA\allclasses-noframe.html...</span><br><span class="line">Generating C:\JAVA\index.html...</span><br><span class="line">Generating C:\JAVA\help-doc.html...</span><br></pre></td></tr></table></figure><p>执行以上命令会再 C:/JAVA 命令下生成文档页面，如下图所示：</p><p><img src="img_1.png" alt="img_1.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;javadoc 工具可以生成 Java 文档， Java 9 的 javadoc 的输出现在符合兼容 HTML5 标准。&lt;/p&gt;
&lt;p&gt;Java 9 之前的旧版本文档&lt;/p&gt;
&lt;p&gt;考虑以下文件代码 C:/JAVA/Tester.java:&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java9JShell</title>
    <link href="http://iwantjingjing.com/2021/06/12/java9JShell/"/>
    <id>http://iwantjingjing.com/2021/06/12/java9JShell/</id>
    <published>2021-06-12T07:06:38.000Z</published>
    <updated>2021-06-12T07:13:19.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-9-REPL-JShell"><a href="#Java-9-REPL-JShell" class="headerlink" title="Java 9 REPL (JShell)"></a>Java 9 REPL (JShell)</h1><p>REPL(Read Eval Print Loop)意为交互式的编程环境。</p><p>JShell 是 Java 9 新增的一个交互式的编程环境工具。它允许你无需使用类或者方法包装来执行 Java 语句。它与 Python 的解释器类似，可以直接 输入表达式并查看其执行结果。</p><p>执行 JSHELL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jshell</span><br><span class="line">|  Welcome to JShell -- Version 9-ea</span><br><span class="line">|  For an introduction type: &#x2F;help intro</span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure><p>查看 JShell 命令</p><p>输入 /help 可以查看 JShell相关的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; &#x2F;help</span><br><span class="line">|  Type a Java language expression, statement, or declaration.</span><br><span class="line">|  Or type one of the following commands:</span><br><span class="line">|  &#x2F;list [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|  list the source you have typed</span><br><span class="line">|  &#x2F;edit &lt;name or id&gt;</span><br><span class="line">|  edit a source entry referenced by name or id</span><br><span class="line">|  &#x2F;drop &lt;name or id&gt;</span><br><span class="line">|  delete a source entry referenced by name or id</span><br><span class="line">|  &#x2F;save [-all|-history|-start] &lt;file&gt;</span><br><span class="line">|  Save snippet source to a file.</span><br><span class="line">|  &#x2F;open &lt;file&gt;</span><br><span class="line">|  open a file as source input</span><br><span class="line">|  &#x2F;vars [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|  list the declared variables and their values</span><br><span class="line">|  &#x2F;methods [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|  list the declared methods and their signatures</span><br><span class="line">|  &#x2F;types [&lt;name or id&gt;|-all|-start]</span><br><span class="line">|  list the declared types</span><br><span class="line">|  &#x2F;imports </span><br><span class="line">|  list the imported items</span><br></pre></td></tr></table></figure><p>执行 JShell 命令<br>/imports 命令用于查看已导入的包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; &#x2F;imports</span><br><span class="line">|    import java.io.*</span><br><span class="line">|    import java.math.*</span><br><span class="line">|    import java.net.*</span><br><span class="line">|    import java.nio.file.*</span><br><span class="line">|    import java.util.*</span><br><span class="line">|    import java.util.concurrent.*</span><br><span class="line">|    import java.util.function.*</span><br><span class="line">|    import java.util.prefs.*</span><br><span class="line">|    import java.util.regex.*</span><br><span class="line">|    import java.util.stream.*</span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure><p>JShell 执行计算<br>以下实例执行 JShell 简单计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; 3+1</span><br><span class="line">$1 &#x3D;&#x3D;&gt; 4</span><br><span class="line">jshell&gt; 13%7</span><br><span class="line">$2 &#x3D;&#x3D;&gt; 6</span><br><span class="line">jshell&gt; $2</span><br><span class="line">$2 &#x3D;&#x3D;&gt; 6</span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure><p>JShell 创建与使用函数<br>创建一个函数 doubled() ，将传入的整型参数乘于 2 后返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; int doubled(int i)&#123; return i*2;&#125;</span><br><span class="line">|  created method doubled(int)</span><br><span class="line">jshell&gt; doubled(6)</span><br><span class="line">$3 &#x3D;&#x3D;&gt; 12</span><br><span class="line">jshell&gt;</span><br></pre></td></tr></table></figure><p>退出 JShell</p><p>输入 /exit 命令退出 jshell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jshell&gt; &#x2F;exit</span><br><span class="line">| Goodbye</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-9-REPL-JShell&quot;&gt;&lt;a href=&quot;#Java-9-REPL-JShell&quot; class=&quot;headerlink&quot; title=&quot;Java 9 REPL (JShell)&quot;&gt;&lt;/a&gt;Java 9 REPL (JShell)&lt;/h1&gt;&lt;p&gt;RE
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java9模块系统</title>
    <link href="http://iwantjingjing.com/2021/06/12/java9%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/"/>
    <id>http://iwantjingjing.com/2021/06/12/java9%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-06-12T06:48:21.000Z</published>
    <updated>2021-06-12T07:04:43.980Z</updated>
    
    <content type="html"><![CDATA[<p>Java 9 最大的变化之一是引入了模块系统（Jigsaw 项目）。<br>模块就是代码和数据的封装体。模块的代码被组织成多个包，每个包中包含Java类和接口；模块的数据则包括资源文件和其他静态信息。<br>Java 9 模块的重要特征是在其工件（artifact）的根目录中包含了一个描述模块的 module-info.class 文 件。 工件的格式可以是传统的 JAR 文件或是 Java 9 新增的 JMOD 文件。这个文件由根目录中的源代码文件 module-info.java 编译而来。该模块声明文件可以描述模块的不同特征。<br>在 module-info.java 文件中，我们可以用新的关键词module来声明一个模块，如下所示。下面给出了一个模块com.mycompany.mymodule的最基本的模块声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module com.runoob.mymodule &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>接下来我们创建一个 com.runoob.greetings 的模块。</p><p><strong>第一步</strong></p><p>创建文件夹 C:&gt;JAVA\src，然后在该目录下再创建与模块名相同的文件夹 com.runoob.greetings。</p><p><strong>第二步</strong><br>在 C:&gt;JAVA\src\com.runoob.greetings 目录下创建 module-info.java 文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module com.runoob.greetings &#123; &#125;</span><br></pre></td></tr></table></figure><p>module-info.java 用于创建模块。这一步我们创建了 com.runoob.greetings 模块。</p><p><strong>第三步</strong><br>在模块中添加源代码文件，在目录 C:&gt;JAVA\src\com.runoob.greetings\com\runoob\greetings 中创建文件 Java9Tester.java，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.runoob.greetings;</span><br><span class="line"></span><br><span class="line">public class Java9Tester &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第四步</strong><br>创建文件夹 C:&gt;JAVA\mods，然后在该目录下创建 com.runoob.greetings 文件夹，编译模块到这个目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:&#x2F;&gt;JAVA&gt; javac -d mods&#x2F;com.runoob.greetings </span><br><span class="line">   src&#x2F;com.runoob.greetings&#x2F;module-info.java </span><br><span class="line">   src&#x2F;com.runoob.greetings&#x2F;com&#x2F;runoob&#x2F;greetings&#x2F;Java9Tester.java</span><br></pre></td></tr></table></figure><p><strong>第五步</strong><br>执行模块，查看输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:&#x2F;&gt;JAVA&gt; java --module-path mods -m com.runoob.greetings&#x2F;com.runoob.greetings.Java9Tester</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>module-path 指定了模块所在的路径。<br>-m 指定主要模块。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 9 最大的变化之一是引入了模块系统（Jigsaw 项目）。&lt;br&gt;模块就是代码和数据的封装体。模块的代码被组织成多个包，每个包中包含Java类和接口；模块的数据则包括资源文件和其他静态信息。&lt;br&gt;Java 9 模块的重要特征是在其工件（artifact）的根目录
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Electron教程</title>
    <link href="http://iwantjingjing.com/2021/06/09/Electron%E6%95%99%E7%A8%8B/"/>
    <id>http://iwantjingjing.com/2021/06/09/Electron%E6%95%99%E7%A8%8B/</id>
    <published>2021-06-09T07:47:47.000Z</published>
    <updated>2021-06-09T07:54:43.459Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.electronjs.org/" target="_blank" rel="noopener">官网</a><br><a href="https://www.w3cschool.cn/electronmanual/lz4y1ql3.html" target="_blank" rel="noopener">w3c教程</a><br><a href="https://zh.wikipedia.org/wiki/Electron" target="_blank" rel="noopener">维基</a><br><a href="https://search.bilibili.com/all?keyword=Electron%E6%95%99%E7%A8%8B&from_source=web_search" target="_blank" rel="noopener">bilibili</a><br><a href="https://www.google.com.hk/search?q=mac+%E6%90%AD%E5%BB%BAElectron%E7%8E%AF%E5%A2%83&oq=mac+%E6%90%AD%E5%BB%BAElectron%E7%8E%AF%E5%A2%83&aqs=chrome..69i57.13096j0j4&sourceid=chrome&ie=UTF-8" target="_blank" rel="noopener">mac 搭建Electron环境</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.electronjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.w3cschool.cn/electronmanual/lz4y1ql3.
      
    
    </summary>
    
    
      <category term="Electron" scheme="http://iwantjingjing.com/categories/Electron/"/>
    
    
      <category term="Electron" scheme="http://iwantjingjing.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch的工作原理</title>
    <link href="http://iwantjingjing.com/2021/04/18/ElasticSearch%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://iwantjingjing.com/2021/04/18/ElasticSearch%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-18T11:14:32.000Z</published>
    <updated>2021-04-18T11:18:37.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p>当ElasticSearch的节点启动后，它会利用多播(multicast)(或者单播，如果用户更改了配置)寻找集群中的其它节点，并与之建立连接。</p><p>在集群中，一个节点被选举成主节点(master node)。这个节点负责管理集群的状态，当群集的拓扑结构改变时把索引分片分派到相应的节点上。</p><h2 id="ElasticSearch如何建立索引"><a href="#ElasticSearch如何建立索引" class="headerlink" title="ElasticSearch如何建立索引"></a>ElasticSearch如何建立索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">索引的不变性</span><br><span class="line">由于倒排索引的结构特性，在索引建立完成后对其进行修改将会非常复杂。再加上几层索引嵌套，更让索引的更新变成了几乎不可能的动作。</span><br><span class="line">所以索性设计成不可改变的：倒排索引被写入磁盘后是不可改变的，它永远不会修改。</span><br><span class="line"></span><br><span class="line">不变性有重要的价值：</span><br><span class="line">1.不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。</span><br><span class="line">2.一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。</span><br><span class="line">3.其它缓存(像filter缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化。</span><br><span class="line">4.写入单个大的倒排索引允许数据压缩，减少磁盘 I&#x2F;O 和 需要被缓存到内存的索引的使用量。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;启动过程&quot;&gt;&lt;a href=&quot;#启动过程&quot; class=&quot;headerlink&quot; title=&quot;启动过程&quot;&gt;&lt;/a&gt;启动过程&lt;/h2&gt;&lt;p&gt;当ElasticSearch的节点启动后，它会利用多播(multicast)(或者单播，如果用户更改了配置)寻找集群中的其它
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch背后的核心理念</title>
    <link href="http://iwantjingjing.com/2021/04/18/ElasticSearch%E8%83%8C%E5%90%8E%E7%9A%84%E6%A0%B8%E5%BF%83%E7%90%86%E5%BF%B5/"/>
    <id>http://iwantjingjing.com/2021/04/18/ElasticSearch%E8%83%8C%E5%90%8E%E7%9A%84%E6%A0%B8%E5%BF%83%E7%90%86%E5%BF%B5/</id>
    <published>2021-04-18T11:11:29.000Z</published>
    <updated>2021-04-18T11:13:03.926Z</updated>
    
    <content type="html"><![CDATA[<p>ElasticSearch是构建在极少数的几个概念之上的。ElasticSearch的开发团队希望它能够快速上手，可扩展性强。而且这些核心特性体现在ElasticSearch的各个方面。从架构的角度来看，这些主要特性是：</p><ul><li><p>开箱即用。安装好ElasticSearch后，所有参数的默认值都自动进行了比较合理的设置，基本不需要额外的调整。包括内置的发现机制(比如Field类型的自动匹配)和自动化参数配置。</p></li><li><p>天生集群。ElasticSearch默认工作在集群模式下。节点都将视为集群的一部分，而且在启动的过程中自动连接到集群中。</p></li><li><p>自动容错。ElasticSearch通过P2P网络进行通信，这种工作方式消除了单点故障。节点自动连接到集群中的其它机器，自动进行数据交换及以节点之间相互监控。索引分片</p></li><li><p>扩展性强。无论是处理能力和数据容量上都可以通过一种简单的方式实现扩展，即增添新的节点。</p></li><li><p>近实时搜索和版本控制。由于ElasticSearch天生支持分布式，所以延迟和不同节点上数据的短暂性不一致无可避免。ElasticSearch通过版本控制(versioning)的机制尽量减少问题的出现。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ElasticSearch是构建在极少数的几个概念之上的。ElasticSearch的开发团队希望它能够快速上手，可扩展性强。而且这些核心特性体现在ElasticSearch的各个方面。从架构的角度来看，这些主要特性是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;开箱即用。安装好El
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch概念-基础概念</title>
    <link href="http://iwantjingjing.com/2021/04/18/ElasticSearch%E6%A6%82%E5%BF%B5-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://iwantjingjing.com/2021/04/18/ElasticSearch%E6%A6%82%E5%BF%B5-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</id>
    <published>2021-04-18T11:03:01.000Z</published>
    <updated>2021-04-18T11:10:33.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h2><p>ElasticSearch把数据存放到一个或者多个索引(indices)中。如果用关系型数据库模型对比，索引(index)的地位与数据库实例(database)相当。索引存放和读取的基本单元是文档(Document)。我们也一再强调，ElasticSearch内部用Apache Lucene实现索引中数据的读写。读者应该清楚的是：在ElasticSearch中被视为单独的一个索引(index)，在Lucene中可能不止一个。这是因为在分布式体系中，ElasticSearch会用到分片(shards)和备份(replicas)机制将一个索引(index)存储多份。</p><h2 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h2><p>在ElasticSearch的世界中，文档(Document)是主要的存在实体(在Lucene中也是如此)。所有的ElasticSearch应用需求到最后都可以统一建模成一个检索模型：检索相关文档。文档(Document)由一个或者多个域(Field)组成，每个域(Field)由一个域名(此域名非彼域名)和一个或者多个值组成(有多个值的值称为多值域(multi-valued))。在ElasticSeach中，每个文档(Document)都可能会有不同的域(Field)集合；也就是说文档(Document)是没有固定的模式和统一的结构。文档(Document)之间保持结构的相似性即可(Lucene中的文档(Document)也秉持着相同的规定)。实际上，ElasticSearch中的文档(Document)就是Lucene中的文档(Document)。从客户端的角度来看，文档(Document)就是一个JSON对象(关于JSON格式的相关信息,请参看hhtp://en.wikipedia.org/wiki/JSON)。</p><h3 id="参数映射-Mapping"><a href="#参数映射-Mapping" class="headerlink" title="参数映射(Mapping)"></a>参数映射(Mapping)</h3><p>在  1.1节 认识Apache Lucene  中已经提到，所有的文档(Document)在存储之前都必须经过分析(analyze)流程。用户可以配置输入文本分解成Token的方式；哪些Token应该被过滤掉；或者其它的的处理流程，比如去除HTML标签。此外，ElasticSearch提供的各种特性，比如排序的相关信息。保存上述的配置信息，这就是参数映射(Mapping)在ElasticSearch中扮演的角色。尽管ElasticSearch可以根据域的值自动识别域的类型(field type)，在生产应用中，都是需要自己配置这些信息以避免一些奇的问题发生。要保证应用的可控性。</p><h2 id="文档类型-Type"><a href="#文档类型-Type" class="headerlink" title="文档类型(Type)"></a>文档类型(Type)</h2><p>每个文档在ElasticSearch中都必须设定它的类型。文档类型使得同一个索引中在存储结构不同文档时，只需要依据文档类型就可以找到对应的参数映射(Mapping)信息，方便文档的存取。</p><h2 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点(Node)"></a>节点(Node)</h2><p>单独一个ElasticSearch服务器实例称为一个节点。对于许多应用场景来说，部署一个单节点的ElasticSearch服务器就足够了。但是考虑到容错性和数据过载，配置多节点的ElasticSearch集群是明智的选择。</p><h2 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群(Cluster)"></a>集群(Cluster)</h2><p>集群是多个ElasticSearch节点的集合。这些节点齐心协力应对单个节点无法处理的搜索需求和数据存储需求。集群同时也是应对由于部分机器(节点)运行中断或者升级导致无法提供服务这一问题的利器。ElasticSearch提供的集群各个节点几乎是无缝连接(所谓无缝连接，即集群对外而言是一个整体，增加一个节点或者去掉一个节点对用户而言是透明的&lt;个人理解，仅供参考&gt;)。在ElasticSearch中配置一个集群非常简单，在我们看来，这是在与同类产品中竞争所体现出的最大优势。</p><h2 id="分片索引-Shard"><a href="#分片索引-Shard" class="headerlink" title="分片索引(Shard)"></a>分片索引(Shard)</h2><p>前面已经提到，集群能够存储超出单机容量的信息。为了实现这种需求，ElasticSearch把数据分发到多个存储Lucene索引的物理机上。这些Lucene索引称为分片索引，这个分发的过程称为索引分片(Sharding)。在ElasticSearch集群中，索引分片(Sharding)是自动完成的，而且所有分片索引(Shard)是作为一个整体呈现给用户的。需要注意的是，尽管索引分片这个过程是自动的，但是在应用中需要事先调整好参数。因为集群中分片的数量需要在索引创建前配置好，而且服务器启动后是无法修改的，至少目前无法修改。</p><h2 id="索引副本-Replica"><a href="#索引副本-Replica" class="headerlink" title="索引副本(Replica)"></a>索引副本(Replica)</h2><p>通过索引分片机制(Sharding)可以向ElasticSearch集群中导入超过单机容量的数据，客户端操作任意一个节点即可实现对集群数据的读写操作。当集群负载增长，用户搜索请求阻塞在单个节点上时，通过索引副本(Replica)机制就可以解决这个问题。索引副本(Replica)机制的的思路很简单：为索引分片创建一份新的拷贝，它可以像原来的主分片一样处理用户搜索请求。同时也顺便保证了数据的安全性。即如果主分片数据丢失，ElasticSearch通过索引副本使得数据不丢失。索引副本可以随时添加或者删除，所以用户可以在需要的时候动态调整其数量。</p><h2 id="时间之门-Gateway"><a href="#时间之门-Gateway" class="headerlink" title="时间之门(Gateway)"></a>时间之门(Gateway)</h2><p>在运行的过程中，ElasticSearch会收集集群的状态、索引的参数等信息。这些数据被存储在Gateway中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;索引-Index&quot;&gt;&lt;a href=&quot;#索引-Index&quot; class=&quot;headerlink&quot; title=&quot;索引(Index)&quot;&gt;&lt;/a&gt;索引(Index)&lt;/h2&gt;&lt;p&gt;ElasticSearch把数据存放到一个或者多个索引(indices)中。如果用关系型
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>谷粒商城分布式分布式基础概念</title>
    <link href="http://iwantjingjing.com/2021/04/18/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E5%88%86%E5%B8%83%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://iwantjingjing.com/2021/04/18/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E5%88%86%E5%B8%83%E5%BC%8F%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</id>
    <published>2021-04-18T10:46:12.000Z</published>
    <updated>2021-04-18T10:59:58.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h2><ul><li>Nacos注册中心</li><li>Nacos配置中心</li><li>Seata分布式事务</li><li>Sentinel服务容错</li><li>Feign远程调用&amp;负载均衡</li><li>Gateway网关</li><li>Sleuth服务追踪</li><li>Zipkin可视化追踪</li></ul><h2 id="应用监控"><a href="#应用监控" class="headerlink" title="应用监控"></a>应用监控</h2><ul><li>Prometheus</li><li>Grafana</li></ul><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是<br>浏览器对javascript施加的安全限制。</p><p>同源策略:是指协议，域名，端口都要相同，其中有一个不同都会产生跨域;</p><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><p>解决跨域-(一)使用nginx部署为同一域</p><p>解决跨域-(二)配置当次请求允许跨域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、添加响应头</span><br><span class="line">• Access-Control-Allow-Origin:支持哪些来源的请求跨域</span><br><span class="line">• Access-Control-Allow-Methods:支持哪些方法跨域</span><br><span class="line">• Access-Control-Allow-Credentials:跨域请求默认不包含cookie，设置为true可以包含 cookie</span><br><span class="line">• Access-Control-Expose-Headers:跨域请求暴露的字段</span><br><span class="line">• CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段: Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如 果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</span><br><span class="line">• Access-Control-Max-Age:表明该响应的有效时间为多少秒。在有效时间内，浏览器无 须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果 该首部字段的值超过了最大有效时间，将不会生效。</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分布式基础篇总结</p><p>• 1、分布式基础概念</p><p>• 微服务、注册中心、配置中心、远程调用、Feign、网关</p><p>• 2、基础开发</p><p>• SpringBoot2.0、SpringCloud、Mybatis-Plus、Vue组件化、阿里云对象存储</p><p>• 3、环境</p><p>• Vagrant、Linux、Docker、MySQL、Redis、逆向工程&amp;人人开源</p><p>• 4、开发规范</p><p>• 数据校验JSR303、全局异常处理、全局统一返回、全局跨域处理 • 枚举状态、业务状态码、VO与TO与PO划分、逻辑删除</p><p>• Lombok:@Data、@Slf4j</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务治理&quot;&gt;&lt;a href=&quot;#服务治理&quot; class=&quot;headerlink&quot; title=&quot;服务治理&quot;&gt;&lt;/a&gt;服务治理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Nacos注册中心&lt;/li&gt;
&lt;li&gt;Nacos配置中心&lt;/li&gt;
&lt;li&gt;Seata分布式事务&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>代码中特殊注释——TODO、FIXME、XXX、HACK</title>
    <link href="http://iwantjingjing.com/2021/04/14/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%B3%A8%E9%87%8A%E2%80%94%E2%80%94TODO%E3%80%81FIXME%E3%80%81XXX%E3%80%81HACK/"/>
    <id>http://iwantjingjing.com/2021/04/14/%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%B3%A8%E9%87%8A%E2%80%94%E2%80%94TODO%E3%80%81FIXME%E3%80%81XXX%E3%80%81HACK/</id>
    <published>2021-04-14T11:58:23.000Z</published>
    <updated>2021-04-14T12:08:35.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码中特殊注释——TODO、FIXME、XXX、HACK"><a href="#代码中特殊注释——TODO、FIXME、XXX、HACK" class="headerlink" title="代码中特殊注释——TODO、FIXME、XXX、HACK"></a>代码中特殊注释——TODO、FIXME、XXX、HACK</h1><h2 id="TODO-待办事项。若代码中有这个标识，则说明此处代码还未完成，待完成的功能会在说明中简略说明。"><a href="#TODO-待办事项。若代码中有这个标识，则说明此处代码还未完成，待完成的功能会在说明中简略说明。" class="headerlink" title="TODO 待办事项。若代码中有这个标识，则说明此处代码还未完成，待完成的功能会在说明中简略说明。"></a>TODO 待办事项。若代码中有这个标识，则说明此处代码还未完成，待完成的功能会在说明中简略说明。</h2><h2 id="XXX-此标识说明代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。"><a href="#XXX-此标识说明代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。" class="headerlink" title="XXX 此标识说明代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。"></a>XXX 此标识说明代码虽然实现了功能，但是实现的方法有待商榷，希望将来能改进，要改进的地方会在说明中简略说明。</h2><h2 id="HACK-英语翻译为砍，如果代码中有该标识，说明标识处代码是我们需要根据自己的需求去调整程序代码。"><a href="#HACK-英语翻译为砍，如果代码中有该标识，说明标识处代码是我们需要根据自己的需求去调整程序代码。" class="headerlink" title="HACK 英语翻译为砍，如果代码中有该标识，说明标识处代码是我们需要根据自己的需求去调整程序代码。"></a>HACK 英语翻译为砍，如果代码中有该标识，说明标识处代码是我们需要根据自己的需求去调整程序代码。</h2><h2 id="FIXME-可以拆解成短语，fix-me，意为修理我。若代码中有该标识，说明标识代码需要修改，甚至是错误的，不能工作，需要修复，如何修正会在说明中简略说明。"><a href="#FIXME-可以拆解成短语，fix-me，意为修理我。若代码中有该标识，说明标识代码需要修改，甚至是错误的，不能工作，需要修复，如何修正会在说明中简略说明。" class="headerlink" title="FIXME 可以拆解成短语，fix me，意为修理我。若代码中有该标识，说明标识代码需要修改，甚至是错误的，不能工作，需要修复，如何修正会在说明中简略说明。"></a>FIXME 可以拆解成短语，fix me，意为修理我。若代码中有该标识，说明标识代码需要修改，甚至是错误的，不能工作，需要修复，如何修正会在说明中简略说明。</h2><h2 id="NOTE-汝等凡人"><a href="#NOTE-汝等凡人" class="headerlink" title="NOTE 汝等凡人"></a>NOTE 汝等凡人</h2><p>Description of how the code works (when it isn’t self evident)</p><h2 id="BUG-丢锅埋雷挖坑"><a href="#BUG-丢锅埋雷挖坑" class="headerlink" title="BUG: 丢锅埋雷挖坑"></a>BUG: 丢锅埋雷挖坑</h2><p>There is a problem here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码中特殊注释——TODO、FIXME、XXX、HACK&quot;&gt;&lt;a href=&quot;#代码中特殊注释——TODO、FIXME、XXX、HACK&quot; class=&quot;headerlink&quot; title=&quot;代码中特殊注释——TODO、FIXME、XXX、HACK&quot;&gt;&lt;/a&gt;代码
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java后端线上问题排查常用命令</title>
    <link href="http://iwantjingjing.com/2021/04/10/Java%E5%90%8E%E7%AB%AF%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://iwantjingjing.com/2021/04/10/Java%E5%90%8E%E7%AB%AF%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-04-10T10:00:02.000Z</published>
    <updated>2021-04-10T10:06:13.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java后端线上问题排查常用命令收藏"><a href="#Java后端线上问题排查常用命令收藏" class="headerlink" title="Java后端线上问题排查常用命令收藏"></a>Java后端线上问题排查常用命令收藏</h1><pre><code>程序猿DD                                                                                       前天                 </code></pre><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>free是查看内存使用情况，包括物理内存、交换内存(swap)和内核缓冲区内存。</p><p>free -h -s 3表示每隔三秒输出一次内存情况，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[1014154@cc69dd4c5-4tdb5 ~]$ free</span><br><span class="line">total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:      119623656    43052220    45611364     4313760    30960072    70574408</span><br><span class="line">Swap:             0           0           0</span><br><span class="line">[1014154@cc69dd4c5-4tdb5 ~]$ free -h -s 3</span><br><span class="line">total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           114G         41G         43G        4.1G         29G         67G</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"></span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           114G         41G         43G        4.1G         29G         67G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><ul><li>Mem：是内存的使用情况。</li><li>Swap：是交换空间的使用情况。</li><li>total：系统总的可用物理内存和交换空间大小。</li><li>used：已经被使用的物理内存和交换空间。</li><li>free：还有多少物理内存和交换空间可用使用，是真正尚未被使用的物理内存数量。</li><li>shared：被共享使用的物理内存大小。</li><li>buff/cache：被 buffer（缓冲区） 和 cache（缓存） 使用的物理内存大小。</li><li>available：还可以被应用程序使用的物理内存大小，它是从应用程序的角度看到的可用内存数量，available ≈ free + buffer + cache。<br>交换空间(swap space)</li></ul><p>swap space 是磁盘上的一块区域，当系统物理内存吃紧时，Linux 会将内存中不常访问的数据保存到 swap 上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问 swap 上存储的内容时，再将 swap 上的数据加载到内存中，这就是常说的换出和换入。交换空间可以在一定程度上缓解内存不足的情况，但是它需要读写磁盘数据，所以性能不是很高。</p><h2 id="vmstat（推荐）"><a href="#vmstat（推荐）" class="headerlink" title="vmstat（推荐）"></a>vmstat（推荐）</h2><p>vmstat（VirtualMeomoryStatistics，虚拟内存统计）是Linux中监控内存的常用工具，可对操作系统的虚拟内存、进程、CPU等的整体情况进行监视，推荐使用。</p><p>vmstat 5 3表示每隔5秒统计一次，一共统计三次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1014154@cc69dd4c5-4tdb5 ~]$ vmstat 5 3</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line">r  b   swpd   free   buff  cache   si   so    bi    bo   </span><br><span class="line">in</span><br><span class="line">cs us sy id wa st</span><br><span class="line">8  0      0 45453212 374768 30763728    0    0    14    99    1    1 11 10 78  0  1</span><br><span class="line">10  0      0 45489232 374768 30763360    0    0     2  1275 95118 97908 13 11 75  0  1</span><br><span class="line">6  0      0 45452908 374768 30765148    0    0     0  3996 89924 92073 12 10 78  0  1</span><br></pre></td></tr></table></figure><h2 id="procs"><a href="#procs" class="headerlink" title="procs"></a>procs</h2><p>r：表示运行和等待CPU时间片的进程数（就是说多少个进程真的分配到CPU），这个值如果长期大于系统CPU个数，说明CPU不足，需要增加CPU。b：表示在等待资源的进程数，比如正在等待I/O或者内存交换等。</p><h2 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h2><p>swpd：表示切换到内存交换区的内存大小，即虚拟内存已使用的大小（单位KB），如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。free：表示当前空闲的物理内存。buff：表示缓冲大小，一般对块设备的读写才需要缓冲 Cache：表示缓存大小，一般作为文件系统进行缓冲，频繁访问的文件都会被缓存，如果cache值非常大说明缓存文件比较多，如果此时io中的bi比较小，说明文件系统效率比较好。</p><h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h2><p>si：表示数据由磁盘读入内存；通俗的讲就是每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。so：表示由内存写入磁盘，也就是由内存交换区进入内存的数据大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br></pre></td><td class="code"><pre><span class="line">!! 注意：一般情况下si、so的值都为0，如果si、so的值长期不为0，则说明系统内存不足，需要增加系统内存</span><br><span class="line">io</span><br><span class="line"></span><br><span class="line">bi：表示由块设备读入数据的总量，即读磁盘，单位kb&#x2F;s bo：表示写到块设备数据的总量，即写磁盘，单位kb&#x2F;s</span><br><span class="line">!! 注意：如果bi+bo的值过大，且wa值较大，则表示系统磁盘IO瓶颈。</span><br><span class="line">system</span><br><span class="line"></span><br><span class="line">in：表示某一时间间隔内观测到的每秒设备终端数。cs：表示每秒产生的上下文切换次数，这个值要越小越好，太大了，要考虑调低线程或者进程的数目。例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。</span><br><span class="line">!! 注意：这两个值越大，则由内核消耗的CPU就越多。</span><br><span class="line">CPU</span><br><span class="line"></span><br><span class="line">us：表示用户进程消耗的CPU时间百分比，us值越高，说明用户进程消耗CPU时间越多，如果长期大于50%，则需要考虑优化程序或者算法。sy：表示系统内核进程消耗的CPU时间百分比，一般来说us+sy应该小于80%，如果大于80%，说明可能存在CPU瓶颈。id：表示CPU处在空间状态的时间百分比。wa：表示IP等待所占用的CPU时间百分比，wa值越高，说明I&#x2F;O等待越严重，根据经验wa的参考值为20%，如果超过20%，说明I&#x2F;O等待严重，引起I&#x2F;O等待的原因可能是磁盘大量随机读写造成的，也可能是磁盘或者监控器的贷款瓶颈（主要是块操作）造成的。</span><br><span class="line">sar</span><br><span class="line"></span><br><span class="line">sar和free类似sar -r 3每隔三秒输出一次内存信息：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># sar -r 3</span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (localhost.localdomain)    2020年04月28日  _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">15时40分10秒 kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">15时40分13秒    106800   1314960     92.49      2144    573248   4110864    116.82    563664    498888        36</span><br><span class="line">15时40分16秒    106816   1314944     92.49      2144    573248   4110864    116.82    563668    498888        36</span><br><span class="line">15时40分19秒    106816   1314944     92.49      2144    573248   4110864    116.82    563668    498888        36</span><br><span class="line">CPU瓶颈</span><br><span class="line"></span><br><span class="line">查看机器cpu核数</span><br><span class="line"></span><br><span class="line">CPU总核数 &#x3D; 物理CPU个数 * 每颗物理CPU的核数</span><br><span class="line">总逻辑CPU数 &#x3D; 物理CPU个数 * 每颗物理CPU的核数 * 超线程数</span><br><span class="line">查看CPU信息（型号）</span><br><span class="line"></span><br><span class="line">[1014154@cc69dd4c5-4tdb5 ~]$ cat &#x2F;proc&#x2F;cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br><span class="line">32  Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz</span><br><span class="line">查看物理CPU个数</span><br><span class="line"></span><br><span class="line">[1014154@cc69dd4c5-4tdb5 ~]$ cat &#x2F;proc&#x2F;cpuinfo| grep</span><br><span class="line">&quot;physical id&quot;</span><br><span class="line">| sort| uniq| wc -l</span><br><span class="line">16</span><br><span class="line">查看每个物理CPU中core的个数(即核数)</span><br><span class="line"></span><br><span class="line">[1014154@cc69dd4c5-4tdb5 ~]$ cat &#x2F;proc&#x2F;cpuinfo| grep</span><br><span class="line">&quot;cpu cores&quot;</span><br><span class="line">| uniq</span><br><span class="line">cpu cores       : 2</span><br><span class="line">查看逻辑CPU的个数</span><br><span class="line"></span><br><span class="line">[1014154@cc69dd4c5-4tdb5 ~]$ cat &#x2F;proc&#x2F;cpuinfo| grep</span><br><span class="line">&quot;processor&quot;</span><br><span class="line">| wc -l</span><br><span class="line">32</span><br><span class="line">top</span><br><span class="line"></span><br><span class="line">在Linux内核的操作系统中，进程是根据虚拟运行时间（由进程优先级、nice值加上实际占用的CPU时间进行动态计算得出）进行动态调度的。在执行进程时，需要从用户态转换到内核态，用户空间不能直接操作内核空间的函数。通常要利用系统调用来完成进程调度，而用户空间到内核空间的转换通常是通过软中断来完成的。例如要进行磁盘操作，用户态需要通过系统调用内核的磁盘操作指令，所以CPU消耗的时间被切分成用户态CPU消耗、系统（内核） CPU 消耗，以及磁盘操作 CPU 消耗。执行进程时，需要经过一系列的操作，进程首先在用户态执行，在执行过程中会进行进程优先级的调整（nice），通过系统调用到内核，再通过内核调用，硬中断、软中断，让硬件执行任务。执行完成之后，再从内核态返回给系统调用，最后系统调用将结果返回给用户态的进程。</span><br><span class="line">top可以查看CPU总体消耗，包括分项消耗，如User，System，Idle，nice等。Shift + H显示java线程；Shift + M按照内存使用排序；Shift + P按照CPU使用时间（使用率）排序；Shift + T按照CPU累积使用时间排序；多核CPU，进入top视图1，可以看到各各CPU的负载情况。</span><br><span class="line">top - 15:24:11 up 8 days,  7:52,  1 user,  load average: 5.73, 6.85, 7.33</span><br><span class="line">Tasks:  17 total,   1 running,  16 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s): 13.9 us,  9.2 sy,  0.0 ni, 76.1 id,  0.1 wa,  0.0 hi,  0.1 si,  0.7 st</span><br><span class="line">KiB Mem : 11962365+total, 50086832 free, 38312808 used, 31224016 buff&#x2F;cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used. 75402760 avail Mem</span><br><span class="line"></span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">300 ymmapp    20   0 17.242g 1.234g  14732 S   2.3  1.1   9:40.38 java</span><br><span class="line">1 root      20   0   15376   1988   1392 S   0.0  0.0   0:00.06 sh</span><br><span class="line">11 root      20   0  120660  11416   1132 S   0.0  0.0   0:04.94 python</span><br><span class="line">54 root      20   0   85328   2240   1652 S   0.0  0.0   0:00.00 su</span><br><span class="line">55 ymmapp    20   0   17432   1808   1232 S   0.0  0.0   0:00.00 bash</span><br><span class="line">56 ymmapp    20   0   17556   2156   1460 S   0.0  0.0   0:00.03 control.sh</span><br><span class="line">57 ymmapp    20   0   11880    740    576 S   0.0  0.0   0:00.00 tee</span><br><span class="line">115 ymmapp    20   0   17556   2112   1464 S   0.0  0.0   0:00.02 control_new_war</span><br><span class="line">133 root      20   0  106032   4240   3160 S   0.0  0.0   0:00.03 sshd</span><br><span class="line">134 ymmapp    20   0   17080   6872   3180 S   0.0  0.0   0:01.82 ops-updater</span><br><span class="line">147 ymmapp    20   0   17956   2636   1544 S   0.0  0.0   0:00.07 control.sh</span><br><span class="line">6538 ymmapp    20   0  115656  10532   3408 S   0.0  0.0   0:00.46 beidou-agent</span><br><span class="line">6785 ymmapp    20   0 2572996  22512   2788 S   0.0  0.0   0:03.44 gatherinfo4dock</span><br><span class="line">29241 root      20   0  142148   5712   4340 S   0.0  0.0   0:00.04 sshd</span><br><span class="line">29243 1014154   20   0  142148   2296    924 S   0.0  0.0   0:00.00 sshd</span><br><span class="line">29244 1014154   20   0   15208   2020   1640 S   0.0  0.0   0:00.00 bash</span><br><span class="line">32641 1014154   20   0   57364   2020   1480 R   0.0  0.0   0:00.00 top</span><br><span class="line">第一行：15:24:11 up 8 days, 7:52, 1 user, load average: 5.73, 6.85, 7.33：15:24:11 系统时间，up 8 days 运行时间，1 user 当前登录用户数，load average 负载均衡情况，分别表示1分钟，5分钟，15分钟负载情况。</span><br><span class="line">第二行：Tasks: 17 total, 1 running, 16 sleeping, 0 stopped, 0 zombie：总进程数17，运行数1，休眠 16，停止0，僵尸进程0。</span><br><span class="line">第三行：%Cpu(s): 13.9 us, 9.2 sy, 0.0 ni, 76.1 id, 0.1 wa, 0.0 hi, 0.1 si, 0.7 st：用户空间CPU占比13.9%，内核空间CPU占比9.2%，改变过优先级的进程CPU占比0%，空闲CPU占比76.1，IO等待占用CPU占比0.1%，硬中断占用CPU占比0%，软中断占用CPU占比0.1%,当前VM中的cpu 时钟被虚拟化偷走的比例0.7%。</span><br><span class="line">第四和第五行表示内存和swap区域的使用情况。</span><br><span class="line">第七行表示：</span><br><span class="line">* PID: 进程id</span><br><span class="line">* USER:进程所有者</span><br><span class="line">* PR:进程优先级</span><br><span class="line">* NI:nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line">* VIRT:虚拟内存，进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</span><br><span class="line">* RES:常驻内存，进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</span><br><span class="line">* SHR:共享内存，共享内存大小，单位kb</span><br><span class="line">* S:进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</span><br><span class="line">* %CPU:上次更新到现在的CPU时间占用百分比</span><br><span class="line">* %MEM:进程使用的物理内存百分比</span><br><span class="line">* TIME+:进程使用的CPU时间总计，单位1&#x2F;100秒</span><br><span class="line">* COMMAND:进程名称（命令名&#x2F;命令行）</span><br><span class="line">  计算在cpu load里面的uninterruptedsleep的任务数量</span><br><span class="line"></span><br><span class="line">top -b -n 1 | awk</span><br><span class="line">&#39;&#123;if (NR&lt;&#x3D;7)print;else if($8&#x3D;&#x3D;&quot;D&quot;)&#123;print;count++&#125;&#125;END&#123;print &quot;Total status D:&quot;count&#125;&#39;</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># top -b -n 1 | awk &#39;&#123;if (NR&lt;&#x3D;7)print;else if($8&#x3D;&#x3D;&quot;D&quot;)&#123;print;count++&#125;&#125;END&#123;print &quot;Total status D:&quot;count&#125;&#39;</span><br><span class="line">top - 15:35:05 up 1 day, 26 min,  3 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks: 225 total,   1 running, 224 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  2.5 us, 10.0 sy,  0.0 ni, 87.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  1421760 total,   104516 free,   777344 used,   539900 buff&#x2F;cache</span><br><span class="line">KiB Swap:  2097148 total,  2071152 free,    25996 used.   456028 avail Mem</span><br><span class="line"></span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">Total status D:</span><br><span class="line">sar</span><br><span class="line"></span><br><span class="line">通过sar -u 3可以查看CUP总体消耗占比：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># sar -u 3</span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (localhost.localdomain)    2020年05月01日  _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">15时18分03秒     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">15时18分06秒     all      0.00      0.00      0.17      0.00      0.00     99.83</span><br><span class="line">15时18分09秒     all      0.00      0.00      0.17      0.00      0.00     99.83</span><br><span class="line">15时18分12秒     all      0.17      0.00      0.17      0.00      0.00     99.66</span><br><span class="line">15时18分15秒     all      0.00      0.00      0.00      0.00      0.00    100.00</span><br><span class="line">15时18分18秒     all      0.00      0.00      0.00      0.00      0.00    100.00</span><br><span class="line">* %user：用户空间的CPU使用。</span><br><span class="line">* %nice：改变过优先级的进程的CPU使用率。</span><br><span class="line">* %system：内核空间的CPU使用率。</span><br><span class="line">* %iowait：CPU等待IO的百分比 。</span><br><span class="line">* %steal：虚拟机的虚拟机CPU使用的CPU。</span><br><span class="line">* %idle：空闲的CPU。</span><br><span class="line">  在以上的显示当中，主要看%iowait和%idle：</span><br><span class="line">* 若 %iowait的值过高，表示硬盘存在I&#x2F;O瓶颈；</span><br><span class="line">* 若 %idle的值高但系统响应慢时，有可能是 CPU 等待分配内存，此时应加大内存容量；</span><br><span class="line">* 若 %idle的值持续低于 10，则系统的 CPU 处理能力相对较低，表明系统中最需要解决的资源是 CPU；</span><br><span class="line">  定位线上最耗CPU的线程</span><br><span class="line"></span><br><span class="line">准备工作</span><br><span class="line"></span><br><span class="line">启动一个程序。arthas-demo是一个简单的程序，每隔一秒生成一个随机数，再执行质因数分解，并打印出分解结果。</span><br><span class="line">curl -O https:&#x2F;&#x2F;alibaba.github.io&#x2F;arthas&#x2F;arthas-demo.jar</span><br><span class="line">java -jar arthas-demo.jar</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># curl -O https:&#x2F;&#x2F;alibaba.github.io&#x2F;arthas&#x2F;arthas-demo.jar</span><br><span class="line">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  3743  100  3743    0     0   3022      0  0:00:01  0:00:01 --:--:--  3023</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># java -jar arthas-demo.jar</span><br><span class="line">1813&#x3D;7*7*37</span><br><span class="line">illegalArgumentCount:  1, number is: -180005, need &gt;&#x3D; 2</span><br><span class="line">illegalArgumentCount:  2, number is: -111175, need &gt;&#x3D; 2</span><br><span class="line">18505&#x3D;5*3701</span><br><span class="line">166691&#x3D;7*23813</span><br><span class="line">105787&#x3D;11*59*163</span><br><span class="line">60148&#x3D;2*2*11*1367</span><br><span class="line">196983&#x3D;3*3*43*509</span><br><span class="line">illegalArgumentCount:  3, number is: -173479, need &gt;&#x3D; 2</span><br><span class="line">illegalArgumentCount:  4, number is: -112840, need &gt;&#x3D; 2</span><br><span class="line">39502&#x3D;2*19751</span><br><span class="line">....</span><br><span class="line">通过top命令找到最耗时的进程</span><br><span class="line"></span><br><span class="line">[root@localhost ~]</span><br><span class="line"># top</span><br><span class="line">top - 11:11:05 up 20:02,  3 users,  load average: 0.09, 0.07, 0.05</span><br><span class="line">Tasks: 225 total,   1 running, 224 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.0 us,  0.7 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  1421760 total,   135868 free,   758508 used,   527384 buff&#x2F;cache</span><br><span class="line">KiB Swap:  2097148 total,  2070640 free,    26508 used.   475852 avail Mem</span><br><span class="line">Change delay from 3.0 to</span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">98344 root      20   0 2422552  23508  12108 S   0.7  1.7   0:00.32 java</span><br><span class="line">1 root      20   0  194100   6244   3184 S   0.0  0.4   0:20.41 systemd</span><br><span class="line">2 root      20   0       0      0      0 S   0.0  0.0   0:00.12 kthreadd</span><br><span class="line">4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker&#x2F;0:0H</span><br><span class="line">6 root      20   0       0      0      0 S   0.0  0.0   0:20.25 ksoftirqd&#x2F;0</span><br><span class="line">找到进程号是98344。</span><br><span class="line">找到进程中最耗CUP的线程</span><br><span class="line"></span><br><span class="line">使用ps -Lp #pid cu命令，查看某个进程中的线程CPU消耗排序：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># ps -Lp 98344 cu</span><br><span class="line">USER        PID    LWP %CPU NLWP %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root      98344  98344  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:00 java</span><br><span class="line">root      98344  98345  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:04 java</span><br><span class="line">root      98344  98346  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:01 VM Thread</span><br><span class="line">root      98344  98347  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:00 Reference Handl</span><br><span class="line">root      98344  98348  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:00 Finalizer</span><br><span class="line">root      98344  98349  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:00 Signal Dispatch</span><br><span class="line">root      98344  98350  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:05 C2 CompilerThre</span><br><span class="line">root      98344  98351  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:00 C1 CompilerThre</span><br><span class="line">root      98344  98352  0.0   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:00 Service Thread</span><br><span class="line">root      98344  98353  0.1   10  4.1 2422552 59060 pts&#x2F;0   Sl+  11:09   0:19 VM Periodic Tas</span><br><span class="line">看TIME列可以看出那个线程耗费CUP多，根据LWP列可以看到线程的ID号，但是需要转换成16进制才可以查询线程堆栈信息。</span><br><span class="line">获取线程id的十六进制码</span><br><span class="line"></span><br><span class="line">使用printf &#39;%x\n&#39; 98345命令做进制转换：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># printf &#39;%x\n&#39; 98345</span><br><span class="line">18029</span><br><span class="line">查看线程堆栈信息</span><br><span class="line"></span><br><span class="line">使用jstack获取堆栈信息jstack 98344 | grep -A 10 18029：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># jstack 98344 | grep -A 10 18029</span><br><span class="line">&quot;main&quot;</span><br><span class="line"></span><br><span class="line">#1 prio&#x3D;5 os_prio&#x3D;0 tid&#x3D;0x00007fb88404b800 nid&#x3D;0x18029 waiting on condition [0x00007fb88caab000]</span><br><span class="line">java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span><br><span class="line">at demo.MathGame.main(MathGame.java:17)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot;</span><br><span class="line">os_prio&#x3D;0 tid&#x3D;0x00007fb8840f2800 nid&#x3D;0x1802a runnable</span><br><span class="line"></span><br><span class="line">&quot;VM Periodic Task Thread&quot;</span><br><span class="line">os_prio&#x3D;0 tid&#x3D;0x00007fb884154000 nid&#x3D;0x18031 waiting on condition</span><br><span class="line">通过命令我们可以看到这个线程的对应的耗时代码是在demo.MathGame.main(MathGame.java:17)</span><br><span class="line">grep -C 5 foo file 显示file文件里匹配foo字串那行以及上下5行</span><br><span class="line">grep -B 5 foo file 显示foo及前5行</span><br><span class="line">grep -A 5 foo file 显示foo及后5行</span><br><span class="line">网络瓶颈</span><br><span class="line"></span><br><span class="line">定位丢包，错包情况</span><br><span class="line"></span><br><span class="line">watch more &#x2F;proc&#x2F;net&#x2F;dev用于定位丢包，错包情况，以便看网络瓶颈，重点关注drop(包被丢弃)和网络包传送的总量，不要超过网络上限：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># watch -n 2 more &#x2F;proc&#x2F;net&#x2F;dev</span><br><span class="line">Every 2.0s: more &#x2F;proc&#x2F;net&#x2F;dev                                                                                                                                                   Fri May  1 17:16:55 2020</span><br><span class="line"></span><br><span class="line">Inter-|   Receive                                                |  Transmit</span><br><span class="line">face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed</span><br><span class="line">lo:   10025     130    0    0    0     0          0         0    10025     130    0    0    0     0       0          0</span><br><span class="line">ens33: 759098071  569661    0    0    0     0          0         0 19335572  225551    0    0    0     0       0          0</span><br><span class="line">* 最左边的表示接口的名字，Receive表示收包，Transmit表示发送包；</span><br><span class="line">* bytes：表示收发的字节数；</span><br><span class="line">* packets：表示收发正确的包量；</span><br><span class="line">* errs：表示收发错误的包量；</span><br><span class="line">* drop：表示收发丢弃的包量；</span><br><span class="line">  查看路由经过的地址</span><br><span class="line"></span><br><span class="line">traceroute ip可以查看路由经过的地址，常用来统计网络在各个路由区段的耗时，如：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># traceroute 14.215.177.38</span><br><span class="line">traceroute to 14.215.177.38 (14.215.177.38), 30 hops max, 60 byte packets</span><br><span class="line">1  CD-HZTK5H2.mshome.net (192.168.137.1)  0.126 ms * *</span><br><span class="line">2  * * *</span><br><span class="line">3  10.250.112.3 (10.250.112.3)  12.587 ms  12.408 ms  12.317 ms</span><br><span class="line">4  172.16.227.230 (172.16.227.230)  2.152 ms  2.040 ms  1.956 ms</span><br><span class="line">5  172.16.227.202 (172.16.227.202)  11.884 ms  11.746 ms  12.692 ms</span><br><span class="line">6  172.16.227.65 (172.16.227.65)  2.665 ms  3.143 ms  2.923 ms</span><br><span class="line">7  171.223.206.217 (171.223.206.217)  2.834 ms  2.752 ms  2.654 ms</span><br><span class="line">8  182.150.18.205 (182.150.18.205)  5.145 ms  5.815 ms  5.542 ms</span><br><span class="line">9  110.188.6.33 (110.188.6.33)  3.514 ms 171.208.199.185 (171.208.199.185)  3.431 ms 171.208.199.181 (171.208.199.181)  10.768 ms</span><br><span class="line">10  202.97.29.17 (202.97.29.17)  29.574 ms 202.97.30.146 (202.97.30.146)  32.619 ms *</span><br><span class="line">11  113.96.5.126 (113.96.5.126)  36.062 ms 113.96.5.70 (113.96.5.70)  35.940 ms 113.96.4.42 (113.96.4.42)  45.859 ms</span><br><span class="line">12  90.96.135.219.broad.fs.gd.dynamic.163data.com.cn (219.135.96.90)  35.680 ms  35.468 ms  35.304 ms</span><br><span class="line">13  14.215.32.102 (14.215.32.102)  35.135 ms 14.215.32.110 (14.215.32.110)  35.613 ms 14.29.117.242 (14.29.117.242)  54.712 ms</span><br><span class="line">14  * 14.215.32.134 (14.215.32.134)  49.518 ms 14.215.32.122 (14.215.32.122)  47.652 ms</span><br><span class="line">15  * * *</span><br><span class="line">...</span><br><span class="line">查看网络错误</span><br><span class="line"></span><br><span class="line">netstat -i可以查看网络错误：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># netstat -i</span><br><span class="line">Kernel Interface table</span><br><span class="line">Iface             MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg</span><br><span class="line">ens33            1500   570291      0      0 0        225897      0      0      0 BMRU</span><br><span class="line">lo              65536      130      0      0 0           130      0      0      0 LRU</span><br><span class="line">* Iface: 网络接口名称;</span><br><span class="line">* MTU: 最大传输单元，它限制了数据帧的最大长度，不同的网络类型都有一个上限值，如：以太网的MTU是1500；</span><br><span class="line">* RX-OK：接收时，正确的数据包数。</span><br><span class="line">* RX-ERR：接收时，产生错误的数据包数。</span><br><span class="line">* RX-DRP：接收时，丢弃的数据包数。</span><br><span class="line">* RX-OVR：接收时，由于过速（在数据传输中，由于接收设备不能接收按照发送速率传送来的数据而使数据丢失）而丢失的数据包数。</span><br><span class="line">* TX-OK：发送时，正确的数据包数。</span><br><span class="line">* TX-ERR：发送时，产生错误的数据包数。</span><br><span class="line">* TX-DRP：发送时，丢弃的数据包数。</span><br><span class="line">* TX-OVR：发送时，由于过速而丢失的数据包数。</span><br><span class="line">* Flg：标志，B 已经设置了一个广播地址。L 该接口是一个回送设备。M 接收所有数据包（混乱模式）。N 避免跟踪。O 在该接口上，禁用ARP。P 这是一个点到点链接。R 接口正在运行。U 接口处于“活动”状态。</span><br><span class="line">  包的重传率</span><br><span class="line"></span><br><span class="line">cat &#x2F;proc&#x2F;net&#x2F;snmp用来查看和分析240秒内网络包量，流量，错包，丢包。通过RetransSegs和OutSegs来计算重传率tcpetr&#x3D;RetransSegs&#x2F;OutSegs。</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># cat &#x2F;proc&#x2F;net&#x2F;snmp</span><br><span class="line">Ip: Forwarding DefaultTTL InReceives InHdrErrors InAddrErrors ForwDatagrams InUnknownProtos InDiscards InDelivers OutRequests OutDiscards OutNoRoutes ReasmTimeout ReasmReqds ReasmOKs ReasmFails FragOKs FragFails FragCreates</span><br><span class="line">Ip: 1 64 241708 0 0 0 0 0 238724 225517 15 0 0 0 0 0 0 0 0</span><br><span class="line">Icmp: InMsgs InErrors InCsumErrors InDestUnreachs InTimeExcds InParmProbs InSrcQuenchs InRedirects InEchos InEchoReps InTimestamps InTimestampReps InAddrMasks InAddrMaskReps OutMsgs OutErrors OutDestUnreachs OutTimeExcds OutParmProbs OutSrcQuenchs OutRedirects OutEchos OutEchoReps OutTimestamps OutTimestampReps OutAddrMasks OutAddrMaskReps</span><br><span class="line">Icmp: 149 0 0 50 99 0 0 0 0 0 0 0 0 0 147 0 147 0 0 0 0 0 0 0 0 0 0</span><br><span class="line">IcmpMsg: InType3 InType11 OutType3</span><br><span class="line">IcmpMsg: 50 99 147</span><br><span class="line">Tcp: RtoAlgorithm RtoMin RtoMax MaxConn ActiveOpens PassiveOpens AttemptFails EstabResets CurrEstab InSegs OutSegs RetransSegs InErrs OutRsts InCsumErrors</span><br><span class="line">Tcp: 1 200 120000 -1 376 6 0 0 4 236711 223186 292 0 4 0</span><br><span class="line">Udp: InDatagrams NoPorts InErrors OutDatagrams RcvbufErrors SndbufErrors InCsumErrors</span><br><span class="line">Udp: 1405 438 0 1896 0 0 0</span><br><span class="line">UdpLite: InDatagrams NoPorts InErrors OutDatagrams RcvbufErrors SndbufErrors InCsumErrors</span><br><span class="line">UdpLite: 0 0 0 0 0 0 0</span><br><span class="line">重传率&#x3D;292&#x2F;223186≈0.13%</span><br><span class="line">* 平均每秒新增TCP连接数：通过&#x2F;proc&#x2F;net&#x2F;snmp文件得到最近240秒内PassiveOpens的增量，除以240得到每秒的平均增量；</span><br><span class="line">* 机器的TCP连接数 ：通过&#x2F;proc&#x2F;net&#x2F;snmp文件的CurrEstab得到TCP连接数；</span><br><span class="line">* 平均每秒的UDP接收数据报：通过&#x2F;proc&#x2F;net&#x2F;snmp文件得到最近240秒内InDatagrams的增量，除以240得到平均每秒的UDP接收数据报；</span><br><span class="line">* 平均每秒的UDP发送数据报：通过&#x2F;proc&#x2F;net&#x2F;snmp文件得到最近240秒内OutDatagrams的增量，除以240得到平均每秒的UDP发送数据报；</span><br><span class="line">  磁盘瓶颈</span><br><span class="line"></span><br><span class="line">查磁盘空间</span><br><span class="line"></span><br><span class="line">查看磁盘剩余空间</span><br><span class="line"></span><br><span class="line">查看磁盘剩余空间使用df -hl命令：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># df -hl</span><br><span class="line">文件系统                       容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs                       678M     0  678M    0% &#x2F;dev</span><br><span class="line">tmpfs                          695M     0  695M    0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs                          695M   28M  667M    4% &#x2F;run</span><br><span class="line">tmpfs                          695M     0  695M    0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;mapper&#x2F;centos_aubin-root   27G  5.6G   22G   21% &#x2F;</span><br><span class="line">&#x2F;dev&#x2F;sda1                     1014M  211M  804M   21% &#x2F;boot</span><br><span class="line">查看磁盘已使用空间</span><br><span class="line"></span><br><span class="line">du -sh命令是查看磁盘已使用空间的情况，这里的“已使用的磁盘空间”意思是指定的文件下的整个文件层次结构所使用的空间，在没给定参数的情况下，du报告当前目录所使用的磁盘空间。其实就是显示文件或目录所占用的磁盘空间的情况：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># du -sh</span><br><span class="line">64K</span><br><span class="line">* -h：输出文件系统分区使用的情况，例如：10KB，10MB，10GB等。</span><br><span class="line">* -s：显示文件或整个目录的大小，默认单位是KB。</span><br><span class="line">  !! du的详细信息可以通过 man du查看。</span><br><span class="line">  查看磁盘读写情况</span><br><span class="line"></span><br><span class="line">查看磁盘总体读写情况</span><br><span class="line"></span><br><span class="line">通iostat查看磁盘总体的读写情况：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># iostat</span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (localhost.localdomain)    2020年05月02日  _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">0.17    0.00    0.20    0.46    0.00   99.17</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read&#x2F;s    kB_wrtn&#x2F;s    kB_read    kB_wrtn</span><br><span class="line">sda               1.56        30.45        39.61    4659620    6060644</span><br><span class="line">scd0              0.00         0.02         0.00       3102          0</span><br><span class="line">dm-0              1.96        30.01        38.42    4591998    5878155</span><br><span class="line">dm-1              0.09         0.09         0.30      13840      45328</span><br><span class="line">* tps：该设备每秒的传输次数。</span><br><span class="line">* kB_read&#x2F;s：每秒从设备（drive expressed）读取的数据量；</span><br><span class="line">* kB_wrtn&#x2F;s：每秒向设备（drive expressed）写入的数据量；</span><br><span class="line">* kB_read：读取的总数据量；</span><br><span class="line">* kB_wrtn：写入的总数量数据量；</span><br><span class="line">  查看磁盘详细读写情况</span><br><span class="line"></span><br><span class="line">通过iostat -x 1 3可以看到磁盘详细读写情况，没隔一秒输出一次一共输出3次，当看到I&#x2F;O等待时间所占CPU时间的比重很高的时候，首先要检查的就是机器是否正在大量使用交换空间，同时关注iowait占比cpu的消耗是否很大，如果大说明磁盘存在大的瓶颈，同时关注await，表示磁盘的响应时间以便小于5ms：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># iostat -x 1 3</span><br><span class="line">Linux 3.10.0-1062.el7.x86_64 (localhost.localdomain)    2020年05月02日  _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">0.17    0.00    0.20    0.46    0.00   99.16</span><br><span class="line"></span><br><span class="line">Device:         rrqm&#x2F;s   wrqm&#x2F;s     r&#x2F;s     w&#x2F;s    rkB&#x2F;s    wkB&#x2F;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">sda               0.01     0.49    0.63    0.95    30.59    39.78    89.58     0.34  214.23   49.16  323.48   8.55   1.34</span><br><span class="line">scd0              0.00     0.00    0.00    0.00     0.02     0.00    98.48     0.00    1.21    1.21    0.00   0.95   0.00</span><br><span class="line">dm-0              0.00     0.00    0.62    1.35    30.15    38.59    69.70     0.91  460.67   49.12  648.54   6.66   1.31</span><br><span class="line">dm-1              0.00     0.00    0.02    0.07     0.09     0.30     8.52     0.04  442.74   95.43  521.17   6.91   0.06</span><br><span class="line">avg-cpu表示总体cpu使用情况统计信息，对于多核cpu，这里为所有cpu的平均值：</span><br><span class="line">* %user：CPU处在用户模式下的时间百分比。</span><br><span class="line">* %nice：CPU处在带NICE值的用户模式下的时间百分比。</span><br><span class="line">* %system：CPU处在系统模式下的时间百分比。</span><br><span class="line">* %iowait：CPU等待输入输出完成时间的百分比，如果%iowait的值过高，表示硬盘存在I&#x2F;O瓶颈。</span><br><span class="line">* %steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</span><br><span class="line">* %idle：CPU空闲时间百分比，如果%idle值高，表示CPU较空闲；如果%idle值高但系统响应慢时，可能是CPU等待分配内存，应加大内存容量；如果%idle值持续低于10，表明CPU处理能力相对较低，系统中最需要解决的资源是CPU。。</span><br><span class="line">  Device表示设备信息：</span><br><span class="line">* rrqm&#x2F;s：每秒对该设备的读请求被合并次数，文件系统会对读取同块(block)的请求进行合并</span><br><span class="line">* wrqm&#x2F;s：每秒对该设备的写请求被合并次数</span><br><span class="line">* r&#x2F;s：每秒完成的读次数</span><br><span class="line">* w&#x2F;s：每秒完成的写次数</span><br><span class="line">* rkB&#x2F;s：每秒读数据量(kB为单位)</span><br><span class="line">* wkB&#x2F;s：每秒写数据量(kB为单位)</span><br><span class="line">* avgrq-sz：平均每次IO操作的数据量(扇区数为单位)</span><br><span class="line">* avgqu-sz：平均等待处理的IO请求队列长度</span><br><span class="line">* await：平均每次IO请求等待时间(包括等待时间和处理时间，毫秒为单位)</span><br><span class="line">* svctm：平均每次IO请求的处理时间(毫秒为单位)</span><br><span class="line">* %util：一秒中有百分之多少的时间用于 I&#x2F;O如果%util接近100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷。idle小于70% IO压力就较大了，一般读取速度有较多的wait。</span><br><span class="line">  !! iostat -xmd 1 3：新增m选项可以在输出是使用M为单位。</span><br><span class="line">  查看最耗IO的进程</span><br><span class="line"></span><br><span class="line">一般先通过iostat查看是否存在io瓶颈，再使用iotop命令来定位那个进程最耗费IO：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># iotop</span><br><span class="line">Total DISK READ :       0.00 B&#x2F;s | Total DISK WRITE :       0.00 B&#x2F;s</span><br><span class="line">Actual DISK READ:       0.00 B&#x2F;s | Actual DISK WRITE:       0.00 B&#x2F;s</span><br><span class="line">TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line">123931 be&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.02 % [kworker&#x2F;1:30]</span><br><span class="line">94208 be&#x2F;4 xiaolyuh    0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % nautilus-desktop --force [gmain]</span><br><span class="line">1 be&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % systemd --system --deserialize 62</span><br><span class="line">2 be&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % [kthreadd]</span><br><span class="line">94211 be&#x2F;4 xiaolyuh    0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % gvfsd-trash --spawner :1.4 &#x2F;org&#x2F;gtk&#x2F;gvfs&#x2F;exec_spaw&#x2F;0</span><br><span class="line">4 be&#x2F;0 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % [kworker&#x2F;0:0H]</span><br><span class="line">6 be&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % [ksoftirqd&#x2F;0]</span><br><span class="line">7 rt&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % [migration&#x2F;0]</span><br><span class="line">8 be&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % [rcu_bh]</span><br><span class="line">9 be&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % [rcu_sched]</span><br><span class="line">10 be&#x2F;0 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % [lru-add-drain]</span><br><span class="line">...</span><br><span class="line">通过iotop -p pid可以查看单个进程的IO情况：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># iotop -p 124146</span><br><span class="line">Total DISK READ :       0.00 B&#x2F;s | Total DISK WRITE :       0.00 B&#x2F;s</span><br><span class="line">Actual DISK READ:       0.00 B&#x2F;s | Actual DISK WRITE:       0.00 B&#x2F;s</span><br><span class="line">TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line">124146 be&#x2F;4 root        0.00 B&#x2F;s    0.00 B&#x2F;s  0.00 %  0.00 % java -jar arthas-demo.jar</span><br><span class="line">应用瓶颈</span><br><span class="line"></span><br><span class="line">查看某个进程的PID</span><br><span class="line"></span><br><span class="line">如查看java的进程的pid，ps -ef | grep java:</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># ps -ef | grep java</span><br><span class="line">root     124146   1984  0 09:13 pts&#x2F;0    00:00:06 java -jar arthas-demo.jar</span><br><span class="line">root     125210  98378  0 10:07 pts&#x2F;1    00:00:00 grep --color&#x3D;auto java</span><br><span class="line">查看特定进程的数量</span><br><span class="line"></span><br><span class="line">如查看java进程的数量,ps -ef | grep java| wc -l：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># ps -ef | grep java| wc -l</span><br><span class="line">2</span><br><span class="line">查看线程是否存在死锁</span><br><span class="line"></span><br><span class="line">查看线程是否存在死锁，jstack -l pid：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># jstack -l 124146</span><br><span class="line">2020-05-02 10:13:38</span><br><span class="line">Full thread dump OpenJDK 64-Bit Server VM (25.252-b09 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;C1 CompilerThread1&quot;</span><br><span class="line"></span><br><span class="line">#6 daemon prio&#x3D;9 os_prio&#x3D;0 tid&#x3D;0x00007f27f013c000 nid&#x3D;0x1e4f9 waiting on condition [0x0000000000000000]</span><br><span class="line">java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">Locked ownable synchronizers:</span><br><span class="line">- None</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread0&quot;</span><br><span class="line"></span><br><span class="line">#5 daemon prio&#x3D;9 os_prio&#x3D;0 tid&#x3D;0x00007f27f012d000 nid&#x3D;0x1e4f8 waiting on condition [0x0000000000000000]</span><br><span class="line">java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">Locked ownable synchronizers:</span><br><span class="line">- None</span><br><span class="line"></span><br><span class="line">&quot;main&quot;</span><br><span class="line"></span><br><span class="line">#1 prio&#x3D;5 os_prio&#x3D;0 tid&#x3D;0x00007f27f004b800 nid&#x3D;0x1e4f3 waiting on condition [0x00007f27f7274000]</span><br><span class="line">java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)</span><br><span class="line">at demo.MathGame.main(MathGame.java:17)</span><br><span class="line"></span><br><span class="line">Locked ownable synchronizers:</span><br><span class="line">- None</span><br><span class="line">...</span><br><span class="line">查看某个进程的线程数</span><br><span class="line"></span><br><span class="line">ps -efL | grep [PID] | wc -l，如：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># ps -efL | grep 124146 | wc -l</span><br><span class="line">12</span><br><span class="line">查看具体有哪些线程用ps -Lp [pid] cu:</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># ps -Lp 124146 cu</span><br><span class="line">USER        PID    LWP %CPU NLWP %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root     124146 124146  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 java</span><br><span class="line">root     124146 124147  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:01 java</span><br><span class="line">root     124146 124148  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 VM Thread</span><br><span class="line">root     124146 124149  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 Reference Handl</span><br><span class="line">root     124146 124150  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 Finalizer</span><br><span class="line">root     124146 124151  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 Signal Dispatch</span><br><span class="line">root     124146 124152  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 C2 CompilerThre</span><br><span class="line">root     124146 124153  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 C1 CompilerThre</span><br><span class="line">root     124146 124154  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:00 Service Thread</span><br><span class="line">root     124146 124155  0.1   11  2.5 2489116 35724 pts&#x2F;0   Sl+  09:13   0:05 VM Periodic Tas</span><br><span class="line">root     124146 125362  0.0   11  2.5 2489116 35724 pts&#x2F;0   Sl+  10:13   0:00 Attach Listener</span><br><span class="line">统计所有的log文件中，包含Error字符的行</span><br><span class="line"></span><br><span class="line">find &#x2F; -type f -name &quot;*.log&quot; | xargs grep &quot;ERROR&quot;，这个在排查问题过程中比较有用：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># find &#x2F; -type f -name &quot;*.log&quot; | xargs grep &quot;ERROR&quot;</span><br><span class="line">&#x2F;var&#x2F;</span><br><span class="line">log</span><br><span class="line">&#x2F;tuned&#x2F;tuned.log:2020-03-13 18:05:59,145 ERROR    tuned.utils.commands: Writing to file</span><br><span class="line">&#39;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;scaling_governor&#39;</span><br><span class="line">error:</span><br><span class="line">&#39;[Errno 19] No such device&#39;</span><br><span class="line">&#x2F;var&#x2F;</span><br><span class="line">log</span><br><span class="line">&#x2F;tuned&#x2F;tuned.log:2020-03-13 18:05:59,145 ERROR    tuned.utils.commands: Writing to file</span><br><span class="line">&#39;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu1&#x2F;cpufreq&#x2F;scaling_governor&#39;</span><br><span class="line">error:</span><br><span class="line">&#39;[Errno 19] No such device&#39;</span><br><span class="line">&#x2F;var&#x2F;</span><br><span class="line">log</span><br><span class="line">&#x2F;tuned&#x2F;tuned.log:2020-04-28 14:55:34,857 ERROR    tuned.utils.commands: Writing to file</span><br><span class="line">&#39;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;scaling_governor&#39;</span><br><span class="line">error:</span><br><span class="line">&#39;[Errno 19] No such device&#39;</span><br><span class="line">&#x2F;var&#x2F;</span><br><span class="line">log</span><br><span class="line">&#x2F;tuned&#x2F;tuned.log:2020-04-28 14:55:34,859 ERROR    tuned.utils.commands: Writing to file</span><br><span class="line">&#39;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu1&#x2F;cpufreq&#x2F;scaling_governor&#39;</span><br><span class="line">error:</span><br><span class="line">&#39;[Errno 19] No such device&#39;</span><br><span class="line">&#x2F;var&#x2F;</span><br><span class="line">log</span><br><span class="line">&#x2F;tuned&#x2F;tuned.log:2020-04-28 15:23:19,037 ERROR    tuned.utils.commands: Writing to file</span><br><span class="line">&#39;&#x2F;sys&#x2F;devices&#x2F;system&#x2F;cpu&#x2F;cpu0&#x2F;cpufreq&#x2F;scaling_governor&#39;</span><br><span class="line">error:</span><br><span class="line">&#39;[Errno 19] No such device&#39;</span><br><span class="line">...</span><br><span class="line">应用启动时指定JVM参数</span><br><span class="line"></span><br><span class="line">java -jar -Xms128m -Xmx1024m -Xss512k -XX:PermSize&#x3D;128m -XX:MaxPermSize&#x3D;64m -XX:NewSize&#x3D;64m -XX:MaxNewSize&#x3D;256m arthas-demo.jar，如：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># java -jar -Xms128m -Xmx1024m -Xss512k -XX:PermSize&#x3D;128m -XX:MaxPermSize&#x3D;64m -XX:NewSize&#x3D;64m -XX:MaxNewSize&#x3D;256m  arthas-demo.jar</span><br><span class="line">OpenJDK 64-Bit Server VM warning: ignoring option PermSize&#x3D;128m; support was removed</span><br><span class="line">in</span><br><span class="line">8.0</span><br><span class="line">OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize&#x3D;64m; support was removed</span><br><span class="line">in</span><br><span class="line">8.0</span><br><span class="line">157518&#x3D;2*3*3*3*2917</span><br><span class="line">illegalArgumentCount:  1, number is: -187733, need &gt;&#x3D; 2</span><br><span class="line">illegalArgumentCount:  2, number is: -102156, need &gt;&#x3D; 2</span><br><span class="line">173379&#x3D;3*57793</span><br><span class="line">总结</span><br><span class="line"></span><br><span class="line">在使用linux命令时，如果想看帮助可以使用--help或者man查看帮助信息：</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># grep --help</span><br><span class="line">用法: grep [选项]... PATTERN [FILE]...</span><br><span class="line">在每个 FILE 或是标准输入中查找 PATTERN。</span><br><span class="line">默认的 PATTERN 是一个基本正则表达式(缩写为 BRE)。</span><br><span class="line">例如: grep -i</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">menu.h main.c</span><br><span class="line">...</span><br><span class="line">[root@localhost ~]</span><br><span class="line"># man grep</span><br><span class="line"></span><br><span class="line">GREP(1)                                                        General Commands Manual                                                        GREP(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">grep, egrep, fgrep - 打印匹配给定模式的行</span><br><span class="line"></span><br><span class="line">总览 SYNOPSIS</span><br><span class="line">grep [options] PATTERN [FILE...]</span><br><span class="line">grep [options] [-e PATTERN | -f FILE] [FILE...]</span><br><span class="line"></span><br><span class="line">描述 DESCRIPTION</span><br><span class="line">Grep    搜索以    FILE    命名的文件输入   (或者是标准输入，如果没有指定文件名，或者给出的文件名是   -   的话)，寻找含有与给定的模式   PATTERN</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">类别监控命令描述备注</span><br><span class="line">内存瓶颈free查看内存使用</span><br><span class="line"></span><br><span class="line">vmstat 3(间隔时间) 100(监控次数)查看swap in&#x2F;out详细定位是否存在性能瓶颈推荐使用</span><br><span class="line"></span><br><span class="line">sar -r 3和free命令类似，查看内存的使用情况，但是不包含swap的情况</span><br><span class="line">cpu瓶颈top -H按照cpu消耗高低进行排序</span><br><span class="line"></span><br><span class="line">ps -Lp 进程号 cu查看某个进程的cpu消耗排序</span><br><span class="line"></span><br><span class="line">cat &#x2F;proc&#x2F;cpuinfo |grep &#39;processor&#39;|wc -l查看cpu核数</span><br><span class="line"></span><br><span class="line">top查看cpu总体消耗，包括分项消耗如user,system,idle,nice等消耗</span><br><span class="line"></span><br><span class="line">top 然后shift+h:显示java线程，然后shift+M:按照内存使用进行排序；shift+P:按照cpu时间排序;shift+T:按照cpu累计使用时间排序多核cpu，按“1”进入top视图专项性能排查，多核CPU主要看CUP各个内核的负载情况</span><br><span class="line"></span><br><span class="line">sar -u 3(间隔时间)查看cpu总体消耗占比</span><br><span class="line"></span><br><span class="line">sar -q查看cpu load</span><br><span class="line"></span><br><span class="line">top -b -n 1 | awk &#39;&#123;if (NR&lt;&#x3D;7)print;else if($8&#x3D;&#x3D;&quot;D&quot;)&#123;print;count++&#125;&#125;END&#123;print &quot;Total status D:&quot;count&#125;&#39;计算在cpu load里面的uninterruptedsleep的任务数量 uninterruptedsleep的任务会被计入cpu load，如磁盘堵塞</span><br><span class="line">网络瓶颈cat &#x2F;var&#x2F;log&#x2F;messages查看内核日志，查看是否丢包</span><br><span class="line"></span><br><span class="line">watch more &#x2F;proc&#x2F;net&#x2F;dev用于定位丢包，错包情况，以便看网络瓶颈重点关注drop(包被丢弃)和网络包传送的总量，不要超过网络上限</span><br><span class="line"></span><br><span class="line">sar -n SOCK查看网络流量</span><br><span class="line"></span><br><span class="line">netstat -na|grep ESTABLISHED|wc -l查看tcp连接成功状态的数量此命令特别消耗cpu，不适合进行长时间监控数据收集</span><br><span class="line"></span><br><span class="line">netstat -na|awk&#39;&#123;print $6&#125;&#39;|sort |uniq -c |sort -nr看tcp各个状态数量</span><br><span class="line"></span><br><span class="line">netstat -i查看网络错误</span><br><span class="line"></span><br><span class="line">ss state ESTABLISHED| wc -l更高效地统计tcp连接状态为ESTABLISHED的数量</span><br><span class="line"></span><br><span class="line">cat &#x2F;proc&#x2F;net&#x2F;snmp查看和分析240秒内网络包量，流量，错包，丢包用于计算重传率tcpetr&#x3D;RetransSegs&#x2F;OutSegs</span><br><span class="line"></span><br><span class="line">ping $ip测试网络性能</span><br><span class="line"></span><br><span class="line">traceroute $ip查看路由经过的地址常用于定位网络在各个路由区段的耗时</span><br><span class="line"></span><br><span class="line">dig $域名查看域名解析地址</span><br><span class="line"></span><br><span class="line">dmesg查看系统内核日志</span><br><span class="line">磁盘瓶颈iostat -x -k -d 1详细列出磁盘的读写情况当看到I&#x2F;O等待时间所占CPU时间的比重很高的时候，首先要检查的就是机器是否正在大量使用交换空间，同时关注iowait占比cpu的消耗是否很大，如果大说明磁盘存在大的瓶颈，同时关注await，表示磁盘的响应时间以便小于5ms</span><br><span class="line"></span><br><span class="line">iostat -x查看系统各个磁盘的读写性能重点关注await和iowait的cpu占比</span><br><span class="line"></span><br><span class="line">iotop查看哪个进程在大量读取IO一般先通过iostat查看是否存在io瓶颈，再定位哪个进程在大量读取IO</span><br><span class="line"></span><br><span class="line">df -hl查看磁盘剩余空间</span><br><span class="line"></span><br><span class="line">du -sh查看磁盘使用了多少空间</span><br><span class="line">应用瓶颈ps -efgrep java查看某个进程的id号</span><br><span class="line"></span><br><span class="line">ps -ef | grep httpd| wc -l查看特定进程的数量</span><br><span class="line"></span><br><span class="line">cat *** .log | grep *** Exception| wc -l统计日志文件中包含特定异常数量</span><br><span class="line"></span><br><span class="line">jstack -l pid用于查看线程是否存在死锁</span><br><span class="line"></span><br><span class="line">awk&#39;&#123;print $8&#125;&#39; 2017-05-22-access_log|egrep &#39;301|302&#39;| wc -l统计log中301、302状态码的行数，$8表示第八列是状态码，可以根据实际情况更改常用于应用故障定位</span><br><span class="line"></span><br><span class="line">grep &#39;wholesaleProductDetailNew&#39; cookie_log | awk &#39;&#123;if($10&#x3D;&#x3D;&quot;200&quot;)&#125;&#39;print&#125;&#39;awk &#39;print $12&#39; | more打印包含特定数据的12列数据</span><br><span class="line"></span><br><span class="line">grep &quot;2017:05:22&quot; cookielog | awk &#39;($12&gt;0.3)&#123;print 8&#125;&#39; | sort &gt; 目录地址对apache或者nginx访问log进行响应时间排序，$12表示cookie log中的12列表示响应时间 用于排查是否是由于是某些访问超长造成整体的RT变长</span><br><span class="line"></span><br><span class="line">grep -v &#39;HTTP&#x2F;1.1&quot; 200&#39;取出非200响应码的URL</span><br><span class="line"></span><br><span class="line">pgm -A -f $应用集群名称 &quot;grep &quot;&#39;301&#39; log文件地址 | wc -l&quot;查看整个集群的log中301状态码的数量</span><br><span class="line"></span><br><span class="line">ps -efL | grep [PID] | wc -l查看某个进程创建的线程数</span><br><span class="line"></span><br><span class="line">find &#x2F; -type f -name &quot; * .log&quot; | xargs grep &quot;ERROR&quot;统计所有的log文件中，包含Error字符的行这个在排查问题过程中比较有用</span><br><span class="line"></span><br><span class="line">jstat -gc [pid]查看gc情况</span><br><span class="line"></span><br><span class="line">jstat -gcnew [pid]查看young区的内存使用情况，包括MTT(最大交互次数就被交换到old区)，TT是目前已经交换的次数</span><br><span class="line"></span><br><span class="line">jstat -gcold查看old区的内存使用情况</span><br><span class="line"></span><br><span class="line">jmap -J-d64 -dump:format&#x3D;b,file&#x3D;dump.bin PIDdump出内存快照-J-d64防止jmap导致虚拟机crash(jdk6有bug)</span><br><span class="line"></span><br><span class="line">-XX:+HeapDumpOnOutOfMemeryError在java启动时加入，当出现内存溢出时，存储内存快照</span><br><span class="line"></span><br><span class="line">jmap -histo [pid]按照对象内存大小排序注意会导致full gc</span><br><span class="line"></span><br><span class="line">gcore [pid]导出完成的内存快照通常和jmap -permstat &#x2F;opt&#x2F; ** &#x2F;java gcore.bin一起使用，将core dump转换成heap dump</span><br><span class="line"></span><br><span class="line">-XX:HeapDumpPath&#x3D;&#x2F;home&#x2F;logs -Xloggc:&#x2F;home&#x2F;log&#x2F;gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps在Java启动参数中加入，打印gc日志</span><br><span class="line"></span><br><span class="line">-server -Xms4000m -Xmx4000m -Xmn1500m -Xss256k -XX:PermSize&#x3D;340m -XX:MaxPermSize&#x3D;340m -XX:+UseConcMarkSweepGC调整JVM堆大小xss是栈大小</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java后端线上问题排查常用命令收藏&quot;&gt;&lt;a href=&quot;#Java后端线上问题排查常用命令收藏&quot; class=&quot;headerlink&quot; title=&quot;Java后端线上问题排查常用命令收藏&quot;&gt;&lt;/a&gt;Java后端线上问题排查常用命令收藏&lt;/h1&gt;&lt;pre&gt;&lt;cod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于sonar扫描的那点事</title>
    <link href="http://iwantjingjing.com/2021/04/10/%E5%85%B3%E4%BA%8Esonar%E6%89%AB%E6%8F%8F%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
    <id>http://iwantjingjing.com/2021/04/10/%E5%85%B3%E4%BA%8Esonar%E6%89%AB%E6%8F%8F%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</id>
    <published>2021-04-10T09:54:39.000Z</published>
    <updated>2021-04-10T09:56:02.364Z</updated>
    
    <content type="html"><![CDATA[<p>关于sonar扫描的那点事</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br></pre></td><td class="code"><pre><span class="line">1、&quot;.equals()&quot; should not be used to test the values of &quot;Atomic&quot; classes.</span><br><span class="line">bug  主要</span><br><span class="line">不要使用equals方法对AtomicXXX进行是否相等的判断</span><br><span class="line">Atomic变量永远只会和自身相等，Atomic变量没有覆写equals()方法.</span><br><span class="line">2、&quot;&#x3D;+&quot; should not be used instead of &quot;+&#x3D;&quot;</span><br><span class="line">bug 主要</span><br><span class="line">&quot;&#x3D;+&quot; 与 &quot;&#x3D;+&quot; 意义不同</span><br><span class="line">a &#x3D;+ b;虽然正确但写法不合规，应写成 a &#x3D; +b;</span><br><span class="line">3、&quot;@NonNull&quot; values should not be set to null</span><br><span class="line">bug 次要</span><br><span class="line">标注非空假定非空且在使用之前不进行非空检查，设置为空会导致空指针异常</span><br><span class="line">4、&quot;BigDecimal(double)&quot; should not be used</span><br><span class="line">bug 主要</span><br><span class="line">因为浮点的不精确,可能使用BigDecimal(double)得不到期望的值</span><br><span class="line">5、&quot;compareTo&quot; results should not be checked for specific values</span><br><span class="line">bug 次要</span><br><span class="line">compareTo可能返回不是具体的值（除0外），建议用 &gt;0、&lt;0、&#x3D;0</span><br><span class="line">6、&quot;compareTo&quot; should not return &quot;Integer.MIN_VALUE&quot;</span><br><span class="line">bug 次要</span><br><span class="line">compareTo只代表一个不等标识，不代表不等的程度，应返回-1,0,1标识即可</span><br><span class="line">7、 &quot;Double.longBitsToDouble&quot; should not be used for &quot;int&quot;</span><br><span class="line">bug 主要  </span><br><span class="line">Double.longBitsToDouble返回给定的位所代表的double值,需要一个64位的long类型参数.</span><br><span class="line">8、 &quot;equals&quot; method overrides should accept &quot;Object&quot; parameters</span><br><span class="line">bug 主要  </span><br><span class="line">equals作为方法名应该仅用于重写Object.equals(Object)来避免混乱.</span><br><span class="line">9、 &quot;equals(Object obj)&quot; should test argument type</span><br><span class="line">bug 次要</span><br><span class="line">要比较obj的class  type是否一样</span><br><span class="line">10、&quot;equals&quot; methods should be symmetric and work for subclasses</span><br><span class="line">bug 次要</span><br><span class="line">equals应是对等并且在有子类参与时能正常工作</span><br><span class="line">11、&quot;equals(Object obj)&quot; and &quot;hashCode()&quot; should be overridden in pairs</span><br><span class="line">bug 次要</span><br><span class="line">成对重写</span><br><span class="line">12、&quot;Externalizable&quot; classes should have no-arguments constructors</span><br><span class="line">bug 主要</span><br><span class="line">Externalizable(可序列化与返序列化)类应该有无参构造器</span><br><span class="line">13、&quot;getClass&quot; should not be used for synchronization</span><br><span class="line">bug  主要</span><br><span class="line">&#123;synchronized (this.getClass())&#125;  错误 子类继承此方法时不能做到同步</span><br><span class="line">&#123;synchronized (MyClass.class)&#125; 正确</span><br><span class="line">14、&quot;hashCode&quot; and &quot;toString&quot; should not be called on array instances</span><br><span class="line">bug 主要</span><br><span class="line">使用Arrays.toString(args)和Arrays.hashCode(args)代替.</span><br><span class="line">15、&quot;instanceof&quot; operators that always return &quot;true&quot; or &quot;false&quot; should be removed</span><br><span class="line">bug 主要</span><br><span class="line">16、&quot;InterruptedException&quot; should not be ignored</span><br><span class="line">bug 主要</span><br><span class="line">try &#123;</span><br><span class="line">while (true) &#123;</span><br><span class="line">&#x2F;&#x2F; do stuff</span><br><span class="line">&#125;</span><br><span class="line">&#125;catch (InterruptedException e) &#123;</span><br><span class="line">LOGGER.log(Level.WARN, &quot;Interrupted!&quot;, e);</span><br><span class="line">&#x2F;&#x2F; Restore interrupted state...</span><br><span class="line">Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br><span class="line">17、&quot;Iterator.hasNext()&quot; should not call &quot;Iterator.next()&quot;</span><br><span class="line">bug 主要</span><br><span class="line">18、&quot;Iterator.next()&quot; methods should throw &quot;NoSuchElementException&quot;</span><br><span class="line">bug 次要</span><br><span class="line">public String next()&#123;</span><br><span class="line">if(!hasNext())&#123;</span><br><span class="line">throw new NoSuchElementException();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">19、&quot;notifyAll&quot; should be used</span><br><span class="line">bug 主要</span><br><span class="line">notify可能不能唤醒正确的线程，notifyAll代之。</span><br><span class="line">20、&quot;null&quot; should not be used with &quot;Optional&quot;</span><br><span class="line">bug 主要</span><br><span class="line">把判空包装起来使用而不直接使用!&#x3D;null</span><br><span class="line">21、&quot;PreparedStatement&quot; and &quot;ResultSet&quot; methods should be called with valid indices</span><br><span class="line">bug 阻断</span><br><span class="line">PreparedStatement与ResultSet参数设置与获取数据由序号1开始而非0</span><br><span class="line">22、&quot;read&quot; and &quot;readLine&quot; return values should be used</span><br><span class="line">bug 主要</span><br><span class="line">BufferedReader.readLine(), Reader.read()及子类中的相关方法都应该先存储再比较</span><br><span class="line">buffReader &#x3D; new BufferedReader(new FileReader(fileName));</span><br><span class="line">String line &#x3D; null;</span><br><span class="line">while ((line &#x3D; buffReader.readLine()) !&#x3D; null) &#123;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line">23、&quot;runFinalizersOnExit&quot; should not be called</span><br><span class="line">bug 严重</span><br><span class="line">JVM退出时不可能运行finalizers,System.runFinalizersOnExit 和 Runtime.runFinalizersOnExit可以在jvm退出时运行但是因为他们不安全而弃用.</span><br><span class="line">正确用法:</span><br><span class="line">Runtime.addShutdownHook(new Runnable() &#123;</span><br><span class="line">public void run()&#123;</span><br><span class="line">doSomething();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">24、&quot;ScheduledThreadPoolExecutor&quot; should not have 0 core threads</span><br><span class="line">bug 严重</span><br><span class="line">java.util.concurrent.ScheduledThreadPoolExecutor由属性corePoolSize指定线程池大小，如果设置为0表示线程执行器无线程可用且不做任何事.</span><br><span class="line">25、&quot;Serializable&quot; inner classes of non-serializable classes should be &quot;static&quot;</span><br><span class="line">bug 次要</span><br><span class="line">序列化非静态内部类将导致尝试序列化外部类,如果外部类不是序列化类,会产生运行时异常，内部类静态化会避免这种情况</span><br><span class="line">26、&quot;SingleConnectionFactory&quot; instances should be set to &quot;reconnectOnException&quot;</span><br><span class="line">bug 主要</span><br><span class="line">使用Spring SingleConnectionFactory而不启用reconnectOnException设置当连接恶化将阻止自动连接恢复。</span><br><span class="line">27、&quot;StringBuilder&quot; and &quot;StringBuffer&quot; should not be instantiated with a character</span><br><span class="line">bug 主要</span><br><span class="line">StringBuffer foo &#x3D; new StringBuffer(&#39;x&#39;);  错  equivalent to StringBuffer foo &#x3D; new StringBuffer(120);</span><br><span class="line">StringBuffer foo &#x3D; new StringBuffer(&quot;x&quot;);  对</span><br><span class="line">28、 &quot;super.finalize()&quot; should be called at the end of &quot;Object.finalize()&quot; implementations</span><br><span class="line">bug 严重</span><br><span class="line">protected void finalize() &#123;</span><br><span class="line">releaseSomeResources();</span><br><span class="line">super.finalize();       &#x2F;&#x2F;调用，最后调用</span><br><span class="line">&#125;</span><br><span class="line">29、&quot;toArray&quot; should be passed an array of the proper type</span><br><span class="line">bug 次要</span><br><span class="line">toArray()无参且强制类型转换会产生运行时异常,应传入一个合适的类弄作参数</span><br><span class="line">public String [] getStringArray(List&lt;String&gt; strings) &#123;</span><br><span class="line">return strings.toArray(new String[0]);</span><br><span class="line">&#125;</span><br><span class="line">30、&quot;toString()&quot; and &quot;clone()&quot; methods should not return null</span><br><span class="line">bug 主要</span><br><span class="line">可返回&quot;&quot;</span><br><span class="line">31、 &quot;wait&quot; should not be called when multiple locks are held</span><br><span class="line">bug 阻断</span><br><span class="line">32、 &quot;wait&quot;, &quot;notify&quot; and &quot;notifyAll&quot; should only be called when a lock is obviously held on an object</span><br><span class="line">bug 主要</span><br><span class="line">先要获得对象锁才能进行上述操作</span><br><span class="line">private void removeElement() &#123;</span><br><span class="line">synchronized(obj) &#123;</span><br><span class="line">while (!suitableCondition())&#123;</span><br><span class="line">obj.wait();</span><br><span class="line">&#125;</span><br><span class="line">... &#x2F;&#x2F; Perform removal</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      or</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      private synchronized void removeElement() &#123;</span><br><span class="line">while (!suitableCondition())&#123;</span><br><span class="line">wait();</span><br><span class="line">&#125;</span><br><span class="line">... &#x2F;&#x2F; Perform removal</span><br><span class="line">&#125;</span><br><span class="line">33、&quot;wait(...)&quot; should be used instead of &quot;Thread.sleep(...)&quot; when a lock is held</span><br><span class="line">bug 阻断</span><br><span class="line">当持有锁的当前线程调用Thread.sleep(...)可能导致性能和扩展性问题，甚至死锁因为持有锁的当前线程已冻结.合适的做法是锁对象wait()释放锁让其它线程进来运行.</span><br><span class="line">34、A &quot;for&quot; loop update clause should move the counter in the right direction</span><br><span class="line">bug 主要</span><br><span class="line">检查for循环下标递增或递减正确</span><br><span class="line">35、All branches in a conditional structure should not have exactly the same implementation</span><br><span class="line">bug 主要</span><br><span class="line">分支中不应该有相同的实现</span><br><span class="line">36、Blocks should be synchronized on &quot;private final&quot; fields or parameters</span><br><span class="line">bug 主要</span><br><span class="line">synchronized同步块应该锁在private final fields或parameters对象上,因为同步块内非final锁对象可能改变导致其它线程进来运行.</span><br><span class="line">37、Boxing and unboxing should not be immediately reversed</span><br><span class="line">bug  次要</span><br><span class="line">自动拆箱和装箱不需手动转换</span><br><span class="line">38、Child class methods named for parent class methods should be overrides</span><br><span class="line">bug 主要</span><br><span class="line">以下情况不是重写:</span><br><span class="line">a、父类方法是static的而子类方法不是static的</span><br><span class="line">b、子类方法的参数或返回值与父类方法不是同一个包</span><br><span class="line">c、父类方法是private</span><br><span class="line">为了不产生混乱，不要与父类方法同名</span><br><span class="line">39、Classes extending java.lang.Thread should override the &quot;run&quot; method</span><br><span class="line">bug 主要</span><br><span class="line">线程类应该重写run方法</span><br><span class="line">40、Classes should not be compared by name</span><br><span class="line">bug 主要</span><br><span class="line">不要用类名称比较类是否相同，而用instanceof或者Class.isAssignableFrom()进行底动类型比较</span><br><span class="line">41、Classes that don&#39;t define &quot;hashCode()&quot; should not be used in hashes</span><br><span class="line">bug 主要</span><br><span class="line">没有定义hashCode()方法的类不能作为hash集合中的键值，因为equal相同的实例对像可能返回不同的hash值.</span><br><span class="line">42、Collections should not be passed as arguments to their own methods</span><br><span class="line">bug 主要</span><br><span class="line">集合实例不应该作为参数被传给集合实你还自已的方法中</span><br><span class="line">43、Conditionally executed blocks should be reachable</span><br><span class="line">bug 主要</span><br><span class="line">条件执行块应该可达</span><br><span class="line">44、Constructor injection should be used instead of field injection</span><br><span class="line">bug 主要</span><br><span class="line">构造器注入应该替代属性注入(非Spring framework)</span><br><span class="line">因为任何非Spring framework实例化而是通过构造器实例化的实例不能注入属性,这样公有的构造器实化化后可能产生NullPointerException，除非所有的构造器都是私有的</span><br><span class="line">45、Consumed Stream pipelines should not be reused</span><br><span class="line">bug 主要</span><br><span class="line">流不应该重用</span><br><span class="line">46、Custom resources should be closed</span><br><span class="line">bug 阻断</span><br><span class="line">资源应该关闭</span><br><span class="line">47、Custom serialization method signatures should meet requirements</span><br><span class="line">bug 主要</span><br><span class="line">自定义类序列化方法签名应该合法</span><br><span class="line">49、Dependencies should not have &quot;system&quot; scope</span><br><span class="line">bug 严重</span><br><span class="line">maven依赖不要在system scope</span><br><span class="line">50、Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting</span><br><span class="line">bug 主要</span><br><span class="line">不同的原始包装类如果没有明确的类转换不能用于三元操作中</span><br><span class="line">51、Double Brace Initialization should not be used</span><br><span class="line">bug 次要</span><br><span class="line">双构造初始不要用</span><br><span class="line">Map source &#x3D; new HashMap()&#123;&#123; &#x2F;&#x2F; Noncompliant</span><br><span class="line">put(&quot;firstName&quot;, &quot;John&quot;);</span><br><span class="line">put(&quot;lastName&quot;, &quot;Smith&quot;);</span><br><span class="line">&#125;&#125;;</span><br><span class="line">此操作如一个anonymous inner class，如果anonymous inner class返回且被其它对象引用，可能产生memory leaks，既使不产生memory leaks也会让大多维护者感到迷惑</span><br><span class="line">52、Double-checked locking should not be used</span><br><span class="line">bug 阻断</span><br><span class="line">重复检查的锁块不要使用</span><br><span class="line">public static Resource getInstance() &#123;</span><br><span class="line">if (resource &#x3D;&#x3D; null) &#123;</span><br><span class="line">synchronized (DoubleCheckedLocking.class) &#123;</span><br><span class="line">if (resource &#x3D;&#x3D; null)</span><br><span class="line">resource &#x3D; new Resource();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return resource;</span><br><span class="line">&#125;</span><br><span class="line">应</span><br><span class="line">public synchronized static Resource getInstance() &#123;</span><br><span class="line">if (resource &#x3D;&#x3D; null)</span><br><span class="line">resource &#x3D; new Resource();</span><br><span class="line">return resource;</span><br><span class="line">&#125;</span><br><span class="line">53、Equals Hash Code</span><br><span class="line">bug 严重</span><br><span class="line">成对重写equals()与hashCode()</span><br><span class="line">54、Exception should not be created without being thrown</span><br><span class="line">bug 主要</span><br><span class="line">不被抛出的异常不要创建</span><br><span class="line">55、Expressions used in &quot;assert&quot; should not produce side effects</span><br><span class="line">bug 主要</span><br><span class="line">assert表达式不要产生负影响，不要改变数据状态</span><br><span class="line">56、Failed unit tests should be fixed</span><br><span class="line">bug 主要</span><br><span class="line">失败的单元测试应该尽快解决掉</span><br><span class="line">57、Floating point numbers should not be tested for equality</span><br><span class="line">bug 主要</span><br><span class="line">浮点数不要进行比较</span><br><span class="line">58、Getters and setters should be synchronized in pairs</span><br><span class="line">bug 主要</span><br><span class="line">get与set应该成对进行同步操作</span><br><span class="line">59、Identical expressions should not be used on both sides of a binary operator</span><br><span class="line">bug 主要</span><br><span class="line">相同的表达式不要作为二进制操作的操作数使用,应该简化</span><br><span class="line">60、Inappropriate &quot;Collection&quot; calls should not be made</span><br><span class="line">bug 主要</span><br><span class="line">正确使用集合元素类型</span><br><span class="line">61、Inappropriate regular expressions should not be used</span><br><span class="line">bug 主要</span><br><span class="line">正确使用正则表达式</span><br><span class="line">62、Intermediate Stream methods should not be left unused</span><br><span class="line">bug 主要</span><br><span class="line">中间流应该被使用</span><br><span class="line">63、Ints and longs should not be shifted by zero or more than their number of bits-1</span><br><span class="line">bug 次要</span><br><span class="line">整型与长整型位移操作数应该价于1与类型占位数-1</span><br><span class="line">64、Invalid &quot;Date&quot; values should not be used</span><br><span class="line">bug 主要</span><br><span class="line">正确使用日期</span><br><span class="line">65、Jump statements should not occur in &quot;finally&quot; blocks</span><br><span class="line">bug 主要</span><br><span class="line">finally块中使用return, break, throw等Jump statements，会阻止在try catch中抛出的未处理异常的传播</span><br><span class="line">66、Locks should be released</span><br><span class="line">bug 严重</span><br><span class="line">保证锁的能够释放</span><br><span class="line">67、Loop conditions should be true at least once</span><br><span class="line">bug 主要</span><br><span class="line">循环应该至少走一次</span><br><span class="line">68、Loops should not be infinit</span><br><span class="line">bug 阻断</span><br><span class="line">循环不应该死循环</span><br><span class="line">69、Math operands should be cast before assignment</span><br><span class="line">bug 次要</span><br><span class="line">数字操作在操作或赋值前要转化</span><br><span class="line">70、Math should not be performed on floats</span><br><span class="line">bug 次要</span><br><span class="line">BigDecimal代替floats进行大数精确运算</span><br><span class="line">71、Methods &quot;wait(...)&quot;, &quot;notify()&quot; and &quot;notifyAll()&quot; should not be called on Thread instances</span><br><span class="line">bug 阻断</span><br><span class="line">不要在线程中使用&quot;wait(...)&quot;, &quot;notify()&quot; and &quot;notifyAll()&quot;</span><br><span class="line">72、Methods should not be named &quot;hashcode&quot; or &quot;equal&quot;</span><br><span class="line">bug 主要</span><br><span class="line">除非Override重写这些方法</span><br><span class="line">73、Multiline blocks should be enclosed in curly braces</span><br><span class="line">bug 主要</span><br><span class="line">多列块应用大括号括起来</span><br><span class="line">74、Neither &quot;Math.abs&quot; nor negation should be used on numbers that could be &quot;MIN_VALUE&quot;</span><br><span class="line">bug 次要</span><br><span class="line">不要对数值类型的MIN_VALUE值或返回值为此值进行Math.abs与取反操作，因为不会起作用。</span><br><span class="line">75、Non-public methods should not be &quot;@Transactional&quot;</span><br><span class="line">bug 主要</span><br><span class="line">非public方法不要注解Transactional,调用时spring 会抛出异常</span><br><span class="line">76、Non-serializable classes should not be written</span><br><span class="line">bug 主要</span><br><span class="line">执行写操作的类要序列化，否则会抛出异常</span><br><span class="line">77、Non-serializable objects should not be stored in &quot;HttpSession&quot; objects</span><br><span class="line">bug 主要</span><br><span class="line">HttpSession要保存序列化的对象</span><br><span class="line">78、Non-thread-safe fields should not be static</span><br><span class="line">bug 主要</span><br><span class="line">非线程安全的域不应该静态化</span><br><span class="line">79、Null pointers should not be dereferenced</span><br><span class="line">bug 主要</span><br><span class="line">空指针引用不应被访问</span><br><span class="line">80、Optional value should only be accessed after calling isPresent()</span><br><span class="line">bug 主要</span><br><span class="line">Optional实例值的获取要isPresent()之后再做操作</span><br><span class="line">90、Printf-style format strings should not lead to unexpected behavior at runtime</span><br><span class="line">bug 阻断</span><br><span class="line">因为Printf风格格式化是在运行期解读，而不是在编译期检验,会存在风险</span><br><span class="line">91、Raw byte values should not be used in bitwise operations in combination with shifts</span><br><span class="line">bug 主要</span><br><span class="line">原始字节值不应参与位运算</span><br><span class="line">result &#x3D; (result &lt;&lt; 8) | readByte(); &#x2F;&#x2F; Noncompliant</span><br><span class="line">正:</span><br><span class="line">result &#x3D; (result &lt;&lt; 8) | (readByte() &amp; 0xff);</span><br><span class="line">92、Reflection should not be used to check non-runtime annotations</span><br><span class="line">bug 主要</span><br><span class="line">反射操作不应该运于检查非运行时注解</span><br><span class="line">93、Related &quot;if&#x2F;else if&quot; statements should not have the same condition</span><br><span class="line">bug 主要</span><br><span class="line">if&#x2F;else if中不应该有相同的条件</span><br><span class="line">94、Resources should be closed</span><br><span class="line">bug 阻断</span><br><span class="line">打开的资源应该关闭并且放到finally块中进行关闭</span><br><span class="line">95、Return values from functions without side effects should not be ignored</span><br><span class="line">bug 主要</span><br><span class="line">操作对函数返回值没有影响的应该忽略</span><br><span class="line">public void handle(String command)&#123;</span><br><span class="line">command.toLowerCase(); &#x2F;&#x2F; Noncompliant; result of method thrown away</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">96、Servlets should not have mutable instance fields</span><br><span class="line">bug 主要</span><br><span class="line">servlet容器对每一个servlet创建一个实例导致实例变量共享产生问题</span><br><span class="line">struts1.x 也是单例</span><br><span class="line">97、Short-circuit logic should be used to prevent null pointer dereferences in conditionals</span><br><span class="line">bug 主要</span><br><span class="line">应正确使用短路逻辑来防止条件中的空指针引用访问</span><br><span class="line">98、Silly equality checks should not be made</span><br><span class="line">bug 主要</span><br><span class="line">愚蠢的相等检查不应该做</span><br><span class="line">非同类型的对象equal</span><br><span class="line">99、Spring &quot;@Controller&quot; classes should not use &quot;@Scope&quot;</span><br><span class="line">bug 主要</span><br><span class="line">保持spring controller的单例</span><br><span class="line">100、Synchronization should not be based on Strings or boxed primitives</span><br><span class="line">bug 主要</span><br><span class="line">字符串和封箱类不应该被用作锁定对象，因为它们被合并和重用。</span><br><span class="line">101、The non-serializable super class of a &quot;Serializable&quot; class should have a no-argument constructor</span><br><span class="line">bug 次要</span><br><span class="line">序列化的类的非序列化父类应有一个无参构造器</span><br><span class="line">102、The Object.finalize() method should not be called</span><br><span class="line">bug 主要</span><br><span class="line">Object.finalize()不要人为去调用</span><br><span class="line">103、The Object.finalize() method should not be overriden</span><br><span class="line">bug 主要</span><br><span class="line">Object.finalize()不要重写</span><br><span class="line">104、The signature of &quot;finalize()&quot; should match that of &quot;Object.finalize()&quot;</span><br><span class="line">bug 主要</span><br><span class="line">Object.finalize()不要重写</span><br><span class="line">105、The value returned from a stream read should be checked</span><br><span class="line">bug 次要</span><br><span class="line">从流中读取的值应先检查再操作</span><br><span class="line">106、Thread.run() should not be called directly</span><br><span class="line">bug 主要</span><br><span class="line">调用start()</span><br><span class="line">107、Useless &quot;if(true) &#123;...&#125;&quot; and &quot;if(false)&#123;...&#125;&quot; blocks should be removed</span><br><span class="line">bug 主要</span><br><span class="line">无用的if(true)和if(false)块应移除</span><br><span class="line">108、Value-based classes should not be used for locking</span><br><span class="line">bug 主要</span><br><span class="line">基于值的类不要用于锁对象</span><br><span class="line">109、Value-based objects should not be serialized</span><br><span class="line">bug 次要</span><br><span class="line">基于值的对象不应被用于序列化</span><br><span class="line">110、Values should not be uselessly incremented</span><br><span class="line">bug 主要</span><br><span class="line">值增减后不存储是代码浪费甚至是bug</span><br><span class="line">111、Variables should not be self-assigned</span><br><span class="line">bug 主要</span><br><span class="line">变量不应该自分配如下:</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">112、Week Year (&quot;YYYY&quot;) should not be used for date formatting</span><br><span class="line">bug 主要</span><br><span class="line">日期格式化错误</span><br><span class="line">113、Zero should not be a possible denominator</span><br><span class="line">bug 严重</span><br><span class="line">零不应该是一个可能的分母</span><br><span class="line">114、Loops should not be infinite</span><br><span class="line">Bug   阻断</span><br><span class="line">循环不应该是无限的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">漏洞类型:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、&quot;@RequestMapping&quot; methods should be &quot;public&quot;</span><br><span class="line">漏洞  阻断</span><br><span class="line">标注了RequestMapping是controller是处理web请求。既使方法修饰为private,同样也能被外部调用，因为spring通过反射调用方法,没有检查方法可视度，</span><br><span class="line">2、&quot;enum&quot; fields should not be publicly mutable</span><br><span class="line">漏洞 次要</span><br><span class="line">枚举类域不应该是public，也不应该进行set</span><br><span class="line">3、&quot;File.createTempFile&quot; should not be used to create a directory</span><br><span class="line">漏洞 严重</span><br><span class="line">File.createTempFile不应该被用来创建目录</span><br><span class="line">4、&quot;HttpServletRequest.getRequestedSessionId()&quot; should not be used</span><br><span class="line">漏洞 严重</span><br><span class="line">HttpServletRequest.getRequestedSessionId()返回客户端浏览器会话id不要用，用HttpServletRequest.getSession().getId()</span><br><span class="line">5、&quot;javax.crypto.NullCipher&quot; should not be used for anything other than testing</span><br><span class="line">漏洞 阻断</span><br><span class="line">NullCipher类提供了一种“身份密码”，不会以任何方式转换或加密明文。 因此，密文与明文相同。 所以这个类应该用于测试，从不在生产代码中。</span><br><span class="line">6、&quot;public static&quot; fields should be constant</span><br><span class="line">漏洞 次要</span><br><span class="line">public static 域应该 final</span><br><span class="line">7、Class variable fields should not have public accessibility</span><br><span class="line">漏洞 次要</span><br><span class="line">类变量域应该是private,通过set，get进行操作</span><br><span class="line">8、Classes should not be loaded dynamically</span><br><span class="line">漏洞 严重</span><br><span class="line">不应该动态加载类,动态加载的类可能包含由静态类初始化程序执行的恶意代码.</span><br><span class="line">Class clazz &#x3D; Class.forName(className);  &#x2F;&#x2F; Noncompliant</span><br><span class="line">9、Cookies should be &quot;secure&quot;</span><br><span class="line">漏洞 次要</span><br><span class="line">Cookie c &#x3D; new Cookie(SECRET, secret);  &#x2F;&#x2F; Noncompliant; cookie is not secure</span><br><span class="line">response.addCookie(c);</span><br><span class="line">正:</span><br><span class="line">Cookie c &#x3D; new Cookie(SECRET, secret);</span><br><span class="line">c.setSecure(true);</span><br><span class="line">response.addCookie(c);</span><br><span class="line">10、Credentials should not be hard-coded</span><br><span class="line">漏洞 阻断</span><br><span class="line">凭证不应该硬编码</span><br><span class="line">11、Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)</span><br><span class="line">漏洞 严重</span><br><span class="line">加密RSA算法应始终包含OAEP（最优非对称加密填充）</span><br><span class="line">12、Default EJB interceptors should be declared in &quot;ejb-jar.xml&quot;</span><br><span class="line">漏洞 阻断</span><br><span class="line">默认EJB拦截器应在“ejb-jar.xml”中声明</span><br><span class="line">13、Defined filters should be used</span><br><span class="line">漏洞 严重</span><br><span class="line">web.xml文件中定义的每个过滤器都应该在&lt;filter-mapping&gt;元素中使用。 否则不会调用此类过滤器。</span><br><span class="line">14、Exceptions should not be thrown from servlet methods</span><br><span class="line">漏洞 次要</span><br><span class="line">不应该从servlet方法抛出异常</span><br><span class="line">15、HTTP referers should not be relied on</span><br><span class="line">漏洞 严重</span><br><span class="line">不应依赖于http，将这些参数值中止后可能是安全的，但绝不应根据其内容作出决定。</span><br><span class="line">如:</span><br><span class="line">String referer &#x3D; request.getHeader(&quot;referer&quot;);  &#x2F;&#x2F; Noncompliant</span><br><span class="line">if(isTrustedReferer(referer))&#123;</span><br><span class="line">&#x2F;&#x2F;..</span><br><span class="line">&#125;</span><br><span class="line">16、IP addresses should not be hardcoded</span><br><span class="line">漏洞 次要</span><br><span class="line">ip 地址不应该硬编码</span><br><span class="line">17、Member variable visibility should be specified</span><br><span class="line">漏洞 次要</span><br><span class="line">应指定成员变量的可见性</span><br><span class="line">18、Members of Spring components should be injected</span><br><span class="line">漏洞 严重</span><br><span class="line">spring组件的成员应注入，单例注入非静态成员共享会产生风险</span><br><span class="line">19、Mutable fields should not be &quot;public static&quot;</span><br><span class="line">漏洞 次要</span><br><span class="line">多变在域不应为 public static</span><br><span class="line">20、Neither DES (Data Encryption Standard) nor DESede (3DES) should be used</span><br><span class="line">漏洞 阻断</span><br><span class="line">不应使用DES（数据加密标准）和DESEDE（3DES）</span><br><span class="line">21、Only standard cryptographic algorithms should be used</span><br><span class="line">漏洞 严重</span><br><span class="line">标准的加密算法如 SHA-256, SHA-384, SHA-512等,非标准算法是危险的，可能被功能者攻破算法</span><br><span class="line">22、Pseudorandom number generators (PRNGs) should not be used in secure contexts</span><br><span class="line">漏洞 严重</span><br><span class="line">伪随机数生成器（PRNG）不应在安全上下文中使用</span><br><span class="line">23、Return values should not be ignored when they contain the operation status code</span><br><span class="line">漏洞 次要</span><br><span class="line">当函数调用的返回值包含操作状态代码时，应该测试此值以确保操作成功完成。</span><br><span class="line">24、Security constraints should be definedin</span><br><span class="line">漏洞 阻断</span><br><span class="line">应定义安全约束，当web.xml文件没有&lt;security-constraint&gt;元素时，此规则引发了一个问题</span><br><span class="line">25、SHA-1 and Message-Digest hash algorithms should not be used</span><br><span class="line">漏洞 严重</span><br><span class="line">不应该使用SHA-1和消息摘要散列算法,已证实不再安全</span><br><span class="line">26、SQL binding mechanisms should be used</span><br><span class="line">漏洞 阻断</span><br><span class="line">应该使用SQL绑定机制</span><br><span class="line">27、Struts validation forms should have unique names</span><br><span class="line">漏洞 阻断</span><br><span class="line">struts验证表单应有唯一名称</span><br><span class="line">28、Throwable.printStackTrace(...) should not be called</span><br><span class="line">漏洞 次要</span><br><span class="line">Throwable.printStackTrace(...)会打印异常信息，但会暴露敏感信息</span><br><span class="line">29、Untrusted data should not be stored in sessions</span><br><span class="line">漏洞 主要</span><br><span class="line">不受信任的数据不应存储在会话中。</span><br><span class="line">Web会话中的数据被认为在“信任边界”内。 也就是说，它被认为是值得信赖的。 但存储未经身份验证的用户未经验证的数据违反信任边界，并可能导致该数据被不当使用。</span><br><span class="line">30、Values passed to LDAP queries should be sanitized</span><br><span class="line">漏洞 严重</span><br><span class="line">传递到LDAP查询的值应该被清理</span><br><span class="line">31、Values passed to OS commands should be sanitized</span><br><span class="line">漏洞 严重</span><br><span class="line">传递给OS命令的值应该被清理</span><br><span class="line">32、Web applications should not have a &quot;main&quot; method</span><br><span class="line">漏洞 严重</span><br><span class="line">web 应用中不应有一个main方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">坏味道：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、&quot;&#x3D;&#x3D;&quot; and &quot;!&#x3D;&quot; should not be used when &quot;equals&quot; is overridden</span><br><span class="line">坏味道   次要</span><br><span class="line">当类重写equals方法后,不应该再用&quot;&#x3D;&#x3D;&quot;与&quot;!&#x3D;&quot;进行对象比较</span><br><span class="line">2、&quot;@Deprecated&quot; code should not be used</span><br><span class="line">坏味道   次要</span><br><span class="line">弃用方代码不应再用,弃用代码意味首将会移除,应该使用替代代码</span><br><span class="line">3、&quot;@Override&quot; should be used on overriding and implementing methods</span><br><span class="line">坏味道   主要</span><br><span class="line">重写的和实现在方法要加Override标注</span><br><span class="line">4、&quot;action&quot; mappings should not have too many &quot;forward&quot; entries</span><br><span class="line">坏味道   次要</span><br><span class="line">默认   4</span><br><span class="line">action不要有太多的forward</span><br><span class="line">5、&quot;Arrays.stream&quot; should be used for primitive arrays</span><br><span class="line">坏味道   主要</span><br><span class="line">Arrays.stream用于原始流类型(IntStream, LongStream, DoubleStream)会有更好的性能</span><br><span class="line">6、&quot;catch&quot; clauses should do more than rethrow</span><br><span class="line">坏味道   次要</span><br><span class="line">只是重新抛出捕获的异常和完全放弃异常捕获效果一样，但会给维护者带来疑惑</span><br><span class="line">7、&quot;clone&quot; should not be overridden</span><br><span class="line">坏味道   阻断</span><br><span class="line">不应重写clone方法</span><br><span class="line">8、&quot;Cloneables&quot; should implement &quot;clone&quot;</span><br><span class="line">坏味道   严重</span><br><span class="line">Cloneables类应该实现clone方法</span><br><span class="line">9、&quot;collect&quot; should be used with &quot;Streams&quot; instead of &quot;list::add&quot;</span><br><span class="line">坏味道   次要</span><br><span class="line">虽然您可以使用forEach（list :: add）或使用Stream收集，但是收集是更好的选择，因为它自动线程安全并且可并行</span><br><span class="line">10、&quot;Collections.EMPTY_LIST&quot;, &quot;EMPTY_MAP&quot;, and &quot;EMPTY_SET&quot; should not be used</span><br><span class="line">坏味道   次要</span><br><span class="line">11、&quot;DateUtils.truncate&quot; from Apache Commons Lang library should not be used</span><br><span class="line">坏味道   主要</span><br><span class="line">使用Java 8中引入的Instant类来截断日期可能会比Commons Lang的DateUtils类快得多。</span><br><span class="line">12、&quot;deleteOnExit&quot; should not be used</span><br><span class="line">坏味道   主要</span><br><span class="line">不推荐使用File.deleteOnExit()</span><br><span class="line">13、&quot;entrySet()&quot; should be iterated when both the key and value are needed</span><br><span class="line">坏味道   主要</span><br><span class="line">当循环中只需要一个map的键时，迭代keySet就是有意义的。 但是，当需要键和值两者时，迭代entrySet更有效，这将允许访问键和值</span><br><span class="line">14、&quot;equals(Object obj)&quot; should be overridden along with the &quot;compareTo(T obj)&quot; method</span><br><span class="line">坏味道   次要</span><br><span class="line">“equals（Object obj）”应该与“compareTo（T obj）”方法一起被重写</span><br><span class="line">15、&quot;Exception&quot; should not be caught when not required by called methods</span><br><span class="line">坏味道   次要</span><br><span class="line">如果被调方法没有抛出“Exception”时不要捕获&quot;Exception&quot;,应捕后被调方法抛出的异常</span><br><span class="line">16、&quot;final&quot; classes should not have &quot;protected&quot; members</span><br><span class="line">坏味道   次要</span><br><span class="line">最终类意味首不可继承所以不要有受保存成员，这样没有意义</span><br><span class="line">17、&quot;finalize&quot; should not set fields to &quot;null&quot;</span><br><span class="line">坏味道   次要</span><br><span class="line">finalize不应设置域空，对垃圾收集是没必要的，还可能为垃圾收集带来额处开消</span><br><span class="line">18、&quot;for&quot; loop increment clauses should modify the loops&#39; counters</span><br><span class="line">坏味道   严重</span><br><span class="line">loop循环应该增加递增序号变量</span><br><span class="line">19、&quot;for&quot; loop stop conditions should be invariant</span><br><span class="line">坏味道   主要</span><br><span class="line">循环停止条件应为不变</span><br><span class="line">20、&quot;indexOf&quot; checks should not be for positive numbers</span><br><span class="line">坏味道   严重</span><br><span class="line">检查indexOf返回不应使用正数</span><br><span class="line">21、&quot;indexOf&quot; checks should use a start position</span><br><span class="line">坏味道   次要</span><br><span class="line">如果您需要查看一个子字符串是否位于字符串中某个特定点之外，则可以测试该子字符串与该目标点的indexOf，也可以使用该起始点参数的indexOf版本。 后者可以更清楚，因为结果是针对-1测试的，这是一个容易识别的“未找到”指标</span><br><span class="line">22、&quot;java.lang.Error&quot; should not be extended</span><br><span class="line">坏味道   主要</span><br><span class="line">java.lang.Error及其子类表示异常情况，例如OutOfMemoryError，它只能由Java虚拟机进行处理。</span><br><span class="line">23、&quot;java.nio.Files#delete&quot; should be preferred</span><br><span class="line">坏味道   主要</span><br><span class="line">Files.delete(path)道选</span><br><span class="line">24、&quot;java.time&quot; classes should be used for dates and times</span><br><span class="line">坏味道   主要</span><br><span class="line">Date 和 Calendar类非线程同步，推荐使用LocalDate</span><br><span class="line">25、&quot;Lock&quot; objects should not be &quot;synchronized&quot;</span><br><span class="line">坏味道   主要</span><br><span class="line">“锁定”对象不应“同步”</span><br><span class="line">java.util.concurrent.locks.Lock提供比同步块更强大和灵活的锁定操作，应该使用tryLock（）和unlock（）锁定和解锁这些对象</span><br><span class="line">26、&quot;main&quot; should not &quot;throw&quot; anything</span><br><span class="line">坏味道   阻断</span><br><span class="line">main方法不应该抛出异常</span><br><span class="line">27、&quot;NullPointerException&quot; should not be caught</span><br><span class="line">坏味道   主要</span><br><span class="line">空指针不应捕获处理，应该避免NullPointerException，而不是被捕获</span><br><span class="line">28、&quot;NullPointerException&quot; should not be explicitly thrown</span><br><span class="line">坏味道   主要</span><br><span class="line">“NullPointerException”不应该被显式抛出</span><br><span class="line">29、&quot;Object.finalize()&quot; should remain protected (versus public) when overriding</span><br><span class="line">坏味道   严重</span><br><span class="line">重写finalizey方法应为protected</span><br><span class="line">30、&quot;Object.wait(...)&quot; and &quot;Condition.await(...)&quot; should be called inside a &quot;while&quot; loop</span><br><span class="line">坏味道   严重</span><br><span class="line">“Object.wait（...）”和“Condition.await（...）”应该在“while”循环内调用</span><br><span class="line">31、&quot;Object.wait(...)&quot; should never be called on objects that implement &quot;java.util.concurrent.locks.Condition&quot;</span><br><span class="line">坏味道   主要</span><br><span class="line">不应该在实现“java.util.concurrent.locks.Condition”的对象上调用“Object.wait（...）”</span><br><span class="line">32、&quot;Optional&quot; should not be used for parameters</span><br><span class="line">坏味道   主要</span><br><span class="line">Optional不要被用作参数</span><br><span class="line">33、&quot;Preconditions&quot; and logging arguments should not require evaluation</span><br><span class="line">坏味道   主要</span><br><span class="line">将连接的字符串传递到日志记录方法也可能导致不必要的性能消耗，因为每次调用该方法时将执行级联，无论日志级别是否足够低以显示消息</span><br><span class="line">34、&quot;private&quot; methods called only by inner classes should be moved to those classes</span><br><span class="line">坏味道   次要</span><br><span class="line">只被内部类调用的方法，应该在内部类内部</span><br><span class="line">35、&quot;private&quot; methods that don&#39;t access instance data should be &quot;static&quot;</span><br><span class="line">坏味道   次要</span><br><span class="line">不访问实例数据的“私有”方法应该是“静态”</span><br><span class="line">36、&quot;readObject&quot; should not be &quot;synchronized&quot;</span><br><span class="line">坏味道   主要</span><br><span class="line">“readObject”不应该被“同步”</span><br><span class="line">37、&quot;readResolve&quot; methods should be inheritable</span><br><span class="line">坏味道   严重</span><br><span class="line">“readResolve”方法应该是可继承的</span><br><span class="line">38、&quot;ResultSet.isLast()&quot; should not be used</span><br><span class="line">坏味道   主要</span><br><span class="line">ResultSet.isLast()不应用</span><br><span class="line">39、&quot;Serializable&quot; classes should have a version id</span><br><span class="line">坏味道   严重</span><br><span class="line">“Serializable”类应该有一个版本号</span><br><span class="line">40、&quot;Serializable&quot; inner classes of &quot;Serializable&quot; classes should be static</span><br><span class="line">坏味道   次要</span><br><span class="line">实现序列化的内部类应该是静态的</span><br><span class="line">41、&quot;static&quot; members should be accessed statically</span><br><span class="line">坏味道   主要</span><br><span class="line">“静态”成员应类访问</span><br><span class="line">42、&quot;Stream.anyMatch()&quot; should be preferred</span><br><span class="line">坏味道   次要</span><br><span class="line">“Stream.anyMatch（）”应该是首选的</span><br><span class="line">43、&quot;switch case&quot; clauses should not have too many lines of code</span><br><span class="line">坏味道   主要</span><br><span class="line">默认  5</span><br><span class="line">“switch case”子句不应该有太多的代码行</span><br><span class="line">44、&quot;switch&quot; statements should end with &quot;default&quot; clauses</span><br><span class="line">坏味道   严重</span><br><span class="line">“switch”语句应以“default”子句结尾</span><br><span class="line">45、&quot;switch&quot; statements should have at least 3 &quot;case&quot; clauses</span><br><span class="line">坏味道   次要</span><br><span class="line">“switch”语句应具有至少3个“case”子句，可以用if替代</span><br><span class="line">46、&quot;switch&quot; statements should not contain non-case labels</span><br><span class="line">坏味道   阻断</span><br><span class="line">switch语句不用包含非case标签</span><br><span class="line">47、&quot;switch&quot; statements should not have too many &quot;case&quot; clauses</span><br><span class="line">坏味道   主要</span><br><span class="line">默认 30</span><br><span class="line">switch语句不应包含太多case语句</span><br><span class="line">48、&quot;Thread.sleep&quot; should not be used in tests</span><br><span class="line">坏味道   主要</span><br><span class="line">“Thread.sleep”不应该在测试中使用</span><br><span class="line">49、&quot;ThreadLocal.withInitial&quot; should be preferred</span><br><span class="line">坏味道   次要</span><br><span class="line">“ThreadLocal.withInitial”应该是首选</span><br><span class="line">ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal &#x3D; ThreadLocal.withInitial(ArrayList::new);</span><br><span class="line">50、&quot;Threads&quot; should not be used where &quot;Runnables&quot; are expected</span><br><span class="line">坏味道   主要</span><br><span class="line">Noncompliant Code Example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Thread r &#x3D;new Thread() &#123;</span><br><span class="line">int p;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">while(true)</span><br><span class="line">System.out.println(&quot;a&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">new Thread(r).start();  &#x2F;&#x2F; Noncompliant</span><br><span class="line">Compliant Solution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Runnable r &#x3D;new Runnable() &#123;</span><br><span class="line">int p;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">while(true)</span><br><span class="line">System.out.println(&quot;a&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">new Thread(r).start();</span><br><span class="line">51、&quot;throws&quot; declarations should not be superfluous</span><br><span class="line">坏味道   次要</span><br><span class="line">“抛出”声明不应该是多余的</span><br><span class="line">52、&quot;toString()&quot; should never be called on a String object</span><br><span class="line">坏味道   次要</span><br><span class="line">不应该在String对象上调用“toString（）”</span><br><span class="line">53、&quot;URL.hashCode&quot; and &quot;URL.equals&quot; should be avoided</span><br><span class="line">坏味道   主要</span><br><span class="line">应避免使用“URL.hashCode”和“URL.equals”</span><br><span class="line">54、&quot;writeObject&quot; should not be the only &quot;synchronized&quot; code in a class</span><br><span class="line">坏味道   主要</span><br><span class="line">“writeObject”不应该是类中唯一的“同步”代码</span><br><span class="line">55、 @FunctionalInterface annotation should be used to flag Single Abstract Method interfaces</span><br><span class="line">坏味道   严重</span><br><span class="line">一个只有一个抽象方法的接口应加FunctionalInterface注释</span><br><span class="line">56、A &quot;while&quot; loop should be used instead of a &quot;for&quot; loop</span><br><span class="line">坏味道   次要</span><br><span class="line">当在for循环中仅定义条件表达式，并且缺少初始化和增量表达式时，应使用while循环来增加可读性</span><br><span class="line">57、A close curly brace should be located at the beginning of a line</span><br><span class="line">坏味道   次要</span><br><span class="line">共享编码约定使得团队有可能有效地进行协作。 这个规则使得强制要在行的开头放置一个大括号。</span><br><span class="line">58、A field should not duplicate the name of its containing class</span><br><span class="line">坏味道   主要</span><br><span class="line">字段不应该重复其包含的类的名称</span><br><span class="line">59、Abbreviation As Word In Name</span><br><span class="line">坏味道   主要</span><br><span class="line">检查验证标识符名称中的缩写（连续大写字母）长度，还允许执行骆驼案例命名</span><br><span class="line">60、Abstract Class Name</span><br><span class="line">坏味道   主要</span><br><span class="line">检查抽象类名是否符合指定的格式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ignoreName  </span><br><span class="line">Controls whether to ignore checking the name. Realistically only useful if using the check to identify that match name and do not have the abstract modifier name. Default is false.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">ignoreModifier</span><br><span class="line">Controls whether to ignore checking for the abstract modifier on classes that match the name. Default is false.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">format  </span><br><span class="line">Regular expression</span><br><span class="line">默认值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">61、Abstract class names should comply with a naming convention</span><br><span class="line">坏味道   次要</span><br><span class="line">抽象类名称应符合命名约定</span><br><span class="line"></span><br><span class="line">     Regular expression used to check the abstract class names against.</span><br><span class="line">     默认值</span><br><span class="line">     ^Abstract[A-Z][a-zA-Z0-9]*$</span><br><span class="line">62、Abstract classes without fields should be converted to interfaces</span><br><span class="line">坏味道   次要</span><br><span class="line">没有字段的抽象类应该转换为接口</span><br><span class="line">63、Abstract methods should not be redundant</span><br><span class="line">坏味道   次要</span><br><span class="line">抽象方法不应该是多余的</span><br><span class="line">64、An abstract class should have both abstract and concrete methods</span><br><span class="line">坏味道   次要</span><br><span class="line">抽象类应该有抽象和具体的方法</span><br><span class="line">65、An open curly brace should be located at the beginning of a line</span><br><span class="line">坏味道   次要</span><br><span class="line">开放的大括号应位于一行的开头</span><br><span class="line">66、An open curly brace should be located at the end of a line</span><br><span class="line">坏味道   次要</span><br><span class="line">开放的大括号应位于一行的末尾</span><br><span class="line">67、Annotation arguments should appear in the order in which they were declared</span><br><span class="line">坏味道   次要</span><br><span class="line">注释参数应按其声明顺序显示</span><br><span class="line">68、Annotation Location</span><br><span class="line">坏味道   主要</span><br><span class="line">注释位置</span><br><span class="line">allowSamelineSingleParameterlessAnnotation  </span><br><span class="line">To allow single parameterless annotation to be located on the same line as target element.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">allowSamelineParameterizedAnnotation</span><br><span class="line">To allow parameterized annotation to be located on the same line as target element.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowSamelineMultipleAnnotations</span><br><span class="line">To allow annotation to be located on the same line as target element.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">tokens  </span><br><span class="line">tokens to check</span><br><span class="line">默认值</span><br><span class="line">CLASS_DEF,INTERFACE_DEF,ENUM_DEF,METHOD_DEF,CTOR_DEF,VARIABLE_DEF</span><br><span class="line">69、Annotation repetitions should not be wrapped</span><br><span class="line">坏味道   次要</span><br><span class="line">注释重复不应包装</span><br><span class="line">70、Annotation Use Style</span><br><span class="line">坏味道   主要</span><br><span class="line"></span><br><span class="line">trailingArrayComma</span><br><span class="line">Defines the policy for trailing comma in arrays. Default is never.</span><br><span class="line">closingParens  </span><br><span class="line">Defines the policy for ending parenthesis. Default is never.</span><br><span class="line">elementStyle  </span><br><span class="line">Defines the annotation element styles. Default value is compact_no_array.</span><br><span class="line">71、Anon Inner Length</span><br><span class="line">坏味道   主要</span><br><span class="line">检查长匿名内部类。</span><br><span class="line">max</span><br><span class="line">maximum allowable number of lines. Default is 20.</span><br><span class="line">72、Anonymous inner classes containing only one method should become lambdas</span><br><span class="line">坏味道   主要</span><br><span class="line">只有一个方法的匿名内部类应该变成lambdas</span><br><span class="line">jdk8以下自动禁用</span><br><span class="line">73、Array designators &quot;[]&quot; should be located after the type in method signatures</span><br><span class="line">坏味道   次要</span><br><span class="line">数组代号“[]”应位于方法签名类型之后</span><br><span class="line">74、Array designators &quot;[]&quot; should be on the type, not the variable</span><br><span class="line">坏味道   次要</span><br><span class="line">数组代号“[]”应位于类型之后而不是变量之后</span><br><span class="line">75、Array Trailing Comma</span><br><span class="line">坏味道   主要</span><br><span class="line">检查数组初始化是否包含逗号</span><br><span class="line">76、Array Type Style</span><br><span class="line">坏味道   次要</span><br><span class="line">数组类型样式</span><br><span class="line">javaStyle  </span><br><span class="line">Controls whether to enforce Java style (true) or C style (false). Default is true.</span><br><span class="line">77、Arrays should not be created for varargs parameters</span><br><span class="line">坏味道   次要</span><br><span class="line">不应为varargs参数创建数组</span><br><span class="line">78、Artifact ids should follow a naming convention</span><br><span class="line">坏味道   次要</span><br><span class="line">共享命名约定允许团队有效协作。 当pom的artifactId与提供的正则表达式不匹配时，此规则引发了一个问题</span><br><span class="line"></span><br><span class="line">regex</span><br><span class="line">The regular expression the &quot;artifactId&quot; should match</span><br><span class="line">默认值</span><br><span class="line">[a-z][a-z-0-9]+</span><br><span class="line">79、Assertions should be complete</span><br><span class="line">坏味道   阻断</span><br><span class="line">断言应该是完整的</span><br><span class="line">80、Assignments should not be made from within sub-expressions</span><br><span class="line">坏味道   主要</span><br><span class="line">不应在子表达式中作出赋值操作当赋值变量没有用到</span><br><span class="line">81、At-clause Order</span><br><span class="line">坏味道   主要</span><br><span class="line">检查从句顺序</span><br><span class="line">tagOrder</span><br><span class="line">allows to specify the order by tags.</span><br><span class="line">默认值</span><br><span class="line">@author,@version,@param,@return,@throws,@exception,@see,@since,@serial,@serialField,@serialData,@deprecated</span><br><span class="line">target  </span><br><span class="line">allows to specify targets to check at-clauses.</span><br><span class="line">82、Avoid Escaped Unicode Characters</span><br><span class="line">坏味道   主要</span><br><span class="line">避免转义的Unicode字符</span><br><span class="line"></span><br><span class="line">allowIfAllCharactersEscaped</span><br><span class="line">Allow if all characters in literal are escaped.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowNonPrintableEscapes</span><br><span class="line">Allow non-printable escapes.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowByTailComment</span><br><span class="line">Allow use escapes if trail comment is present.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowEscapesForControlCharacters</span><br><span class="line">Allow use escapes for non-printable(control) characters.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">83、Avoid Inline Conditionals</span><br><span class="line">坏味道   次要</span><br><span class="line">避免内联条件</span><br><span class="line">84、Avoid Nested Blocks</span><br><span class="line">坏味道   主要</span><br><span class="line">避免嵌套块</span><br><span class="line">allowInSwitchCase</span><br><span class="line">Allow nested blocks in case statements. Default is false.</span><br><span class="line">85、Avoid Star Import</span><br><span class="line">坏味道   次要</span><br><span class="line">检查发现使用*符号的导入语句</span><br><span class="line">excludes  </span><br><span class="line">packages where star imports are allowed. Note that this property is not recursive, subpackages of excluded packages are not automatically excluded.</span><br><span class="line">allowStaticMemberImports</span><br><span class="line">whether to allow starred static member imports like &lt;code&gt;import static org.junit.Assert.*;&lt;&#x2F;code&gt;. Default is false.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowClassImports</span><br><span class="line">whether to allow starred class imports like &lt;code&gt;import java.util.*;&lt;&#x2F;code&gt;. Default is false.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">86、Avoid Static Import</span><br><span class="line">坏味道   次要</span><br><span class="line">避免静态导入</span><br><span class="line">87、Boolean checks should not be inverted</span><br><span class="line">坏味道   次要</span><br><span class="line">布尔检查不应该被反转</span><br><span class="line">Noncompliant Code Example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if ( !(a &#x3D;&#x3D; 2)) &#123; ...&#125;  &#x2F;&#x2F; Noncompliant</span><br><span class="line">boolean b &#x3D; !(i &lt; 10);  &#x2F;&#x2F; Noncompliant</span><br><span class="line">Compliant Solution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (a !&#x3D; 2) &#123; ...&#125;</span><br><span class="line">boolean b &#x3D; (i &gt;&#x3D; 10);</span><br><span class="line">88、Boolean Expression Complexity</span><br><span class="line">坏味道   主要</span><br><span class="line">将嵌套布尔运算符（&amp;&amp;，||和^）限制为指定的深度（默认&#x3D; 3）。</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum allowed number of boolean operations in one expression. Default is 3.</span><br><span class="line">默认值</span><br><span class="line">3</span><br><span class="line">tokens  </span><br><span class="line">tokens to check. Default is LAND,BAND,LOR,BOR,BXOR.</span><br><span class="line">默认值</span><br><span class="line">LAND,BAND,LOR,BOR,BXOR</span><br><span class="line">89、Boolean expressions should not be gratuitous</span><br><span class="line">坏味道   主要</span><br><span class="line">如果boolean表达式的值是已定的，那么boolean表达式是没有必要的可以移除</span><br><span class="line">90、Boolean literals should not be redundant</span><br><span class="line">坏味道   次要</span><br><span class="line">boolean不需再与true,false比较作为boolean表达式</span><br><span class="line">91、Branches should have sufficient coverage by tests</span><br><span class="line">坏味道   主要</span><br><span class="line">分支应有足够的测试覆盖</span><br><span class="line"></span><br><span class="line">minimumBranchCoverageRatio</span><br><span class="line">默认值</span><br><span class="line">65</span><br><span class="line">92、Case insensitive string comparisons should be made without intermediate upper or lower casing</span><br><span class="line">坏味道   次要</span><br><span class="line">使用toLowerCase（）或toUpperCase（）来使不区分大小写的比较无效，因为它需要创建临时的中间String对象。</span><br><span class="line">93、Catch Parameter Name</span><br><span class="line">坏味道   主要</span><br><span class="line">检查catch参数名是否符合format属性指定的格式</span><br><span class="line"></span><br><span class="line">format  </span><br><span class="line">Specifies valid identifiers. Default is ^(e|t|ex|[a-z][a-z][a-zA-Z]+)$</span><br><span class="line">默认值</span><br><span class="line">^(e|t|ex|[a-z][a-z][a-zA-Z]+)$</span><br><span class="line">94、Catches should be combined</span><br><span class="line">坏味道   次要</span><br><span class="line">由于Java 7可以一次捕获多个异常。 因此，当多个catch块具有相同的代码时，它们应该被组合以便更好的可读性，sonar.java.source低于7时，此规则将自动禁用</span><br><span class="line">95、Checked exceptions should not be thrown</span><br><span class="line">坏味道   主要</span><br><span class="line">检查的异常不应该被抛出，要处理</span><br><span class="line">96、Child class fields should not shadow parent class fields</span><br><span class="line">坏味道   阻断</span><br><span class="line">子类字段不应该private父类的非private字段</span><br><span class="line">97、Class Data Abstraction Coupling</span><br><span class="line">坏味道   主要</span><br><span class="line">度量衡量给定类中其他类的实例化数。</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed. Default is 7.</span><br><span class="line">excludedClasses</span><br><span class="line">User-configured class names to ignore.</span><br><span class="line">excludeClassesRegexps</span><br><span class="line">User-configured regular expressions to ignore classes</span><br><span class="line">excludedPackages</span><br><span class="line">User-configured packages to ignore</span><br><span class="line">98、Class Fan Out Complexity</span><br><span class="line">坏味道   主要</span><br><span class="line">类的依赖类数量</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed. Default is 20.</span><br><span class="line">excludedClasses</span><br><span class="line">User-configured class names to ignore</span><br><span class="line">excludeClassesRegexps</span><br><span class="line">User-configured regular expressions to ignore classes</span><br><span class="line">excludedPackages</span><br><span class="line">User-configured packages to ignore</span><br><span class="line">99、Class names should comply with a naming convention</span><br><span class="line">坏味道   次要</span><br><span class="line">类名应符合命名约定</span><br><span class="line"></span><br><span class="line">format  </span><br><span class="line">Regular expression used to check the class names against.</span><br><span class="line">默认值</span><br><span class="line">^[A-Z][a-zA-Z0-9]*$</span><br><span class="line">100、Class names should not shadow interfaces or superclasses</span><br><span class="line">坏味道   严重</span><br><span class="line">类名称不应该影响接口或超类（相同）</span><br><span class="line">101、Class Type(Generic) Parameter Name</span><br><span class="line">坏味道   主要</span><br><span class="line">泛型参数名称符合指定的格式</span><br><span class="line"></span><br><span class="line">format  </span><br><span class="line">Regular expression</span><br><span class="line">默认值</span><br><span class="line">^[A-Z]$</span><br><span class="line">102、Classes and enums with private members should have a constructor</span><br><span class="line">坏味道   主要</span><br><span class="line">有私有成员的类和枚举应该有一个构造函数</span><br><span class="line">103、Classes and methods that rely on the default system encoding should not be used</span><br><span class="line">坏味道   次要</span><br><span class="line">不应使用依赖于默认系统编码的类和方法</span><br><span class="line">104、Classes from &quot;sun.*&quot; packages should not be used</span><br><span class="line">坏味道   主要</span><br><span class="line">不得使用“sun.*”软件包的类,sun类*或com.sun *包被视为实现细节，不属于Java API</span><br><span class="line"></span><br><span class="line">Exclude  </span><br><span class="line">Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc</span><br><span class="line">105、Classes named like &quot;Exception&quot; should extend &quot;Exception&quot; or a subclass</span><br><span class="line">坏味道   主要</span><br><span class="line">名为“异常”的类应该扩展“异常”或者一个子类</span><br><span class="line">106、Classes should not access their own subclasses during initialization</span><br><span class="line">坏味道   严重</span><br><span class="line">类在初始化期间不应访问自己的子类</span><br><span class="line">107、Classes should not be coupled to too many other classes (Single Responsibility Principle)</span><br><span class="line">坏味道   主要</span><br><span class="line">类不应与太多其他类（单一责任原则）相耦合（依赖）</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum number of classes a single class is allowed to depend upon</span><br><span class="line">默认值</span><br><span class="line">20</span><br><span class="line">108、Classes should not be empty</span><br><span class="line">坏味道   次要</span><br><span class="line">空类没意义，作为公共扩展点可以作为接口</span><br><span class="line">109、Classes should not be too complex</span><br><span class="line">坏味道   严重  废弃</span><br><span class="line">类不应太复杂</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum complexity allowed.</span><br><span class="line">默认值</span><br><span class="line">200</span><br><span class="line">110、Classes should not have too many &quot;static&quot; imports</span><br><span class="line">坏味道   主要</span><br><span class="line">静态导入类允许您使用其公共静态成员，而不必使用类名。 这可以很方便，但如果静态导入太多的类，你的代码可能会变得混乱，很难维护</span><br><span class="line"></span><br><span class="line">threshold  </span><br><span class="line">The maximum number of static imports allowed</span><br><span class="line">默认值</span><br><span class="line">4</span><br><span class="line">111、Classes should not have too many fields</span><br><span class="line">坏味道   主要</span><br><span class="line">类不应有太多字段</span><br><span class="line">countNonpublicFields</span><br><span class="line">Whether or not to include non-public fields in the count</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">maximumFieldThreshold</span><br><span class="line">The maximum number of fields</span><br><span class="line">默认值</span><br><span class="line">20</span><br><span class="line">112、Classes should not have too many methods</span><br><span class="line">坏味道   主要</span><br><span class="line">类不应该有太多方法</span><br><span class="line"></span><br><span class="line">countNonpublicMethods</span><br><span class="line">Whether or not to include non-public methods in the count.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">maximumMethodThreshold</span><br><span class="line">The maximum number of methods authorized in a class.</span><br><span class="line">默认值</span><br><span class="line">35</span><br><span class="line">113、Classes that override &quot;clone&quot; should be &quot;Cloneable&quot; and call &quot;super.clone()&quot;</span><br><span class="line">坏味道   次要</span><br><span class="line">覆盖“克隆”的类应该是“可克隆”，并调用“super.clone（）”</span><br><span class="line">114、Classes with only &quot;static&quot; methods should not be instantiated</span><br><span class="line">坏味道   主要</span><br><span class="line">只有“静态”方法的类不应该被实例化</span><br><span class="line">115、Classes without &quot;public&quot; constructors should be &quot;final&quot;</span><br><span class="line">坏味道   次要</span><br><span class="line">只有私有构造函数的类应该被标记为final，以防止任何错误的扩展尝试。</span><br><span class="line">116、Close curly brace and the next &quot;else&quot;, &quot;catch&quot; and &quot;finally&quot; keywords should be located on the same line</span><br><span class="line">坏味道   次要</span><br><span class="line">关闭大括号，下一个“else”，“catch”和“finally”关键字应位于同一行</span><br><span class="line">117、Close curly brace and the next &quot;else&quot;, &quot;catch&quot; and &quot;finally&quot; keywords should be on two different lines</span><br><span class="line">坏味道   次要</span><br><span class="line">关闭大括号和下一个“else”，“catch”和“finally”关键字应该在两个不同的行</span><br><span class="line">118、Cognitive Complexity of methods should not be too high</span><br><span class="line">坏味道   严重</span><br><span class="line">认知复杂度是衡量一种方法的控制流程难以理解的度量。 认知复杂性较高的方法难以维持。</span><br><span class="line">Threshold</span><br><span class="line">The maximum authorized complexity.</span><br><span class="line">默认值</span><br><span class="line">15</span><br><span class="line">119、Collapsible &quot;if&quot; statements should be merged</span><br><span class="line">坏味道   主要</span><br><span class="line">可合并的“if”语句应该合并</span><br><span class="line">120、Collection methods with O(n) performance should be used carefully</span><br><span class="line">坏味道   次要</span><br><span class="line">应仔细使用具有O（n）性能的集合方法</span><br><span class="line">121、Collection.isEmpty() should be used to test for emptiness</span><br><span class="line">坏味道   次要</span><br><span class="line">应该使用Collection.isEmpty（）来测试空集合</span><br><span class="line">122、Comment pattern matcher</span><br><span class="line">坏味道   次要</span><br><span class="line">该规则允许在TODO，NOPMD，...之外的任何类型的内容中找到任何类型的模式，NOSONAR除外</span><br><span class="line">123、Comments Indentation</span><br><span class="line">坏味道   次要</span><br><span class="line">注释缩进</span><br><span class="line"></span><br><span class="line">tokens  </span><br><span class="line">tokens to check</span><br><span class="line">默认值</span><br><span class="line">SINGLE_LINE_COMMENT,BLOCK_COMMENT_BEGIN</span><br><span class="line">124、Comments should not be located at the end of lines of code</span><br><span class="line">坏味道   次要</span><br><span class="line">注释不应位于代码行的末尾</span><br><span class="line"></span><br><span class="line">legalTrailingCommentPattern</span><br><span class="line">Description Pattern for text of trailing comments that are allowed. By default, comments containing only one word.</span><br><span class="line">默认值</span><br><span class="line">^\s*+[^\s]++$</span><br><span class="line">125、Comparators should be &quot;Serializable&quot;</span><br><span class="line">坏味道   严重</span><br><span class="line">Comparators should be &quot;Serializable&quot;</span><br><span class="line">126、Conditionals should start on new lines</span><br><span class="line">坏味道   严重</span><br><span class="line">条件表达式应该起始新行</span><br><span class="line">127、Constant Name</span><br><span class="line">坏味道   次要</span><br><span class="line">检查常数名称是否符合指定的格式</span><br><span class="line">applyToPackage</span><br><span class="line">Controls whether to apply the check to package-private member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">format  </span><br><span class="line">Regular expression</span><br><span class="line">默认值</span><br><span class="line">^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</span><br><span class="line">applyToPublic  </span><br><span class="line">Controls whether to apply the check to public member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">applyToProtected</span><br><span class="line">Controls whether to apply the check to protected member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">applyToPrivate</span><br><span class="line">Controls whether to apply the check to private member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">128、Constant names should comply with a naming convention</span><br><span class="line">坏味道   严重</span><br><span class="line">常数名称应符合命名约定</span><br><span class="line"></span><br><span class="line">format  </span><br><span class="line">Regular expression used to check the constant names against.</span><br><span class="line">默认值</span><br><span class="line">^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</span><br><span class="line">129、Constants should not be defined in interfaces</span><br><span class="line">坏味道   严重</span><br><span class="line">常量不应在接口中定义</span><br><span class="line">130、Constructors should not be used to instantiate &quot;String&quot; and primitive-wrapper classes</span><br><span class="line">坏味道   主要</span><br><span class="line">构造函数不应用于实例化“String”和原始包装类</span><br><span class="line">131、Constructors should only call non-overridable methods</span><br><span class="line">坏味道   严重</span><br><span class="line">构造函数只应该调用不可覆盖的方法</span><br><span class="line">132、Control flow statements &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, &quot;switch&quot; and &quot;try&quot; should not be nested too deeply</span><br><span class="line">坏味道   严重</span><br><span class="line">控制流程语句“if”，“for”，“while”，“switch”和“try”不能嵌套太深</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum allowed control flow statement nesting depth.</span><br><span class="line">默认值</span><br><span class="line">3</span><br><span class="line">133、Control structures should use curly braces</span><br><span class="line">坏味道   严重</span><br><span class="line">控制结构应使用花括号</span><br><span class="line">134、Covariant Equals</span><br><span class="line">坏味道   严重</span><br><span class="line">检查一个类是否定义了一个协变方法equals，那么它定义了方法equals（java.lang.Object）</span><br><span class="line">135、Custom Import Order</span><br><span class="line">坏味道   主要</span><br><span class="line">检查导入声明组按照用户指定的顺序显示。 如果有导入，但是在组态中未指定其组，则导入应放在导入列表的末尾。</span><br><span class="line">thirdPartyPackageRegExp</span><br><span class="line">RegExp for THIRDPARTY_PACKAGE group imports.</span><br><span class="line">默认值</span><br><span class="line">^$</span><br><span class="line">separateLineBetweenGroups</span><br><span class="line">Force empty line separator between import groups.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">sortImportsInGroupAlphabetically</span><br><span class="line">Force grouping alphabetically.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">specialImportsRegExp</span><br><span class="line">RegExp for SPECIAL_IMPORTS group imports.</span><br><span class="line">默认值</span><br><span class="line">^$</span><br><span class="line">customImportOrderRules</span><br><span class="line">List of order declaration customizing by user.</span><br><span class="line">standardPackageRegExp</span><br><span class="line">RegExp for STANDARD_JAVA_PACKAGE group imports.</span><br><span class="line">默认值</span><br><span class="line">java|javax</span><br><span class="line">136、Cyclomatic Complexity</span><br><span class="line">坏味道   主要</span><br><span class="line">检查针对特定限制的方法的循环复杂性</span><br><span class="line"></span><br><span class="line">switchBlockAsSingleDecisionPoint</span><br><span class="line">whether to treat the whole switch block as a single decision point</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed.</span><br><span class="line">默认值</span><br><span class="line">10</span><br><span class="line">tokens  </span><br><span class="line">tokens to check</span><br><span class="line">默认值</span><br><span class="line">LITERAL_WHILE,LITERAL_DO,LITERAL_FOR,LITERAL_IF,LITERAL_SWITCH,LITERAL_CASE,LITERAL_CATCH,QUESTION,LAND,LOR</span><br><span class="line">137、Dead stores should be removed</span><br><span class="line">坏味道   主要</span><br><span class="line">没用的存储应该除移</span><br><span class="line">138、Declaration Order</span><br><span class="line">坏味道   提示</span><br><span class="line">声名的顺序</span><br><span class="line">ignoreModifiers</span><br><span class="line">Whether to ignore modifiers</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">ignoreConstructors</span><br><span class="line">Whether to ignore constructors</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">139、Declarations should use Java collection interfaces such as &quot;List&quot; rather than specific implementation classes such as &quot;LinkedList&quot;</span><br><span class="line">坏味道   次要</span><br><span class="line">声明应该使用Java集合接口，例如“List”，而不是特定的实现类，如“LinkedList”</span><br><span class="line">140、Default annotation parameter values should not be passed as arguments</span><br><span class="line">坏味道   次要</span><br><span class="line">默认注解参数值不应作为参数传递</span><br><span class="line">141、Default Comes Last</span><br><span class="line">坏味道   主要</span><br><span class="line">检查在switch语句中的所有情况之后的默认值。</span><br><span class="line"></span><br><span class="line">skipIfLastAndSharedWithCase</span><br><span class="line">whether to allow default along with case if they are not last</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">142、Deprecated &quot;$&#123;pom&#125;&quot; properties should not be used</span><br><span class="line">坏味道   次要</span><br><span class="line">不应使用不推荐使用的“$ &#123;pom&#125;”属性</span><br><span class="line">143、Deprecated code should be removed</span><br><span class="line">坏味道   提示</span><br><span class="line">应删除弃用的代码</span><br><span class="line">144、Deprecated elements should have both the annotation and the Javadoc tag</span><br><span class="line">坏味道   主要</span><br><span class="line">弃用元素应有注解和doc标签</span><br><span class="line">145、Descendant Token</span><br><span class="line">坏味道   次要</span><br><span class="line">检查其他令牌下的限制令牌</span><br><span class="line">maximumMessage</span><br><span class="line">error message when the maximum count is exceeded</span><br><span class="line">maximumDepth  </span><br><span class="line">the maximum depth for descendant counts</span><br><span class="line">limitedTokens  </span><br><span class="line">set of tokens with limited occurrences as descendants</span><br><span class="line">maximumNumber  </span><br><span class="line">a maximum count for descendants</span><br><span class="line">minimumMessage</span><br><span class="line">error message when the maximum count is exceeded</span><br><span class="line">minimumNumber  </span><br><span class="line">a minimum count for descendants</span><br><span class="line">minimumDepth  </span><br><span class="line">the minimum depth for descendant counts</span><br><span class="line">sumTokenCounts</span><br><span class="line">whether the number of tokens found should be calculated from the sum of the individual token counts</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">146、Design For Extension</span><br><span class="line">坏味道   次要</span><br><span class="line">扩展设计</span><br><span class="line"></span><br><span class="line">ignoredAnnotations</span><br><span class="line">Annotations which allow the check to skip the method from validation.</span><br><span class="line">默认值</span><br><span class="line">Test,Before,After,BeforeClass,AfterClass</span><br><span class="line">147、EJB interceptor exclusions should be declared as annotations</span><br><span class="line">坏味道   阻断</span><br><span class="line">EJB interceptor exclusions应该以注解的形式使用</span><br><span class="line">148、Empty arrays and collections should be returned instead of null</span><br><span class="line">坏味道   主要</span><br><span class="line">应该返回空数组和集合，而不是null</span><br><span class="line">149、Empty Block</span><br><span class="line">坏味道   主要</span><br><span class="line">Checks for empty blocks</span><br><span class="line">tokens</span><br><span class="line">blocks to check</span><br><span class="line">默认值</span><br><span class="line">LITERAL_WHILE,LITERAL_TRY,LITERAL_FINALLY,LITERAL_DO,LITERAL_IF,LITERAL_ELSE,LITERAL_FOR,INSTANCE_INIT,STATIC_INIT,LITERAL_SWITCH,LITERAL_SYNCHRONIZED</span><br><span class="line">option  </span><br><span class="line">policy on block contents</span><br><span class="line">默认值</span><br><span class="line">stmt</span><br><span class="line">150、Empty catch block</span><br><span class="line">坏味道   主要</span><br><span class="line">检查空的catch块。 有两个选项可以使验证更加精确（默认情况下，检查允许空的catch块和任何注释）</span><br><span class="line"></span><br><span class="line">exceptionVariableName</span><br><span class="line">Format of skipping exception&#39;&#39;s variable name.</span><br><span class="line">默认值</span><br><span class="line">^$</span><br><span class="line">commentFormat  </span><br><span class="line">Format of comment.</span><br><span class="line">默认值</span><br><span class="line">.*</span><br><span class="line">151、Empty For Initializer Pad</span><br><span class="line">坏味道   次要</span><br><span class="line">检查初始化程序为空的填充; 那是空的是否需要一个空的初始化程序，或者禁止这样的空格。 示例：for（; i &lt;j; i ++，j--）</span><br><span class="line"></span><br><span class="line">option  </span><br><span class="line">policy on how to pad an empty for iterator</span><br><span class="line">152、Empty For Iterator Pad</span><br><span class="line">坏味道   次要</span><br><span class="line">检查一个空的填充迭代器; 那就是空格是否需要一个空的迭代器，否则这样的空格是被禁止的。 示例：for（Iterator foo &#x3D; very.long.line.iterator（）; foo.hasNext（）;）</span><br><span class="line"></span><br><span class="line">option  </span><br><span class="line">policy on how to pad an empty for iterator</span><br><span class="line">153、Empty Line Separator</span><br><span class="line">坏味道   主要</span><br><span class="line">在标题，包，所有导入声明，字段，构造函数，方法，嵌套类，静态初始化器和实例初始化器之后检查空行分隔符</span><br><span class="line">allowNoEmptyLineBetweenFields</span><br><span class="line">Allow no empty line between fields</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowMultipleEmptyLines</span><br><span class="line">Allows multiple empty lines between class members.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">tokens  </span><br><span class="line">assignments to check</span><br><span class="line">默认值</span><br><span class="line">PACKAGE_DEF,IMPORT,CLASS_DEF,INTERFACE_DEF,ENUM_DEF,STATIC_INIT,INSTANCE_INIT,METHOD_DEF,CTOR_DEF,VARIABLE_DEF</span><br><span class="line">allowMultipleEmptyLinesInsideClassMembers</span><br><span class="line">Allow multiple empty lines inside class members</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">154、Empty Statement</span><br><span class="line">坏味道   次要</span><br><span class="line">检测空的语句（独立的&#39;;&#39;）。</span><br><span class="line">155、Empty statements should be removed</span><br><span class="line">坏味道   次要</span><br><span class="line">移除空语句</span><br><span class="line">156、Enumeration should not be implemented</span><br><span class="line">坏味道   主要</span><br><span class="line">不应实同Enumeration</span><br><span class="line">157、Equality operators should not be used in &quot;for&quot; loop termination conditions</span><br><span class="line">坏味道   严重</span><br><span class="line">循环终止条件下不应使用平等运算符</span><br><span class="line">158、Equals Avoid Null</span><br><span class="line">坏味道   主要</span><br><span class="line">159、Escaped Unicode characters should not be used</span><br><span class="line">坏味道   主要</span><br><span class="line">不应使用转义的Unicode字符</span><br><span class="line">160、Exception classes should be immutable</span><br><span class="line">坏味道   次要</span><br><span class="line">异常类应该是不可变的</span><br><span class="line">161、Exception handlers should preserve the original exceptions</span><br><span class="line">坏味道   主要</span><br><span class="line">异常处理程序应保留原始异常</span><br><span class="line">162、Exception types should not be tested using &quot;instanceof&quot; in catch blocks</span><br><span class="line">坏味道   主要</span><br><span class="line">异常类型不应该在catch块中使用“instanceof”进行测试</span><br><span class="line">163、Exceptions should not be thrown in finally blocks</span><br><span class="line">坏味道   严重</span><br><span class="line">异常不应该在finally块中抛出</span><br><span class="line">164、Executable Statement Count</span><br><span class="line">坏味道   主要</span><br><span class="line">将可执行语句的数量限制为指定的限制（默认&#x3D; 30）。</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed. Default is 30.</span><br><span class="line">默认值</span><br><span class="line">30</span><br><span class="line">tokens  </span><br><span class="line">members to check</span><br><span class="line">默认值</span><br><span class="line">CTOR_DEF,METHOD_DEF,INSTANCE_INIT,STATIC_INIT</span><br><span class="line">165、Execution of the Garbage Collector should be triggered only by the JVM</span><br><span class="line">坏味道   严重</span><br><span class="line">垃圾收集器的执行只能由JVM触发</span><br><span class="line">166、Exit methods should not be called</span><br><span class="line">坏味道   阻断</span><br><span class="line">调用System.exit（int status）或Rutime.getRuntime（）。exit（int status）调用关闭挂钩并关闭整个Java虚拟机。 调用Runtime.getRuntime（）。halt（int）立即关闭，而不调用关闭挂钩，并跳过完成</span><br><span class="line">167、Explicit Initialization</span><br><span class="line">坏味道   主要</span><br><span class="line">检查任何类或对象成员是否明确地初始化为其类型值的默认值（对于对象引用为空，数字类型为零，对于布尔为char为false）。</span><br><span class="line">168、Expressions should not be too complex</span><br><span class="line">坏味道   严重</span><br><span class="line">表达式不应太复杂</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum number of allowed conditional operators in an expression</span><br><span class="line">默认值</span><br><span class="line">3</span><br><span class="line">169、Extensions and implementations should not be redundant</span><br><span class="line">坏味道   次要</span><br><span class="line">扩展和实现不应该是多余的</span><br><span class="line">170、Fall Through</span><br><span class="line">坏味道   主要</span><br><span class="line">171、Field names should comply with a naming convention</span><br><span class="line">坏味道   次要</span><br><span class="line">字段名称应符合命名约定</span><br><span class="line">format</span><br><span class="line">Regular expression used to check the field names against.</span><br><span class="line">默认值</span><br><span class="line">^[a-z][a-zA-Z0-9]*$</span><br><span class="line">172、Fields in a &quot;Serializable&quot; class should either be transient or serializable</span><br><span class="line">坏味道   严重</span><br><span class="line">“Serializable”类中的字段应该是transient或可序列化的</span><br><span class="line">173、Fields in non-serializable classes should not be &quot;transient&quot;</span><br><span class="line">坏味道   次要</span><br><span class="line">不可序列化类的字段不应该是“transient”</span><br><span class="line">174、Fields should not be initialized to default values</span><br><span class="line">坏味道   次要</span><br><span class="line">不应将字段初始化为默认值</span><br><span class="line">175、File Contents Holder</span><br><span class="line">坏味道   次要</span><br><span class="line">配置为TreeWalker子模块时，保留当前的全局访问文件内容。 例如，过滤器可以通过此模块访问当前文件内容</span><br><span class="line">176、File Length</span><br><span class="line">坏味道   主要</span><br><span class="line">如果源文件变得很长，那么很难理解。 因此，长类通常应该重构到专注于特定任务的几个单独的类中</span><br><span class="line"></span><br><span class="line">fileExtensions</span><br><span class="line">file type extension of files to process</span><br><span class="line">max</span><br><span class="line">maximum allowable number of lines. Default is 2000.</span><br><span class="line">177、File Tab Character</span><br><span class="line">坏味道   次要</span><br><span class="line">检查源代码中没有制表符（&#39;\ t&#39;）</span><br><span class="line"></span><br><span class="line">fileExtensions</span><br><span class="line">file type extension of files to process</span><br><span class="line">eachLine  </span><br><span class="line">whether to report on each line containing a tab, or just the first instance. Default is false.</span><br><span class="line">178、Files should contain an empty new line at the end</span><br><span class="line">坏味道   次要</span><br><span class="line">文件最后应该包含一个空的新行</span><br><span class="line">179、Files should contain only one top-level class or interface each</span><br><span class="line">坏味道   主要</span><br><span class="line">文件应该只包含一个顶级类或接口</span><br><span class="line">180、Files should not be empty</span><br><span class="line">坏味道   次要</span><br><span class="line">删除空文件</span><br><span class="line">181、Files should not have too many lines of code</span><br><span class="line">坏味道   主要</span><br><span class="line">源码文件代码行数检查</span><br><span class="line">182、Modifiers should be declared in the correct order</span><br><span class="line">坏味道   次要</span><br><span class="line">Java语言规范建议按以下顺序列出修饰符：</span><br><span class="line">1. Annotations</span><br><span class="line">2. public</span><br><span class="line">3. protected</span><br><span class="line">4. private</span><br><span class="line">5. abstract</span><br><span class="line">6. static</span><br><span class="line">7. final</span><br><span class="line">8. transient</span><br><span class="line">9. volatile</span><br><span class="line">10. synchronized</span><br><span class="line">11. native</span><br><span class="line">12. strictfp</span><br><span class="line">183、Sections of code should not be &quot;commented out&quot;</span><br><span class="line">坏味道   主要</span><br><span class="line">不要有注掉的代码，影响可读性，可以删除</span><br><span class="line">184、Strings should not be concatenated using &#39;+&#39; in a loop</span><br><span class="line">坏味道   次要</span><br><span class="line">用StringBuilder代替String拼接</span><br><span class="line">185、String function use should be optimized for single characters</span><br><span class="line">坏味道   主要</span><br><span class="line">字符串方法操作中单字符建议优先用单引号</span><br><span class="line">186、Unused local variables should be removed</span><br><span class="line">坏味道   次要</span><br><span class="line">如果一个局部变量被声明但未被使用，那么它是死代码，应该被删除。 这样做会提高可维护性，因为开发人员不会想知道使用什么变量</span><br><span class="line">187、The diamond operator (&quot;&lt;&gt;&quot;) should be used</span><br><span class="line">坏味道   次要</span><br><span class="line">Java 7引入了操作符（&lt;&gt;）来减少泛型代码的冗长度。</span><br><span class="line">List&lt;String&gt; strings &#x3D; new ArrayList&lt;&gt;()</span><br><span class="line">188、Useless imports should be removed</span><br><span class="line">坏味道   次要</span><br><span class="line">不要导入没有用到的导入</span><br><span class="line">189、Source files should not have any duplicated blocks</span><br><span class="line">坏味道   主要</span><br><span class="line">源文件不应有任何重复块</span><br><span class="line">190、Only static class initializers should be used</span><br><span class="line">坏味道   主要</span><br><span class="line">静态代码块应加，static标识</span><br><span class="line">191、Generic exceptions should never be thrown</span><br><span class="line">坏味道   主要</span><br><span class="line">通用异常如Error, RuntimeException, Throwable, and Exception不应抛出,应定义和抛出一个专门的异常，而不是使用通用异常</span><br><span class="line">192、Method names should comply with a naming convention</span><br><span class="line">坏味道   次要</span><br><span class="line">方法名称应符合命名约定</span><br><span class="line">默认规则：^[a-z][a-zA-Z0-9]*$</span><br><span class="line">193、Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used</span><br><span class="line">坏味道   主要</span><br><span class="line">Java API的早期类，例如Vector，Hashtable和StringBuffer已被同步，使其成为线程安全的。 不幸的是，即使从单个线程使用这些集合，同步也会对性能产生很大的负面影响</span><br><span class="line">194、Standard outputs should not be used directly to log anything</span><br><span class="line">坏味道   主要</span><br><span class="line">用日志记录代替标准输出</span><br><span class="line">195、Local variable and method parameter names should comply with a naming convention</span><br><span class="line">坏味道   次要</span><br><span class="line">局部变量和方法参数名称应符合命名约定</span><br><span class="line">默认:^[a-z][a-zA-Z0-9]*$</span><br><span class="line">196、Local Variables should not be declared and then immediately returned or thrown</span><br><span class="line">坏味道   次要</span><br><span class="line">声明一个变量只是立即返回或抛出它是一个糟糕的做法</span><br><span class="line">197、Instance methods should not write to &quot;static&quot; fields</span><br><span class="line">坏味道   严重</span><br><span class="line">静态属性更新需同步</span><br><span class="line">198、Methods should not be empty</span><br><span class="line">坏味道   严重</span><br><span class="line">不要存在空方法</span><br><span class="line">199、Utility classes should not have public constructors</span><br><span class="line">坏味道   主要</span><br><span class="line">帮助类不应该有公共构造函数，帮助类不宜实例化，且应该有一个如下的私有构造方法</span><br><span class="line">private StringUtils() &#123;</span><br><span class="line">throw new IllegalStateException(&quot;Utility class&quot;);</span><br><span class="line">&#125;</span><br><span class="line">200、Static non-final field names should comply with a naming convention</span><br><span class="line">坏味道   次要</span><br><span class="line">静态非最终字段名称应符合命名约定</span><br><span class="line">默认:^[a-z][a-zA-Z0-9]*$</span><br><span class="line">201、Methods returns should not be invariant</span><br><span class="line">坏味道   阻断</span><br><span class="line">方法返回值不应该是相同的值</span><br><span class="line">202、Return of boolean expressions should not be wrapped into an &quot;if-then-else&quot; statement</span><br><span class="line">坏味道   次要</span><br><span class="line">可以根据boolean表达式就能返回的直接返回boolean表达式，不需要if-then-else语句</span><br><span class="line">203、Try-with-resources should be used</span><br><span class="line">坏味道   严重</span><br><span class="line">Try-with-resources代替try-catch-finally  </span><br><span class="line">204、String literals should not be duplicated</span><br><span class="line">坏味道   严重</span><br><span class="line">重复的字符串文字会使重构过程容易出错，因为您必须确保更新所有</span><br><span class="line"></span><br><span class="line">threshold  </span><br><span class="line">Number of times a literal must be duplicated to trigger an issue</span><br><span class="line">默认值</span><br><span class="line">3</span><br><span class="line">205、</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">坏味道</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可调整:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、Abbreviation As Word In Name    (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">检查验证标识符名称中的缩写（连续大写字母）长度，还允许执行骆驼案例命名</span><br><span class="line">allowedAbbreviationLength 3</span><br><span class="line">6、Annotation Location             (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">注释位置</span><br><span class="line">allowSamelineSingleParameterlessAnnotation  </span><br><span class="line">To allow single parameterless annotation to be located on the same line as target element.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">allowSamelineParameterizedAnnotation</span><br><span class="line">To allow parameterized annotation to be located on the same line as target element.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowSamelineMultipleAnnotations</span><br><span class="line">To allow annotation to be located on the same line as target element.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">tokens  </span><br><span class="line">tokens to check</span><br><span class="line">默认值</span><br><span class="line">CLASS_DEF,INTERFACE_DEF,ENUM_DEF,METHOD_DEF,CTOR_DEF,VARIABLE_DEF</span><br><span class="line">7、Annotation Use Style                 (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line"></span><br><span class="line">trailingArrayComma</span><br><span class="line">Defines the policy for trailing comma in arrays. Default is never.</span><br><span class="line">closingParens  </span><br><span class="line">Defines the policy for ending parenthesis. Default is never.</span><br><span class="line">elementStyle  </span><br><span class="line">Defines the annotation element styles. Default value is compact_no_array.</span><br><span class="line">8、Artifact ids should follow a naming convention     (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">共享命名约定允许团队有效协作。 当pom的artifactId与提供的正则表达式不匹配时，此规则引发了一个问题</span><br><span class="line"></span><br><span class="line">regex</span><br><span class="line">The regular expression the &quot;artifactId&quot; should match</span><br><span class="line">默认值</span><br><span class="line">[a-z][a-z-0-9]+</span><br><span class="line">9、At-clause Order      (默认 关闭)  </span><br><span class="line">坏味道   主要</span><br><span class="line">检查从句顺序</span><br><span class="line">tagOrder</span><br><span class="line">allows to specify the order by tags.</span><br><span class="line">默认值</span><br><span class="line">@author,@version,@param,@return,@throws,@exception,@see,@since,@serial,@serialField,@serialData,@deprecated</span><br><span class="line">target  </span><br><span class="line">allows to specify targets to check at-clauses.</span><br><span class="line">10、Avoid Escaped Unicode Characters   (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">避免转义的Unicode字符</span><br><span class="line"></span><br><span class="line">allowIfAllCharactersEscaped</span><br><span class="line">Allow if all characters in literal are escaped.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowNonPrintableEscapes</span><br><span class="line">Allow non-printable escapes.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowByTailComment</span><br><span class="line">Allow use escapes if trail comment is present.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowEscapesForControlCharacters</span><br><span class="line">Allow use escapes for non-printable(control) characters.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">11、Avoid Nested Blocks       (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">避免嵌套块</span><br><span class="line">allowInSwitchCase</span><br><span class="line">Allow nested blocks in case statements. Default is false.</span><br><span class="line">12、Avoid Star Import       (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">检查发现使用*符号的导入语句</span><br><span class="line">excludes  </span><br><span class="line">packages where star imports are allowed. Note that this property is not recursive, subpackages of excluded packages are not automatically excluded.</span><br><span class="line">allowStaticMemberImports</span><br><span class="line">whether to allow starred static member imports like &lt;code&gt;import static org.junit.Assert.*;&lt;&#x2F;code&gt;. Default is false.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowClassImports</span><br><span class="line">whether to allow starred class imports like &lt;code&gt;import java.util.*;&lt;&#x2F;code&gt;. Default is false.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">13、Boolean Expression Complexity     (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">将嵌套布尔运算符（&amp;&amp;，||和^）限制为指定的深度（默认&#x3D; 3）。</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum allowed number of boolean operations in one expression. Default is 3.</span><br><span class="line">默认值</span><br><span class="line">3</span><br><span class="line">tokens  </span><br><span class="line">tokens to check. Default is LAND,BAND,LOR,BOR,BXOR.</span><br><span class="line">默认值</span><br><span class="line">LAND,BAND,LOR,BOR,BXOR</span><br><span class="line">14、Branches should have sufficient coverage by tests    (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">分支应有足够的测试覆盖</span><br><span class="line"></span><br><span class="line">minimumBranchCoverageRatio</span><br><span class="line">默认值</span><br><span class="line">65</span><br><span class="line">15、Catch Parameter Name       (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">检查catch参数名是否符合format属性指定的格式</span><br><span class="line"></span><br><span class="line">format  </span><br><span class="line">Specifies valid identifiers. Default is ^(e|t|ex|[a-z][a-z][a-zA-Z]+)$</span><br><span class="line">默认值</span><br><span class="line">^(e|t|ex|[a-z][a-z][a-zA-Z]+)$</span><br><span class="line">16、Class Data Abstraction Coupling     (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">度量衡量给定类中其他类的实例化数。</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed. Default is 7.</span><br><span class="line">excludedClasses</span><br><span class="line">User-configured class names to ignore.</span><br><span class="line">excludeClassesRegexps</span><br><span class="line">User-configured regular expressions to ignore classes</span><br><span class="line">excludedPackages</span><br><span class="line">User-configured packages to ignore</span><br><span class="line">17、Class Fan Out Complexity      (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">类的依赖类数量</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed. Default is 20.</span><br><span class="line">excludedClasses</span><br><span class="line">User-configured class names to ignore</span><br><span class="line">excludeClassesRegexps</span><br><span class="line">User-configured regular expressions to ignore classes</span><br><span class="line">excludedPackages</span><br><span class="line">User-configured packages to ignore</span><br><span class="line">18、Class names should comply with a naming convention   (开放)</span><br><span class="line">坏味道   次要</span><br><span class="line">类名应符合命名约定</span><br><span class="line"></span><br><span class="line">format  </span><br><span class="line">Regular expression used to check the class names against.</span><br><span class="line">默认值</span><br><span class="line">^[A-Z][a-zA-Z0-9]*$</span><br><span class="line">19、Classes from &quot;sun.*&quot; packages should not be used    (开放)</span><br><span class="line">坏味道   主要</span><br><span class="line">不得使用“sun.*”软件包的类,sun类*或com.sun *包被视为实现细节，不属于Java API</span><br><span class="line"></span><br><span class="line">Exclude  </span><br><span class="line">Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc   </span><br><span class="line">20、Classes should not be coupled to too many other classes (Single Responsibility Principle)      (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">类不应与太多其他类（单一责任原则）相耦合（依赖）</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum number of classes a single class is allowed to depend upon</span><br><span class="line">默认值</span><br><span class="line">20</span><br><span class="line">21、Classes should not be too complex         (默认 关闭)</span><br><span class="line">坏味道   严重  废弃</span><br><span class="line">类不应太复杂</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum complexity allowed.</span><br><span class="line">默认值</span><br><span class="line">200</span><br><span class="line">22、Classes should not have too many &quot;static&quot; imports       (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">静态导入类允许您使用其公共静态成员，而不必使用类名。 这可以很方便，但如果静态导入太多的类，你的代码可能会变得混乱，很难维护</span><br><span class="line"></span><br><span class="line">threshold  </span><br><span class="line">The maximum number of static imports allowed</span><br><span class="line">默认值</span><br><span class="line">4</span><br><span class="line">23、Classes should not have too many fields     (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">类不应有太多字段</span><br><span class="line">countNonpublicFields</span><br><span class="line">Whether or not to include non-public fields in the count</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">maximumFieldThreshold</span><br><span class="line">The maximum number of fields</span><br><span class="line">默认值</span><br><span class="line">20</span><br><span class="line">24、Classes should not have too many methods      (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">类不应该有太多方法</span><br><span class="line"></span><br><span class="line">countNonpublicMethods</span><br><span class="line">Whether or not to include non-public methods in the count.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">maximumMethodThreshold</span><br><span class="line">The maximum number of methods authorized in a class.</span><br><span class="line">默认值</span><br><span class="line">35</span><br><span class="line">25、Close curly brace and the next &quot;else&quot;, &quot;catch&quot; and &quot;finally&quot; keywords should be located on the same line    (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">关闭大括号，下一个“else”，“catch”和“finally”关键字应位于同一行</span><br><span class="line">26、Close curly brace and the next &quot;else&quot;, &quot;catch&quot; and &quot;finally&quot; keywords should be on two different lines    (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">关闭大括号和下一个“else”，“catch”和“finally”关键字应该在两个不同的行</span><br><span class="line">29、Comments should not be located at the end of lines of code    (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">注释不应位于代码行的末尾</span><br><span class="line"></span><br><span class="line">legalTrailingCommentPattern</span><br><span class="line">Description Pattern for text of trailing comments that are allowed. By default, comments containing only one word.</span><br><span class="line">默认值</span><br><span class="line">^\s*+[^\s]++$</span><br><span class="line">30、Constant Name    (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">检查常数名称是否符合指定的格式</span><br><span class="line">applyToPackage</span><br><span class="line">Controls whether to apply the check to package-private member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">format  </span><br><span class="line">Regular expression</span><br><span class="line">默认值</span><br><span class="line">^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</span><br><span class="line">applyToPublic  </span><br><span class="line">Controls whether to apply the check to public member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">applyToProtected</span><br><span class="line">Controls whether to apply the check to protected member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">applyToPrivate</span><br><span class="line">Controls whether to apply the check to private member</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">31、Control flow statements &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, &quot;switch&quot; and &quot;try&quot; should not be nested too deeply   (默认 关闭)</span><br><span class="line">坏味道   严重</span><br><span class="line">控制流程语句“if”，“for”，“while”，“switch”和“try”不能嵌套太深</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum allowed control flow statement nesting depth.</span><br><span class="line">默认值</span><br><span class="line">3</span><br><span class="line">32、Custom Import Order  (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">检查导入声明组按照用户指定的顺序显示。 如果有导入，但是在组态中未指定其组，则导入应放在导入列表的末尾。</span><br><span class="line">thirdPartyPackageRegExp</span><br><span class="line">RegExp for THIRDPARTY_PACKAGE group imports.</span><br><span class="line">默认值</span><br><span class="line">^$</span><br><span class="line">separateLineBetweenGroups</span><br><span class="line">Force empty line separator between import groups.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">sortImportsInGroupAlphabetically</span><br><span class="line">Force grouping alphabetically.</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">specialImportsRegExp</span><br><span class="line">RegExp for SPECIAL_IMPORTS group imports.</span><br><span class="line">默认值</span><br><span class="line">^$</span><br><span class="line">customImportOrderRules</span><br><span class="line">List of order declaration customizing by user.</span><br><span class="line">standardPackageRegExp</span><br><span class="line">RegExp for STANDARD_JAVA_PACKAGE group imports.</span><br><span class="line">默认值</span><br><span class="line">java|javax</span><br><span class="line">33、Cyclomatic Complexity  (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">检查针对特定限制的方法的循环复杂性</span><br><span class="line"></span><br><span class="line">switchBlockAsSingleDecisionPoint</span><br><span class="line">whether to treat the whole switch block as a single decision point</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed.</span><br><span class="line">默认值</span><br><span class="line">10</span><br><span class="line">tokens  </span><br><span class="line">tokens to check</span><br><span class="line">默认值</span><br><span class="line">LITERAL_WHILE,LITERAL_DO,LITERAL_FOR,LITERAL_IF,LITERAL_SWITCH,LITERAL_CASE,LITERAL_CATCH,QUESTION,LAND,LOR</span><br><span class="line">34、Default Comes Last (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">检查在switch语句中的所有情况之后的默认值。</span><br><span class="line"></span><br><span class="line">skipIfLastAndSharedWithCase</span><br><span class="line">whether to allow default along with case if they are not last</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">35、Empty catch block (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">检查空的catch块。 有两个选项可以使验证更加精确（默认情况下，检查允许空的catch块和任何注释）</span><br><span class="line"></span><br><span class="line">exceptionVariableName</span><br><span class="line">Format of skipping exception&#39;&#39;s variable name.</span><br><span class="line">默认值</span><br><span class="line">^$</span><br><span class="line">commentFormat  </span><br><span class="line">Format of comment.</span><br><span class="line">默认值</span><br><span class="line">.*</span><br><span class="line">36、Empty For Initializer Pad   (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">检查初始化程序为空的填充; 那是空的是否需要一个空的初始化程序，或者禁止这样的空格。 示例：for（; i &lt;j; i ++，j--）</span><br><span class="line"></span><br><span class="line">option  </span><br><span class="line">policy on how to pad an empty for iterator</span><br><span class="line">37、Empty For Iterator Pad</span><br><span class="line">坏味道   次要</span><br><span class="line">检查一个空的填充迭代器; 那就是空格是否需要一个空的迭代器，否则这样的空格是被禁止的。 示例：for（Iterator foo &#x3D; very.long.line.iterator（）; foo.hasNext（）;）</span><br><span class="line"></span><br><span class="line">option  </span><br><span class="line">policy on how to pad an empty for iterator</span><br><span class="line">38、Empty Line Separator   (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">在标题，包，所有导入声明，字段，构造函数，方法，嵌套类，静态初始化器和实例初始化器之后检查空行分隔符</span><br><span class="line">allowNoEmptyLineBetweenFields</span><br><span class="line">Allow no empty line between fields</span><br><span class="line">默认值</span><br><span class="line">false</span><br><span class="line">allowMultipleEmptyLines</span><br><span class="line">Allows multiple empty lines between class members.</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">tokens  </span><br><span class="line">assignments to check</span><br><span class="line">默认值</span><br><span class="line">PACKAGE_DEF,IMPORT,CLASS_DEF,INTERFACE_DEF,ENUM_DEF,STATIC_INIT,INSTANCE_INIT,METHOD_DEF,CTOR_DEF,VARIABLE_DEF</span><br><span class="line">allowMultipleEmptyLinesInsideClassMembers</span><br><span class="line">Allow multiple empty lines inside class members</span><br><span class="line">默认值</span><br><span class="line">true</span><br><span class="line">39、Executable Statement Count  (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">将可执行语句的数量限制为指定的限制（默认&#x3D; 30）。</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">the maximum threshold allowed. Default is 30.</span><br><span class="line">默认值</span><br><span class="line">30</span><br><span class="line">tokens  </span><br><span class="line">members to check</span><br><span class="line">默认值</span><br><span class="line">CTOR_DEF,METHOD_DEF,INSTANCE_INIT,STATIC_INIT</span><br><span class="line">40、Expressions should not be too complex (默认 关闭)</span><br><span class="line">坏味道   严重</span><br><span class="line">表达式不应太复杂</span><br><span class="line"></span><br><span class="line">max</span><br><span class="line">Maximum number of allowed conditional operators in an expression</span><br><span class="line">默认值</span><br><span class="line">3</span><br><span class="line">42、File Length    (默认 关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">如果源文件变得很长，那么很难理解。 因此，长类通常应该重构到专注于特定任务的几个单独的类中</span><br><span class="line"></span><br><span class="line">fileExtensions</span><br><span class="line">file type extension of files to process</span><br><span class="line">max</span><br><span class="line">maximum allowable number of lines. Default is 2000.</span><br><span class="line">43、File Tab Character  (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">检查源代码中没有制表符（&#39;\ t&#39;）</span><br><span class="line"></span><br><span class="line">fileExtensions</span><br><span class="line">file type extension of files to process</span><br><span class="line">eachLine  </span><br><span class="line">whether to report on each line containing a tab, or just the first instance. Default is false.</span><br><span class="line">44、Files should contain an empty new line at the end  (默认 关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">文件最后应该包含一个空的新行</span><br><span class="line"></span><br><span class="line">45、Add a private constructor to hide the implicit public one.</span><br><span class="line">工具类不应该有默认或者公共的构造函数，也就是说这个类里可能方法都是static，那就不需要构造它的实例，因此应该给加一个private的构造函数，就不会报这个错了。</span><br><span class="line">a class which only has private constructors should be final</span><br><span class="line">例如上一个，加了private构造函数，又会出这个，把class设置成final即可。例：</span><br><span class="line">1</span><br><span class="line">public class Shape &#123;</span><br><span class="line">2</span><br><span class="line">private Shape() &#123;</span><br><span class="line">3</span><br><span class="line">&#x2F;* set something here *&#x2F;</span><br><span class="line">4</span><br><span class="line">&#125;</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">public static Shape makeShape(&#x2F;* arglist *&#x2F;) &#123;</span><br><span class="line">7</span><br><span class="line">System.out.println(&quot;here is the shape you ordered&quot;);</span><br><span class="line">8</span><br><span class="line">return (new Shape());</span><br><span class="line">9</span><br><span class="line">&#125;</span><br><span class="line">10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">已调整：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、String literals should not be duplicated      (调整)</span><br><span class="line">坏味道   严重</span><br><span class="line">重复的字符串文字会使重构过程容易出错，因为您必须确保更新所有</span><br><span class="line"></span><br><span class="line">threshold  </span><br><span class="line">Number of times a literal must be duplicated to trigger an issue</span><br><span class="line">默认值</span><br><span class="line">3   调整为 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">已关闭：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、Utility classes should not have public constructors          (关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">帮助类不应该有公共构造函数，帮助类不宜实例化，且应该有一个如下的私有构造方法</span><br><span class="line">private StringUtils() &#123;</span><br><span class="line">throw new IllegalStateException(&quot;Utility class&quot;);</span><br><span class="line">&#125;</span><br><span class="line">2、Methods returns should not be invariant  (关闭)</span><br><span class="line">坏味道   阻断</span><br><span class="line">方法返回值不应该是相同的值</span><br><span class="line">3、Return of boolean expressions should not be wrapped into an &quot;if-then-else&quot; statement    (关闭)</span><br><span class="line">坏味道   次要</span><br><span class="line">可以根据boolean表达式就能返回的直接返回boolean表达式，不需要if-then-else语句</span><br><span class="line">4、The diamond operator (&quot;&lt;&gt;&quot;) should be used     (关闭)   jdk7+可用</span><br><span class="line">坏味道   次要</span><br><span class="line">Java 7引入了操作符（&lt;&gt;）来减少泛型代码的冗长度</span><br><span class="line">5、Sections of code should not be &quot;commented out&quot;    (关闭)</span><br><span class="line">坏味道   主要</span><br><span class="line">不要有注掉的代码，影响可读性，可以删除</span><br><span class="line">6、Try-with-resources should be used    (关闭)   jdk7+可用</span><br><span class="line">坏味道   严重</span><br><span class="line">Try-with-resources代替try-catch-finally</span><br><span class="line">7、Loops should not be infinite         (关闭)  </span><br><span class="line">Bug   阻断</span><br><span class="line">循环不应该是无限的</span><br><span class="line">8、Credentials should not be hard-coded    (关闭)  </span><br><span class="line">漏洞 阻断</span><br><span class="line">凭证不应该硬编码</span><br><span class="line">9、Anonymous inner classes containing only one method should become lambdas  (关闭)  </span><br><span class="line">坏味道   主要</span><br><span class="line">只有一个方法的匿名内部类应该变成lambdas</span><br><span class="line">10、&quot;throws&quot; declarations should not be superfluous    (关闭)  抛出运行时异常，有的框架接口即抛出此类异常</span><br><span class="line">坏味道   次要</span><br><span class="line">“抛出”声明不应该是多余的</span><br><span class="line">11、IP addresses should not be hardcoded   (关闭)</span><br><span class="line">漏洞 次要</span><br><span class="line">ip 地址不应该硬编码</span><br><span class="line">12、&quot;@Override&quot; should be used on overriding and implementing methods   (关闭)  </span><br><span class="line">坏味道   主要</span><br><span class="line">重写的和实现在方法要加Override标注</span><br><span class="line">13、An open curly brace should be located at the beginning of a line    (关闭)  </span><br><span class="line">坏味道   次要</span><br><span class="line">开放的大括号应位于一行的开头</span><br><span class="line">14、Cognitive Complexity of methods should not be too high  (关闭)</span><br><span class="line">坏味道   严重</span><br><span class="line">认知复杂度是衡量一种方法的控制流程难以理解的度量。 认知复杂性较高的方法难以维持。</span><br><span class="line">Threshold</span><br><span class="line">The maximum authorized complexity.</span><br><span class="line">默认值</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于sonar扫描的那点事&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>STEAM教育</title>
    <link href="http://iwantjingjing.com/2021/04/08/STEAM%E6%95%99%E8%82%B2/"/>
    <id>http://iwantjingjing.com/2021/04/08/STEAM%E6%95%99%E8%82%B2/</id>
    <published>2021-04-08T01:52:37.000Z</published>
    <updated>2021-04-08T02:29:28.659Z</updated>
    
    <content type="html"><![CDATA[<p>STEAM = STEM + ART</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在上個世紀末，美國國家科學基金會（NSF）發表一篇論文《型塑未來世界》，首次使用了STEM一詞。自那時開始，STEM被廣泛討論，時至如今也能看見許多玩具強調S.T.E.M。由於STEM一詞是由科學家們提出的概念，這些理工出身的背景忽略了一件重要的事情，那就是人文美學的重要性。因此在2006年至2008年期間由Georgette Yakman和John Maeda兩人提出將藝術（Art）整合進STEM，成為一項全人教育。</p><h2 id="21世纪需具备的技能"><a href="#21世纪需具备的技能" class="headerlink" title="21世纪需具备的技能"></a>21世纪需具备的技能</h2><p>如何正確尋找需要的資訊」成為了當代社會最需要的能力。</p><h3 id="思考方法"><a href="#思考方法" class="headerlink" title="思考方法"></a>思考方法</h3><ul><li>创造性与技术革新</li><li>思辨、解决问题、自我意志</li><li>学习方法、后设认知</li></ul><h3 id="工作方法"><a href="#工作方法" class="headerlink" title="工作方法"></a>工作方法</h3><ul><li>沟通</li><li>团队合作<h3 id="生存能力"><a href="#生存能力" class="headerlink" title="生存能力"></a>生存能力</h3></li><li>地球公民意识</li><li>人生与事业发展</li><li>个人与社会责任<h3 id="工作工具"><a href="#工作工具" class="headerlink" title="工作工具"></a>工作工具</h3></li><li>咨询读写能力</li><li>ICT读写能力</li></ul><h2 id="STEAM教育理念"><a href="#STEAM教育理念" class="headerlink" title="STEAM教育理念"></a>STEAM教育理念</h2><p>STEAM是由五個單字組成，他們就是：<br>Science(科學)<br>Technology(技術)<br>Engineering(工程)<br>Arts(藝術)<br>Mathematics(數學)。</p><p>STEAM 教育強調動手做（hands-on）、問題解決（problem-solving）、<br>專案取向的教學（project-based），藉此培養孩子內在的綜合能力，<br>包括了：「探究能力」、「批判思考能力」、「創意思考能力」、「問題解決能力」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;STEAM = STEM + ART&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在上個世紀末，美國國家科學基金會（NSF）發表一篇論文《型塑未來世界》，首次使用了STE
      
    
    </summary>
    
    
      <category term="教育" scheme="http://iwantjingjing.com/categories/%E6%95%99%E8%82%B2/"/>
    
    
      <category term="教育" scheme="http://iwantjingjing.com/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>Mac装机必备</title>
    <link href="http://iwantjingjing.com/2021/04/01/Mac%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87/"/>
    <id>http://iwantjingjing.com/2021/04/01/Mac%E8%A3%85%E6%9C%BA%E5%BF%85%E5%A4%87/</id>
    <published>2021-04-01T02:05:36.000Z</published>
    <updated>2021-04-08T12:12:06.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac教程"><a href="#Mac教程" class="headerlink" title="Mac教程"></a><a href="https://search.bilibili.com/all?keyword=mac%E6%95%99%E7%A8%8B&from_source=nav_suggest_new" target="_blank" rel="noopener">Mac教程</a></h2><h2 id="如何在Mac上安装软件？"><a href="#如何在Mac上安装软件？" class="headerlink" title="如何在Mac上安装软件？"></a><a href="https://www.imymac.com/zh-CN/mac-uninstaller/how-to-install-software-on-mac.html" target="_blank" rel="noopener">如何在Mac上安装软件？</a></h2><h2 id="在-Mac-上安全地打开-App"><a href="#在-Mac-上安全地打开-App" class="headerlink" title="在 Mac 上安全地打开 App"></a><a href="https://support.apple.com/zh-cn/HT202491" target="_blank" rel="noopener">在 Mac 上安全地打开 App</a></h2><h2 id="装机神器"><a href="#装机神器" class="headerlink" title="装机神器"></a><a href="https://markdowner.net/article/144933455225282560" target="_blank" rel="noopener">装机神器</a></h2><h2 id="程序员用-Mac-都有哪些必备的-app？"><a href="#程序员用-Mac-都有哪些必备的-app？" class="headerlink" title="程序员用 Mac 都有哪些必备的 app？"></a><a href="https://www.zhihu.com/question/20036899/answer/81771318" target="_blank" rel="noopener">程序员用 Mac 都有哪些必备的 app？</a></h2><h2 id="iTerm"><a href="#iTerm" class="headerlink" title="iTerm"></a><a href="https://iterm2.com/downloads.html" target="_blank" rel="noopener">iTerm</a></h2><pre><code>brew search chromebrew install google-chromebrew search toolboxbrew install jetbrains-toolboxbrew search redisbrew install another-redis-desktop-managerbrew search javabrew install the-unarchiverbrew install alfred</code></pre><h2 id="强迫症的-Mac-设置指南"><a href="#强迫症的-Mac-设置指南" class="headerlink" title="强迫症的 Mac 设置指南"></a><a href="https://github.com/macdao/ocds-guide-to-setting-up-mac" target="_blank" rel="noopener">强迫症的 Mac 设置指南</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mac教程&quot;&gt;&lt;a href=&quot;#Mac教程&quot; class=&quot;headerlink&quot; title=&quot;Mac教程&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://search.bilibili.com/all?keyword=mac%E6%95%99%E7%A8%8B&amp;
      
    
    </summary>
    
    
      <category term="mac" scheme="http://iwantjingjing.com/categories/mac/"/>
    
    
      <category term="mac" scheme="http://iwantjingjing.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://iwantjingjing.com/2021/02/02/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://iwantjingjing.com/2021/02/02/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-02-02T03:57:55.000Z</published>
    <updated>2021-02-02T05:29:23.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>在策略模式（Strategy Pattern)中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象。策略对象改变context对象的执行算法。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图</strong>：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互替换。策略模式让算法独立与使用它的客户变换，也称为政策模式（policy）</p><p><strong>主要解决</strong>：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护</p><p><strong>何时使用</strong>：一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><p><strong>如何解决</strong>：将这些算法封装成一个一个的类，任意地替换。</p><p><strong>关键代码</strong>：实现同一个接口。</p><p><strong>应用实例：</strong> </p><p>1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。</p><p>2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 </p><p>3、JAVA AWT 中的 LayoutManager。</p><p><strong>优点：</strong> </p><p>1、算法可以自由切换。</p><p>2、避免使用多重条件判断。</p><p>3、扩展性良好。</p><p><strong>缺点：</strong></p><p>1、策略类会增多。 </p><p>2、所有策略类都需要对外暴露。</p><p><strong>使用场景：</strong></p><p>1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </p><p>2、一个系统需要动态地在几种算法中选择一种。</p><p>3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><p><strong>注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;p&gt;在策略模式（Strategy Pattern)中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何替换if-Else</title>
    <link href="http://iwantjingjing.com/2021/02/02/%E5%A6%82%E4%BD%95%E6%9B%BF%E6%8D%A2if-Else/"/>
    <id>http://iwantjingjing.com/2021/02/02/%E5%A6%82%E4%BD%95%E6%9B%BF%E6%8D%A2if-Else/</id>
    <published>2021-02-02T00:57:54.689Z</published>
    <updated>2021-02-02T03:13:45.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="免责声明：本文并不肯定或者否定哪一种写法，仅仅为大家提供一些其他的编码思路或者一些值得借鉴的点子"><a href="#免责声明：本文并不肯定或者否定哪一种写法，仅仅为大家提供一些其他的编码思路或者一些值得借鉴的点子" class="headerlink" title="免责声明：本文并不肯定或者否定哪一种写法，仅仅为大家提供一些其他的编码思路或者一些值得借鉴的点子"></a>免责声明：本文并不肯定或者否定哪一种写法，仅仅为大家提供一些其他的编码思路或者一些值得借鉴的点子</h2><pre><code>if（condition）{    do stuff} else (otherCondition) {    do something} else {}</code></pre><p>if-Else通常是个糟糕的选择，它导致设计复杂，代码可读性差，重构困难等等。说了这么多如何优化？或者说如何替换if-Else呢？</p><h2 id="五种方式"><a href="#五种方式" class="headerlink" title="五种方式"></a>五种方式</h2><h3 id="完全不必要的Else块"><a href="#完全不必要的Else块" class="headerlink" title="完全不必要的Else块"></a>完全不必要的Else块</h3><pre><code>public void PerformOperation(int input) {    if(intput &gt; 5) {        // do something    } else {        // do something    } }</code></pre><p>只需要删除else块即可简化此过程，如下所示</p><pre><code>public void PerformOperation(int input) {    if(intput &gt; 5) {        // do something        return;    }     // do something}</code></pre><p>仔细体会一下，那种写法更容易理解？其实就一句话：在满足特定条件的情况下执行某些操作并立即返回，适用于异常流先返回，往下执行的都是正常流业务。</p><h3 id="价值分配"><a href="#价值分配" class="headerlink" title="价值分配"></a>价值分配</h3><p>如果你想要根据某些输入为变量分配新值，如下：</p><pre><code>public static string determineGender(int input) {    String gender = String.Empty;    if(input == 0) {        gender = &quot;male&quot;;    } else if(input == 1) {        gender = &quot;woman&quot;;    } else if {        gender = &quot;unknown&quot;;    }    return gender;}</code></pre><p>上述if-Else很容易被开关取代。如下：</p><pre><code>public static string determineGender(int input) {    if(input == 0) {         return &quot;male&quot;;    } else if(input == 1) {         return &quot;woman&quot;;    } else if {         return &quot;unknown&quot;;    }}</code></pre><p>进一步优化，可通过删除else来进一步简化代码</p><pre><code>public static string determineGender(int input) {    if(input == 0) {return &quot;male&quot;; }     if(input == 1) {return &quot;woman&quot;; }      return &quot;unknown&quot;;}</code></pre><p>若不使用else，则我们将剩下干净的可读代码。这么做的好处是可以迅速得到想要的值。试想：如果已经找到正确的值，继续测试下一个值一点意义也没有。</p><h3 id="前提条件检查-用三元运算代替if"><a href="#前提条件检查-用三元运算代替if" class="headerlink" title="前提条件检查(用三元运算代替if)"></a>前提条件检查(用三元运算代替if)</h3><p>通常，我发现，如果方法提供了无效的值，则继续执行是没有意义的。假设有一个方法defineGender方法，要求输入值必须始终为0或者1。</p><pre><code>// Input must be 0 or 1public String defineGender (int input) {    // Continue executing logic}</code></pre><p>在没有参数验证的情况下,执行该方法没有任何意义，或者说太容易出bug了，因此在实际业务之前，我们需要检查一些先决条件。</p><pre><code>// Input must be 0 or 1public String defineGender (int input) {    if(intput &lt; 0) throw new ArgumentException();    if(intput &gt; 0) throw new ArgumentException();    return input == 0 ? &quot;woman&quot; : &quot;man&quot;;}</code></pre><p>因有明确的输入限制，if可以用三元代替，因此不再需要在结尾处写默认返回值。</p><h3 id="将-If-Else转换为字典，完全避免-IF-ELSE"><a href="#将-If-Else转换为字典，完全避免-IF-ELSE" class="headerlink" title="将 If-Else转换为字典，完全避免 IF-ELSE"></a>将 If-Else转换为字典，完全避免 IF-ELSE</h3><p>假设你需要执行一些操作，这些操作将根据某些条件进行选择，我们知道以后必须添加更多条件操作。</p><pre><code>public void performOp(String operationName) {    if(operationName == &quot;Op1&quot;)) {       // something     } else if (operationName == &quot;Op2&quot;) {       // something     } else {       // default path     }}</code></pre><p>有些人倾向于使用久经考验的 If-Else。如果添加新操作，则只需要简单地添加其他内容即可。很简单!但是，就维护而言,这种方法不是一个号的设计。</p><p>知道我们以后需要添加新的操作后，我们可以将If-Else重构为字典。</p><pre><code>public void performOp(String operationName) {    var operations = new Dictionary&lt;String, Action&gt;();    operations[&quot;Op1&quot;] = () =&gt; {// something};    operations[&quot;Op2&quot;] = () =&gt; {// something};    operations[operationName].Invoke();}</code></pre><p>可读性已经大大提高，并且可以轻松地推断出该代码。注意，仅用于说明目的将字典放置在方法内部。你可以在其他地方定义它。</p><h3 id="扩展应用程序，完全避免使用If-Else"><a href="#扩展应用程序，完全避免使用If-Else" class="headerlink" title="扩展应用程序，完全避免使用If-Else"></a>扩展应用程序，完全避免使用If-Else</h3><pre><code>public String printOrder(Order order, String formatType) {    String result = String.Empty;    if(formatType == &quot;Json&quot;) {        result = JsonSerializer.Serialize(order);    } else if (formatType == &quot;PlainText&quot;) {        result = $&quot;Id:{order.Id}\nSum: {order.Sum}&quot;;    } else {        result = &quot;Unknown format&quot;;    }    return result;}</code></pre><p>上述代码我们若有新业务增加，则可通过添加if-else来解决，但它违反了开闭原则，且可读性差。    </p><p>正确的做法为：遵循SOLID原则，我们通过实施动态类型发现过程（本例中为策略模式）来做到这一点。</p><p><strong>重构的过程如下</strong></p><ul><li>使用公共接口将每个分支提取到单独的策略类中。</li><li>动态查找实现通用接口的所有类。</li><li>根据输入决定执行哪种策略。</li></ul><p>重点是类型发现的工作原理。</p><pre><code>private String printOrder(Order order, String formatType) {// Dynamic type discovery process that builds a dictionaryDictionary&lt;String, Type&gt; formatterTypes = Assembly    .GetExecutingAssembly()    .GetExportedTypes()    .Where(type =&gt; type.getInterfaces().Contains(typeof(IOrderOutputStrategy)))    .ToDictionary(type =&gt; type.GetCustomAttribute&lt;OutputFormatterName&gt;().DisplayName);Type choseFormatter = formatterTypes[formatType];// Try instantiate the formatter -- could have utilized a DI framework here insteadIOrderOutputStrategy strategy = Activator.CreateInstance(chosenFormatter) as IOrderOutputStrategy;if ( strategy is null) throw new InvalidOperationException(&quot;No valid formatter selected&quot;);// Execute strategy methodstring result = strategy.ConvertOrderToString(order);return result;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;免责声明：本文并不肯定或者否定哪一种写法，仅仅为大家提供一些其他的编码思路或者一些值得借鉴的点子&quot;&gt;&lt;a href=&quot;#免责声明：本文并不肯定或者否定哪一种写法，仅仅为大家提供一些其他的编码思路或者一些值得借鉴的点子&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>坏代码的味道</title>
    <link href="http://iwantjingjing.com/2021/01/26/%E5%9D%8F%E4%BB%A3%E7%A0%81%E7%9A%84%E5%91%B3%E9%81%93/"/>
    <id>http://iwantjingjing.com/2021/01/26/%E5%9D%8F%E4%BB%A3%E7%A0%81%E7%9A%84%E5%91%B3%E9%81%93/</id>
    <published>2021-01-26T07:02:58.735Z</published>
    <updated>2021-01-26T07:02:58.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="坏代码的味道"><a href="#坏代码的味道" class="headerlink" title="坏代码的味道"></a>坏代码的味道</h1><h2 id="Duplicated-Code-（重复代码）难维护"><a href="#Duplicated-Code-（重复代码）难维护" class="headerlink" title="Duplicated Code （重复代码）难维护"></a>Duplicated Code （重复代码）难维护</h2><ul><li>解决方法：提取公共函数。</li></ul><p>最单纯的Duplicated Code就是［同一个class内的两个方法含有相同表达式(expression)］。这时候你需要做的就是采用Extract Method提炼出重复的代码，然后让这两个地点都调用被提炼出来的那一段代码。    </p><p>另一种常见情况就是[两个互为兄弟(sibling)的subclasses内含有相同表达式]。要避免这种情况，只需要对两个classes都使用 Extract Method，然后再对被提炼出的代码使用Pull Up Method，将它推入superclass内。如果代码之间只是类似，并非完全相同，那么就得运用Extract Method将相似部分和差异部分割开，构成单独一个方法。然后你可能发现或许可以运用Form Template Method获得一个Template Method设计模式。如果有些方法以不同的算法做相同的事，你可以择定其中较清晰的一个，并使用Substitute Algorithm将其它方法的算法替换掉。</p><p>如果两个毫不相关的classes内出现Duplicated Code，你应该考虑对其中一个使用Extract Class，将重复代码提炼到一个独立class中，然后在另一个class内使用这个新class。但是，重复代码所在的方法也可能的确只应该属于某个 class，另一个class只能调用它，抑或这个方法可能属于第三个class，而另两个classes应该引用这第三个class。你必须决定这个方法放在哪儿最合适，并确保它被安置后就不会再在其它任何地方出现。    </p><h2 id="Long-Method-长函数-难理解"><a href="#Long-Method-长函数-难理解" class="headerlink" title="Long Method (长函数)难理解"></a>Long Method (长函数)难理解</h2><ul><li>解决方法：拆分成若干函数。</li></ul><p>拥有短方法(short methods)的对象会活得比较好、比较长。不熟悉面向对象技术的人，常常觉得对象程序中只有无穷无尽的delegation(委托)，根本没有进行任何计算。和此类程序共同生活数年之后，你才会知道，这些小小方法有多大价值。［间接层］所能带来的全部利益——解释能力、共享能力、选择能力——都是由小型方法支持的。</p><p>很久以前程序员就已认识到：程序愈长愈难理解。早期的编程语言中，［子程序调用动作］需要额外开销，这使得做你们不太乐意使用small method，现代OO语言几乎已经完全免除了进程内的[方法调用动作额外开销]。不过代码阅读者还是得多费力气，因为他必须经常转换上下文去看看子程序做了什么。某些开发环境允许用户同时看到两个方法，这可以帮助你省去部分麻烦，但是让small method容易理解的真正关键在于一个好名字。如果你能给方法起个好名字，读者就可以通过名字了解方法的作用，根本不必去看其中写了些什么。</p><p>最终的效果是：你应该更积极进取地分解方法。我们遵循这样一条原则：每当感觉需要以注释来说明点什么的时候，我们就把需要说明的东西写进一个独立的方法中，并以其用途(而非实现手法)命名。我们可以对一组或甚至短短一行代码做这件事。哪怕替换后的方法调用动作比方法自身还长，只要方法名称能够解释其用途，我们也该毫不犹豫地那么做。关键不在于方法的长度，而在于方法[做什么]和[如何做]之间的语义距离。</p><p>百分之九十九的场合里，要把方法变小，只需使用Extract Method。找到方法中适合集在一起的部分，将它们提炼出来形成一个新方法。</p><p>如果方法内有大量的参数和临时变量，它们会对你的方法提炼形成阻碍。如果你尝试运用Extract Method，最终就会把许多这些参数和临时变量当作参数，传递给被提炼出来的新方法，导致可读性几乎没有任何提升。啊是的，你可以经常运用 Replace Temp with Query则可以将过长的参数列变得更简洁一些。</p><p>如果你已经这么做，仍然有太多临时变量和参数，那就应该拿出我们的杀手锏：Replace Method with Method Object。</p><p>如何确定该提炼哪一段代码呢？一个很好的技巧是：寻找注释。它们通常是指出[代码用途和实现手法间的语义距离]的信号。如果代码前言有一行注释，就是在提醒你：可以将这段代码替换成一个方法，而且可以在注释的基础上给这个方法命名。就算只有一行代码，如果它需要以注释来说明，那也值得将它提炼到独立的方法去。</p><p>条件式和循环常常也是提炼的信号。你可以使用Decompose Conditional处理条件式。至于循环，你应该将循环和其内的代码提炼到一例独立方法中。</p><h2 id="Large-Class-大类-难理解"><a href="#Large-Class-大类-难理解" class="headerlink" title="Large Class (大类)难理解"></a>Large Class (大类)难理解</h2><ul><li>解决方法：拆分成若干类。</li></ul><p>如果想利用单一class做太多事情，其内往往就会出现太多instance变量。一旦如此，Duplicated Code也就接踵而至了。</p><p>你可以运用Extract Class将数个变量一起提炼到新class内。提炼时应该选择class内彼此相关的变量，将它们放在一起。例如”depositAmount” 和”depositCurrency”可能应该隶属同一个class。通常如果class内的数个变量有着相同的前缀或字尾，这就意味有机会把它们提炼到某个组件内。如果这个组件适合作为一个subclass，你会发现Extract Subclass往往比较简单。</p><p>有时候class并非在所有时刻都使用所有instance变量。果真如此，你或许可以多次使用Extract Class或Extract Subclass。</p><p>和[太多instance变量]一样，class内如果有太多代码，也是[]代码重复、混乱、死亡]的绝佳滋生地点。最简单的解决方案是把赘余的东西消弭于class内部。如果有五个[百行方法]，它们之中很多代码都相同，那么或许你可以把它们变成五个［十行方法］和十个提炼出来的［双行方法］</p><p>和[拥有太多instance变量]一样，一个class如果拥有太多代码，往往也适合使用Extract Class和Extract Subclass。这里有个有用技巧：先确定客户端如何使用它们，然后运用Extract Interface为每一种使用一个接口。这或许可以帮助你看清楚如何分解这个class。</p><p>如果你的Large Class是个GUI class，你可能需要把数据和行为移到一个独立的领域对象去。你可能需要两边各保留一些重复数据，并令这些数据同步。Duplicate Observed Data告诉你该怎么做。这种情况下，特别是如果你使用旧式AWT组件，你可以采用这种方式去掉GUI class并代以Swing组件。</p><h2 id="Long-Parameter-List-参数多-难用，难理解"><a href="#Long-Parameter-List-参数多-难用，难理解" class="headerlink" title="Long Parameter List (参数多) 难用，难理解"></a>Long Parameter List (参数多) 难用，难理解</h2><ul><li>解决方法：将參数封装成结构或者类。</li></ul><p>刚开始学习编程的时候，老师教我们：把方法所需的所有东西都以参数传递进去。这可以理解，因为除此之外就只能选择全局数据，而全局数据是邪恶的东西。对象技术改变了这一情况，因为如果你手上没有你所需要的东西，总可以叫另一个对象给你。因此，有了对象，你就不必把方法需要的所有东西都以参数传递给它了，你只需给它足够的东西、让方法能从中获得自己需要的所有东西就行了。方法需要的东西多半可以在方法的宿主类(host class)中找到。面向对象程序中的方法，其参数列通常比在传统程序中短得多。</p><p>这是好现象，因为太长的参数列难以理解，太多参数会造成前后不一致、不易使用，而且一旦你需要更多数据，就不得不修改它。如果将对象传递给方法，大多数修改都将没有必要，因为你很可能只需(在方法内)增加一两条请求，就能得到更多数据。</p><p>如果[向既有对象发出一条请求]就可以取得原本位于参数列上的一份数据，那么你应该激活重构准则Replace Parameter with Method。上述的既有对象可能是方法所属class内的一个字段，也可能是另一个参数。你还可以运用Preserve Whole Object将来自同一对象的一堆数据收集起来，并以该对象替换它们。如果某些数据缺乏合理的对象归属，可使用Introduce Parameter Object为它们制造出一个[参数对象]。</p><p>此间存在一个重要的例外。有时候你明显不希望造成[被调用之对象]与[较大对象]间的某种依存关系。这时候将数据从对象中拆解出来单独作为参数，也很合情合理。但是请注意其所引发的代价。如果参数列太长或变化太频繁，你就需要重新考虑自己的依存结构了。</p><h2 id="Divergent-Change-发散式改动"><a href="#Divergent-Change-发散式改动" class="headerlink" title="Divergent Change ( 发散式改动)"></a>Divergent Change ( 发散式改动)</h2><ul><li>解决方法：拆，将总是一起变化的东西放在一块儿。</li></ul><p>我们希望软件能够更容易被修改——毕竟软件再怎么说本来就该是[软]的。一旦需要修改，我们希望能够跌到系统的某一点，只在该处做修改。如果不能做到这点，你就嗅出两种紧密相关的刺鼻味道中的一种了。</p><p>如果某个class经常因为不同的原因在不同的方向上发生变化，Divergent Change就出现了。当你看着一个class说：“ 呃，如果新加入一个数据库，我必须修改这三个方法；如果新出现一种金融工具，我必须修改这四个方法”，那么此时也许将这个对象分成两个会更好，这么一来每个对象就可以只因一种变化而需要修改。当然，往往只有在加入新数据库或新金融工具后，你才能发现这一点。针对某一外界变化的所有相应修改，都只应该发生在单一class中，而这个新class内的所有内容都应该反应该外界变化。为此，你应该找出因着某特定原因而造成的所有变化，然后运用Extract Class将它们提炼到另一个class中。</p><h2 id="Shotgun-Surgery-天女散花的逻辑-散弹式改动，改某个需求的时候，要改非常多的类"><a href="#Shotgun-Surgery-天女散花的逻辑-散弹式改动，改某个需求的时候，要改非常多的类" class="headerlink" title="Shotgun Surgery (天女散花的逻辑 ) 散弹式改动，改某个需求的时候，要改非常多的类"></a>Shotgun Surgery (天女散花的逻辑 ) 散弹式改动，改某个需求的时候，要改非常多的类</h2><ul><li>解决方法：将各个改动点，集中起来，抽象成一个新类。</li></ul><p>Shotgun Surgery类似Divergent Change，但恰恰相反。如果每遇到某种变化，你都必须在许多不同的class内做出许多小修改以响应之，你所面临的坏味道就是Shotgun Surgery。如果需要修改的代码散布四处，你不但很难找到它们，也很容易忘记某个重要的修改。</p><p>这种情况下你应该使用Move Method和Move Field把所有需要修改的代码放进同一个class。如果眼下没有合适的class可以安置这些代码，就创造一个。通常你可以运用Inline Class把一系列相关行为放进同一个class。这可能会造成少量Divergent Change，但你可以轻易处理它。</p><p>Divergent Change是指[一个class受多种变化的影响]，Shotgun Surgery则是指[一种变化引发多个classes相应修改]。这两种情况下你都会希望整理代码，取得[外界变化]与[待改类]呈现一对一关系的理想境地。</p><h2 id="Feature-Envy-依恋情结-红杏出墙的函数-使用了大量其他类的成员"><a href="#Feature-Envy-依恋情结-红杏出墙的函数-使用了大量其他类的成员" class="headerlink" title="Feature Envy (依恋情结 红杏出墙的函数)使用了大量其他类的成员"></a>Feature Envy (依恋情结 红杏出墙的函数)使用了大量其他类的成员</h2><ul><li>解决方法：将这个函数挪到那个类里面。</li></ul><p>对象技术的全部要点在于：这是一种[将数据和加诸其上的操作行为包装在一起]的技术。有一种经典气味是：方法对某个class的兴趣高过对自己所处之 host class的兴趣。这种孺慕之情最通常的焦点便是数据。无数次经验里，我们看到某个方法为了计算某值，从另一个对象那儿调用几乎半打的取值方法。疗法显而易见：把这个方法移到另一个地点。你应该使用Move Method把它移到它该去的地方。有时候方法中只有一部分受这种依恋之苦，这时候你应该使用Extract Method把这一部分提炼到独立方法中，再使用Move Method带它去它的梦中家园。</p><p>当然，并非所有情况都这么简单。一个方法往往会用上数个classes特性，那么它究竟该被置于何处呢？我们的原则是：判断哪个class拥有最多[被此方法使用]的数据，然后就把这个方法和那些数据摆在一起。如果先以Extract Method将这个方法分解为整个较小方法并分别置放于不同地点，上述步骤也就比较容易完成了。</p><p>有数个复杂精巧的模式破坏了这个规则。说起这个话题，［四巨头］的Streategy和Visitor立刻跳入我的脑海，Kent Beck的Self Delegation也丰此列。使用这些模式是为了对抗坏味道Divergent Change。最根本的原则是：将总是一起变化的东西放在一块儿。［数据］和[引用这些数据]的行为总是一起变化的，但也有例外。如果例外出现，我们就搬移那些行为，保持[变化只在一起发生]。Strategy和Visitor使你得以轻松修改方法行为，因为它们将少量需要被覆写的行为隔离开来——当然也付出了[多一层间接性]的代价。</p><h2 id="Data-Clumps-数据团-常一起出现的一坨数据"><a href="#Data-Clumps-数据团-常一起出现的一坨数据" class="headerlink" title="Data Clumps (数据团) 常一起出现的一坨数据"></a>Data Clumps (数据团) 常一起出现的一坨数据</h2><ul><li>解决方法:他们那么有基情，就在一起吧，给他们一个新的类。</li></ul><p>数据项就像小孩子：喜欢成群结队地待在一块儿。你常常可以在很多地方看到相同的三或四笔数据项：两个classes内的相同字段、许多方法签名式中的相同参数。这些[总是绑在一起出现的数据]真应该放进属于它们自己的对象中。首先请找出这些数据的字段形式出现点，运用Extract Class将它们提炼到一个独立对象中。然后将注意力转移到方法签名式上头，运用Introduce Parameter Object或Preserve Whole Object为它减肥。这么做的直接好处是可以将很多参数列缩短，简化方法调用动作。是的，不必因为Data Clumps只用上新对象的一部分字段而在意，只要你以新对象取代两个(或更多)字段，你就值回票价了。</p><p>一个好的评断办法是：删掉众多数据中的一笔。其它数据有没有因而失去意义？如果它们不再有问询，这就是个明确信号：你应该为它们产生一个新对象。</p><p>缩短字段个数和参数个数，当然可以支队一些坏味道，但更重要的是：一旦拥有新对象，你就有机会让程序散发出一种芳香。得到新对象后，你就可以着手寻找 Feature Envy，这可以帮你指出[可移到新class]中的种种程序行为。不必太久，所有classes都将在它们的小小社会中充分发挥自己的生产力。</p><h2 id="Primitive-Obsession-偏爱基本类型-热衷于使用int，long，String等基本类型"><a href="#Primitive-Obsession-偏爱基本类型-热衷于使用int，long，String等基本类型" class="headerlink" title="Primitive Obsession (偏爱基本类型) 热衷于使用int，long，String等基本类型"></a>Primitive Obsession (偏爱基本类型) 热衷于使用int，long，String等基本类型</h2><ul><li>解决方法:重复出现的一组參数，有关联的多个数组换成类吧。</li></ul><p>大多数编程环境都有两种数据：结构型别允许你将数据组织成有意义的形式；基本型别则是构成结构型别的积木块。结构总是会带来一定的额外开销。它们有点像数据库中的表格，或是那些得不偿失的东西。</p><p>对象的一个极具价值的东西：它们模糊了横亘于基本数据和体积较大的classes之间的界限。你可以轻松编写出一些与语言内置型别无异的小型 classes。例如Java就以基本型别表示数值，而心class表示字符串和日期——这两个型别在其它许多编程环境中都以基本型别表现。</p><p>对象技术的新手通常在小任务上运用小对象——像是结合数值和币别的money class、含一个起始值和一个结束值的range class、电话号码或邮政编码等等的特殊strings。你可以运用Replace Data Value with Object将原本单独存在的数据值替换为对象，从而走出传统的洞窟，进入炙手可热的对象世界。如果欲替换之数据值是type code，而它并不影响行为，你可以运用Replace Type Code with Class将它换掉。如果你有相依于此type code的条件式，可运用Replace Type Code with Subclass或Replace Type Code with State/Strategy加以处理。</p><p>如果你有一组应该总是被放在一起的字段，可运用Extract Class。如果你在参数列中看到基本型数据，不妨试试Introduce Parameter Object。如果你发现自己正从array中挑选数据，可运用Replace Array with Object。</p><h2 id="Switch-Statements-switch语句"><a href="#Switch-Statements-switch语句" class="headerlink" title="Switch Statements (switch语句)"></a>Switch Statements (switch语句)</h2><ul><li>解决方法:state/strategy 或者仅仅是简单的多态。</li></ul><p>面向对象程序的一个最明显特征就是：少用switch(或case)语句。从本质上说，switch语句的问题在于重复。你常会发现同样的switch语句散布于不同的地点。如果要为它添加一个新的case子句，你必须找到所有switch语句并修改它们。面向的多态概念可为此带来优雅的解决办法。</p><p>大多数时候，一看到switch语句你就应该考虑以多态来替换它。问题是多态该出现在哪儿？switch语句常常根据type code进行选择，你要的是[与该type code相关的方法或class]。所以你应该使用Extract Method将switch语句提炼到一个独立方法中，再以Move Method将它搬移到需要多态性的那个class里头。此时你必须决定是否使用Replace Type Code with Subclasses或Replace Type Code with State/Strategy。一旦这样完成继承结构之后，你就可以运用Replace Conditional with Polymorphism了。</p><p>如果你只是在单一方法中髭选择事例，而你并不想改动它们，那么[多态]就有点杀鸡用牛刀了。这种情况下Replace Parameter with Explicit Methods是个不错的选择。如果你的选择条件之一是null，可以试试Introduce Null Object。</p><h2 id="Parallel-Inheritance-Hierarchies-平行继承-添加A类的子类ax，B类也要对应的添加一个bx"><a href="#Parallel-Inheritance-Hierarchies-平行继承-添加A类的子类ax，B类也要对应的添加一个bx" class="headerlink" title="Parallel Inheritance Hierarchies (平行继承) 添加A类的子类ax，B类也要对应的添加一个bx"></a>Parallel Inheritance Hierarchies (平行继承) 添加A类的子类ax，B类也要对应的添加一个bx</h2><ul><li>解决方法:应该有一个类是能够去掉继承关系的。</li></ul><p>Parallel Inheritance Hierarchies其实是Shotgun Surgery的特殊情况。在这种情况下，每当你为某个class增加一个subclass，必须也为另一个class相应增加一个subclass。如果你发现某个继承体系的class名称前缀和另一个继承体系的class名称前缀完全相同，便是闻到了这种坏味道。</p><p>消除这种重复性的一般策略是：让一个继承体系的实体指涉另一个继承体系的实体。如果再接再厉运用Move Method和Move Field，就可以将指涉端的继承体系消弭于无形。</p><h2 id="Lazy-Class-冗赘类-假设他不干活了，炒掉他吧"><a href="#Lazy-Class-冗赘类-假设他不干活了，炒掉他吧" class="headerlink" title="Lazy Class (冗赘类) 假设他不干活了，炒掉他吧"></a>Lazy Class (冗赘类) 假设他不干活了，炒掉他吧</h2><ul><li>解决方法:把这些不再重要的类里面的逻辑，合并到相关类，删掉旧的。</li></ul><p>你所创建的每一个class，都得有人去理解它、维护它，这些工作都是要花钱的。如果一个class的所得不值其身份，它就应该消失。项目中经常会出现这样的情况：某个class原本对得起自己的身份，但重檐使它身形缩水，不再做那么多工作；或开发者事前规划了某些变化，并添加一个class来就会这些变化，但变化实际上没有发生。不论上述哪一种原因，请让这个class庄严赴义吧。如果某些subclass没有做满足够工作，试试Collapse Hierarchy[合并继承]。对于几乎没用的组件，你应该以Inline Class对付它们。</p><h2 id="Speculative-Generality-（夸夸其谈未来性）"><a href="#Speculative-Generality-（夸夸其谈未来性）" class="headerlink" title="Speculative Generality （夸夸其谈未来性）"></a>Speculative Generality （夸夸其谈未来性）</h2><ul><li>解决方法:删掉</li></ul><p>这个令我们十分敏感的坏味道，命名者是Brian Foote。当有人说“噢，我想我们总有一天需要做这事”并因而企图以各式各样的挂勾和特殊情况来处理一些非必要的事情，这种坏味道就出现了。那么做的结果往往造成系统更难理解和维护。如果所有装置都会被用到，那就值得那么做；如果用不到，就不值得。用不上的装置只会挡你的路，所以，把它搬弄吧。</p><p>如果你的某个abstract class其实没有太大作用，请运用Collapse Hierarchy。非必要之delegation可运用Inline Class除掉。如果方法的某些参数示被用上，可对它实施Rename Method让它现实一些。</p><p>如果方法或class的惟一用户是test cases，这就飘出了坏味道Speculative Generality。如果你发现这样的方法或class，请把它们连同其test cases都删掉。但如果它们的用途是帮助test cases检测正当功能，当然必须刀下留人。</p><h2 id="Temporary-Field-（临时字段）仅在特定环境下使用的变量"><a href="#Temporary-Field-（临时字段）仅在特定环境下使用的变量" class="headerlink" title="Temporary Field （临时字段）仅在特定环境下使用的变量"></a>Temporary Field （临时字段）仅在特定环境下使用的变量</h2><ul><li>解决方法:将这些暂时变量集中到一个新类中管理。</li></ul><p>有时你会看到这样的对象：其内某个instance 变量仅为某种特定情势而设。这样的代码让人不易理解，因为你通常认为对象在所有时候都需要它的所有变量。在变量未被使用的情况下猜测当初其设置目的，会让你发疯。</p><p>请使用Extract Class给这个可怜的孤独创造一个家，然后把所有和这个变量相关的代码都放进这个新家。也许你还可以使用Introduce Null Object在[变量不合法]的情况下创建一个Null对象，从而避免写出[条件式代码]。</p><p>如果class中有一个复杂算法，需要好几个变量，往往就可能导致坏味道Temporary Field的出现。由于实现者不希望传递一长串参数，所以他把这些参数都放进字段中。但是这些字段只在使用该算法时才有效，其它情况下只会让人迷惑。这时候你可以利用Extract Class把这些变量和其相关方法提炼到一个独立class中。提炼后的新对象将是一个method object。</p><h2 id="Message-Chains-（消息链）过度耦合的才是坏的。"><a href="#Message-Chains-（消息链）过度耦合的才是坏的。" class="headerlink" title="Message Chains （消息链）过度耦合的才是坏的。"></a>Message Chains （消息链）过度耦合的才是坏的。</h2><ul><li>解决方法:拆函数或者移动函数。</li></ul><p>如果你看到用户向一个对象索求另一个对象，然后再向后者索求另一个对象，然后再索求另一个对象……这就是Message Chain。实际代码中你看到的可能是一长串getThis()或一长串临时变量。采取这种方式，意味客户将与查找过程中的航行结构紧密耦合。一旦对象间的关系发生任何变化，客户端就不得不做出相应修改。</p><p>这时候你应该使用Hide Delegate。你可以在Message Chain的不同位置进行这种重构手法。理论上你可以重构Message Chain上的任何一个对象，但这么做往往会把所有中介对象都变成Middle Man。通常更好的选择是：先观察Message Chain最终得到的对象是用来干什么的，看看能否以Extract Method把使用该对象的代码提炼到一个独立方法中，再运用Move Method把这个方法推入Message Chain。如果这条链上的某个对象有多位客户打算航行此航线的剩余部分，就加一个方法来做这件事。</p><p>有些人把任何方法链都视为坏东西，我们不这样想。呵呵，我们的总代表镇定是出了名的，起码在这件事情上是这样。</p><h2 id="Middle-Man-中介-大部分都交给中介来处理了"><a href="#Middle-Man-中介-大部分都交给中介来处理了" class="headerlink" title="Middle Man (中介) 大部分都交给中介来处理了"></a>Middle Man (中介) 大部分都交给中介来处理了</h2><ul><li>解决方法:用继承替代托付。<br>对象的基本特征之一就是封装——对外部世界隐藏其内部细节。封装往往伴随delegation。比如说你问主管是否有时间参加一个会议，他就把这个消息委托给他的记事簿，然后才能回答你。很好，你没必要知道这位主管到底使用传统记事簿或电子记事簿抑或秘书来记录自己的约会。</li></ul><p>但是人们可能过度运用delegation。你也许会看到某个class接口有一半的方法都委托给其它class，这样就是过度运用。这里你应该使用 Remove Middle Man，直接和负责对象打交道。如果这样[不干实事]的方法只有少数几个，可以运用Inline Method把它们”inlining”，放进调用端。如果这些Middle Man还有其它行为内销可以运用Replace Delegation with Inheritance把它变成负责对象的subclass，这样你既可以扩展原对象的行为，又不必负担那么多的委托动作。</p><h2 id="Inappropriate-Intimacy-太亲热-两个类都使用对方私有的东西"><a href="#Inappropriate-Intimacy-太亲热-两个类都使用对方私有的东西" class="headerlink" title="Inappropriate Intimacy (太亲热) 两个类都使用对方私有的东西"></a>Inappropriate Intimacy (太亲热) 两个类都使用对方私有的东西</h2><ul><li>解决方法:划清界限拆散，或合并，或改成单项联系。<br>有时候你会看到两个classes过于亲密，花费太多时间去探究彼此的private成分。如果这发生在两个[人]之间，我们不必做卫道之士；但对于 classes，我们希望它们严守清规。</li></ul><p>就像古代恋人一样，过份狎昵的classes必须拆散。你可以采用Move Method和Move Field帮它们划清界线，从而减少狎昵行径。你也可以看看是否运用Change Bidirectional Association to Unidirectional[将双向关联改为单向]让其中一个class对另一个斩断情丝。如果两个classes实在情投意合，可以运用Extract Class把两者共同点提炼到一个安全地点，让它们坦荡地使用这个新class。或者也可以尝试运用Hide Delegate让另一个class来为它们传递相思情。</p><p>继承往往造成过度亲密，因为subclass对superclass的了解总是超过superclass的主观愿望。如果你觉得该让这个孩子独自生活了，请运用Replace Inheritance with Delegation让它离开继承体系。</p><h2 id="Alternative-Classes-with-Different-Interfaces-异曲同工的类"><a href="#Alternative-Classes-with-Different-Interfaces-异曲同工的类" class="headerlink" title="Alternative Classes with Different Interfaces (异曲同工的类)"></a>Alternative Classes with Different Interfaces (异曲同工的类)</h2><ul><li>解决方法:重命名，移动函数，或抽象子类。</li></ul><p>如果两个方法做同一件事，却有着不同的签名式，请运用Rename Method根据它们的用途重新命名。但这往往不够，请反复运用Move Method将某些行为移入classes，直到两者的协议一致为止。如果你必须重复而赘余地移入代码才能完成这些，或许可运用Extract Superclass为自己赎点罪。</p><h2 id="Incomplete-Library-Class-（不完美的程序库类）"><a href="#Incomplete-Library-Class-（不完美的程序库类）" class="headerlink" title="Incomplete Library Class （不完美的程序库类）"></a>Incomplete Library Class （不完美的程序库类）</h2><ul><li>解决方法:包一层函数或包成新的类。</li></ul><p>复用常被视为对象的终极目的。我们认为这实在是过度估计了。但是无可否认，许多编程技术都建立在library classes的基础上，没人敢说是不是我们都把排序算法忘得一干二净了。</p><p>Library classes构筑者没有未卜先知的能力，我们不能因此责怪他们。毕竟我们自己也几乎总是在系统快要构筑完成的时候才能弄清楚它的设计，所以 library构筑者的任务真的很艰巨。麻烦的是library的形式往往不够好，往往不可能让我们修改其中的classes使它完成我们希望完成的工作。这是否意味那些经过实践检验的战术如Move Method等等，如今都派不上用场了？</p><p>幸好我们有两个专门就会这种情况的工具。如果你只想修改library classes内的一两个方法，可以运用Introduce Foreign Method；如果想要添加一大堆额外行为，就得运用Introduce Local Extension。</p><h2 id="Data-Class-纯数据类-类非常简单，仅有公共成员变量，或简单操作函数。"><a href="#Data-Class-纯数据类-类非常简单，仅有公共成员变量，或简单操作函数。" class="headerlink" title="Data Class (纯数据类) 类非常简单，仅有公共成员变量，或简单操作函数。"></a>Data Class (纯数据类) 类非常简单，仅有公共成员变量，或简单操作函数。</h2><ul><li>解决方法:将相关操作封装进去，降低public成员变量。</li></ul><p>所谓Data Class是指：它们拥有一些字段，以及用于访问这些字段的方法，除此之外一无长物。这样的classes只是一种[不会说话的数据容器]，它们几乎一定被其它classes过份细琐地操控着。这些classes早期可能拥有public字段，果真如此你应该在别人注意到它们之前，立刻运用 Encapsulate Field将它们封装起来。如果这些classes内含容器类的字段，你应该检查它们是不是得到了恰当的封装；如果没有，就运用Encapsulate Collection把它们封装起来。对于那些不该被其它classes修改的字段，请运用Remove Setting Method。</p><p>然后，找出这些[取值/设值]方法被其它classes运用的地点。尝试以Move Method把那些调用行为搬移到Data Class来。如果无法搬移整个方法，就运用Extract Method产生一个可被搬移的方法。不久之后你就可以运用Hide Method把这些[取值/设值]方法隐藏起来了。</p><p>Data Class就像小孩子。作为一个起点很好，但若要让它们像[成年]的对象那样参与整个系统的工作，它们就必须承担一定责任。</p><h2 id="Refused-Bequest-继承过多-父类里面方法非常多，子类仅仅用有限几个"><a href="#Refused-Bequest-继承过多-父类里面方法非常多，子类仅仅用有限几个" class="headerlink" title="Refused Bequest (继承过多) 父类里面方法非常多，子类仅仅用有限几个"></a>Refused Bequest (继承过多) 父类里面方法非常多，子类仅仅用有限几个</h2><p>Subclasses应该继承superclass的方法和数据。但如果它们不想或不需要继承，又该怎么办呢？它们得到所有礼物，却只从中挑选几样来玩！</p><p>按传统说法，这就意味继承体系设计错误。你需要为这个subclass新建一个兄弟，再运用Push Down Method和Push Down Field把所有用不到的方法下推给那兄弟。这样一来superclass就只持有所有subclasses共享的东西。常常你会听到这样的建议：所有 superclasses都应该是抽象的。</p><p>既然使用[传统说法]这个略带贬义的词，你就可以猜到，我们不建议你这么做，起码不建议你每次都这么做。我们经常利用subclassing手法来复用一些行为，并发现这可以很好地应用于日常工作。这也是一种坏味道，我们不否认，但气味通常并不强烈。所以我们说：如果Refused Bequest引起困惑和问题，请遵循传统忠告。但不必认为你每次都得那么做。十有八九这种坏味道很淡，不值得理睬。</p><p>如果subclass复用了superclass的行为(实现)，却又不愿意支持superclass的接口，Refused Bequest的坏味道就会变得浓烈。拒绝继承superclass的实现，这一点我们不介意；但如果拒绝继承superclass的接口，我们不以为然。不过即使你不愿意继承接口，也不要胡乱修改继承系，你应该运用Replace Inheritance with Delegation来达到目的。</p><h2 id="Comments-过多的注释"><a href="#Comments-过多的注释" class="headerlink" title="Comments (过多的注释)"></a>Comments (过多的注释)</h2><ul><li>解决方法:F2</li></ul><p>别担心，我们并不是说你不该写注释。从嗅觉上说，Comments不是一种坏味道；事实上它们还是一种香味呢。我们之所以要在这里提到Comments，因为人们常把它当作除臭剂来使用。常常会有这样的情况：你看到一段代码有着长长的注释，然后发现，这些注释之所以存在乃是因为代码很糟糕。这种情况的发生次数之多，实在令人吃惊。</p><p>Comments可以带我们找到本章先前提到的各种坏味道。找到坏味道后，我们首先应该以各种重构手法把坏味道去除。完成之后我们常常会发现：注释已经变得多余了，因为代码已经清楚说明了一切。</p><p>如果你需要注释来解释一块代码做了什么，试试Extract Method;如果你需要注释说明某些系统的需求规格，试试Introduce Assertion。</p><p>如果你不知道该做什么，这才是注释的良好运用时机。除了用来记述将来的打算之外，注释还可以用来标记你并无十足把握的区域。你可以在注释里写下自己[为什么做某某事]。这类信息可以帮助将来的修改者，尤其是那些健忘的家伙。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;坏代码的味道&quot;&gt;&lt;a href=&quot;#坏代码的味道&quot; class=&quot;headerlink&quot; title=&quot;坏代码的味道&quot;&gt;&lt;/a&gt;坏代码的味道&lt;/h1&gt;&lt;h2 id=&quot;Duplicated-Code-（重复代码）难维护&quot;&gt;&lt;a href=&quot;#Duplicated-C
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>技术网站</title>
    <link href="http://iwantjingjing.com/2021/01/16/%E6%8A%80%E6%9C%AF%E7%BD%91%E7%AB%99/"/>
    <id>http://iwantjingjing.com/2021/01/16/%E6%8A%80%E6%9C%AF%E7%BD%91%E7%AB%99/</id>
    <published>2021-01-16T00:47:24.096Z</published>
    <updated>2021-01-16T00:47:24.096Z</updated>
    
    <content type="html"><![CDATA[<p>java程序员学技术的网站</p><p><a href="https://www.bilibili.com/" target="_blank" rel="noopener">哔哩哔哩</a><br><a href="https://www.csdn.net/nav/java" target="_blank" rel="noopener">CSDN</a><br><a href="https://juejin.cn/" target="_blank" rel="noopener">掘金</a><br><a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a><br><a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a><br><a href="https://www.imooc.com/" target="_blank" rel="noopener">慕课网</a><br><a href="http://github.com/" target="_blank" rel="noopener">github</a><br><a href="https://gitee.com/" target="_blank" rel="noopener">码云</a><br><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">力扣</a><br><a href="http://www.runoob.com" target="_blank" rel="noopener">菜鸟教程</a><br><a href="https://www.sojson.com/" target="_blank" rel="noopener">JSON在线</a><br><a href="https://tool.lu/" target="_blank" rel="noopener">程序员工具箱</a><br><a href="https://www.oschina.net" target="_blank" rel="noopener">开源中国</a><br><a href="https://www.processon.com" target="_blank" rel="noopener">Processon</a><br><a href="https://ke.qq.com/" target="_blank" rel="noopener">腾讯课堂</a><br><a href="http://tool.chinaz.com/Tools/unixtime.aspx" target="_blank" rel="noopener">时间戳转换</a><br><a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">w3school</a><br><a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a><br><a href="https://www.lintcode.com/" target="_blank" rel="noopener">领扣</a><br><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a><br><a href="https://www.twle.cn/" target="_blank" rel="noopener">简单教程</a><br><a href="https://segmentfault.com/" target="_blank" rel="noopener">思否</a><br><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a><br><a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">java在线中文API</a><br><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a><br><a href="http://www.kailing.pub/" target="_blank" rel="noopener">KL</a><br><a href="https://www.ituring.com.cn/" target="_blank" rel="noopener">图灵社区</a><br><a href="https://hutool.cn/docs/#/" target="_blank" rel="noopener">Hutool</a><br><a href="https://www.coolshell.cn/" target="_blank" rel="noopener">左耳朵耗子博客</a><br><a href="https://www.coolshell.cn/" target="_blank" rel="noopener">阮一峰的网络日志</a><br><a href="https://gudaoxuri.gitbook.io/microservices-architecture/" target="_blank" rel="noopener">微服务架构设计</a><br><a href="http://mysql.taobao.org/" target="_blank" rel="noopener">阿里云数据库内核月报</a><br><a href="https://tech.meituan.com/" target="_blank" rel="noopener">美团技术</a><br><a href="https://developer.ibm.com/zh/" target="_blank" rel="noopener">IBM技术</a><br><a href="https://iwantjingjing.com/">我想静静</a><br><a href="https://www.infoq.cn/" target="_blank" rel="noopener">infoQ</a><br><a href="https://time.geekbang.org/" target="_blank" rel="noopener">极客时间</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java程序员学技术的网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;哔哩哔哩&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.csdn.net/nav/jav
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Maven构建流程</title>
    <link href="http://iwantjingjing.com/2021/01/16/Maven%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <id>http://iwantjingjing.com/2021/01/16/Maven%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B/</id>
    <published>2021-01-16T00:47:24.094Z</published>
    <updated>2021-01-16T00:47:24.094Z</updated>
    
    <content type="html"><![CDATA[<p>#构建流程</p><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>Maven不但有标准化的项目结构，而且还有一套标准化的构建流程，可以自动化实现编译，打包，发布，等等。</p><h2 id="Lifecycle和Phase"><a href="#Lifecycle和Phase" class="headerlink" title="Lifecycle和Phase"></a>Lifecycle和Phase</h2><p>使用Maven时，我们首先要了解什么是Maven的生命周期（lifecycle)</p><p>Maven的生命周期由一系列阶段（phase）构成，以内置的生命周期default为例，它包含以下phase:</p><ul><li>validate </li><li>initialize</li><li>generate-sources</li><li>process-sources</li><li>generate-resources</li><li>process-resources</li><li>compile</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources</li><li>generate-test-resources</li><li>process-test-resources</li><li>test-compile</li><li>process-test-classes</li><li>test</li><li>prepare-package</li><li>package</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install</li><li>deploy</li></ul><p>如果我们运行 mvn package, Maven 就会执行default生命周期，它会从开始一直运行到package这个phase为止：</p><ul><li>validate</li><li>…</li><li>package</li></ul><p>如果我们运行mvn compile,Maven也会执行default生命周期，但这次它只会运行到compile,即已下几个phase:</p><ul><li>validate</li><li>…</li><li>package</li></ul><p>Maven的另一个生命周期是clean，它会执行3个phase:</p><ul><li>pre-clean</li><li>clean(注意这个clean不是lifecycle而是phase)</li><li>post-clean</li></ul><p>所以，我们使用mvn这个命令时，后面的参数是phase，Maven自动根据生命周期运行指定的phase</p><p>更复杂的例子是指定多个phase,例如，运行mvn clean package,Maven先执行clean生命周期并运行到clean这个phase，然后执行default生命周期<br>并运行到package这个phase，实际执行的phase如下：</p><ul><li>pre-clean</li><li>clean(注意这个clean是phase)</li><li>validate</li><li>…</li><li>package</li></ul><p>在实际开发过程中，经常使用的命令有：<br> mvn clean:清理所有生成的class和jar;</p><p> mvn clean compile:先清理，再执行compile；</p><p> mvn clean test:先清理，再执行test，因为执行test前必须执行compile，所以这里不必指定compile；</p><p> mvn clean package:先清理，再执行到package。</p><p> 大多数phase在执行过程中，因为我们通常没有在pom.xml中配置相关的设置，所以这些phase什么事情都不做。</p><p> 经常用到的phase其实只有几个：</p><ul><li>clean：清理</li><li>compile： 编译</li><li>test：运行测试</li><li>package：打包</li></ul><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>执行一个phase又会触发一个或多个goal:<br>|执行的Phase| 对应执行的Goal |<br>|:— |:—|<br>|compile | compiler:compile |<br>|test | compiler:testCompile<br>    surefire:test |</p><p>goal的命名总是abc:xyz这种形式。</p><h2 id="lifeCycle、phase、goal类比"><a href="#lifeCycle、phase、goal类比" class="headerlink" title="lifeCycle、phase、goal类比"></a>lifeCycle、phase、goal类比</h2><ul><li>lifeCycle相当于Java的package，它包含一个或多个phase;</li><li>phase相当于Java的class,它包含一个或多个goal；</li><li>goal相当于class的method，它其实才是真正干活的。</li></ul><p>大多数情况下，我们只要指定phase，就默认执行这些phase默认绑定的goal,只有少数情况，我们可以直接指定运行一个goal，例如：启动Tomcat服务器：</p><pre><code>mvn tomcat:run</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Maven通过lifecycle、phase和goal来提供标准的构建流程。</p><p>最常用的构建名利是指定phase，然后让Maven执行到指定的phase：</p><ul><li><p>mvn clean</p></li><li><p>mvn clean compile</p></li><li><p>mvn clean test</p></li><li><p>mvn clean package</p><p>通常情况,我们总是执行phase默认绑定的goal，因此不必指定goal。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#构建流程&lt;/p&gt;
&lt;h2 id=&quot;构建流程&quot;&gt;&lt;a href=&quot;#构建流程&quot; class=&quot;headerlink&quot; title=&quot;构建流程&quot;&gt;&lt;/a&gt;构建流程&lt;/h2&gt;&lt;p&gt;Maven不但有标准化的项目结构，而且还有一套标准化的构建流程，可以自动化实现编译，打包，发布，等
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>OAuth 2.0</title>
    <link href="http://iwantjingjing.com/2021/01/16/OAuth%202.0/"/>
    <id>http://iwantjingjing.com/2021/01/16/OAuth%202.0/</id>
    <published>2021-01-16T00:47:24.094Z</published>
    <updated>2021-01-16T00:47:24.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a><a href="https://oauth.net/2/" target="_blank" rel="noopener">OAuth 2.0</a></h1><p>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices. This specification and its extensions are being developed within the IETF OAuth Working Group.</p><p>OAuth2.0是授权的行业标准协议。OAuth2.0关注于客户机开发人员的简单性，同时为web应用程序、桌面应用程序、移动电话和客厅设备提供特定的授权流。本规范及其扩展正在ietf oauth工作组中开发。    </p><p>Questions, suggestions and protocol changes should be discussed on the mailing list.    </p><p>问题、建议和方案变更应在邮件列表中讨论。</p><h2 id="OAuth-2-0-1"><a href="#OAuth-2-0-1" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h2><ul><li><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">OAuth 2.0 Framework </a> - RFC 6749<ul><li><a href="https://oauth.net/2/scope/" target="_blank" rel="noopener">OAuth Scope</a></li></ul></li><li><a href="">OAuth Grant Types</a><ul><li><a href="">Authorization Code</a></li><li><a href="">PKCE</a></li><li><a href="">Client Credentials</a></li><li><a href="">Device Code</a></li><li><a href="">Refresh Token</a></li><li>Legacy: <a href="">Implicit Flow</a></li><li>Legacy: <a href="">Password Grant</a></li></ul></li><li><a href="">Client Types - Confidential and Public Applications</a>    </li><li><a href="">Bearer Tokens</a> - RFC 6750    </li><li><a href="">Threat Model and Security Considerations</a> - RFC 6819    </li><li><a href="">OAuth Security Best Current Practice</a>    </li></ul><h3 id="Mobile-and-Other-Devices"><a href="#Mobile-and-Other-Devices" class="headerlink" title="Mobile and Other Devices"></a>Mobile and Other Devices</h3><ul><li><a href="">Native Apps</a> - Recommendations for using OAuth with native apps</li><li><a href="">Browser-Based Apps</a> - Recommendations for using OAuth with browser-based apps (e.g. an SPA)</li><li><a href="">Device Authorization Grant</a> - OAuth for devices with no browser or no keyboard</li></ul><h3 id="Token-and-Token-Management"><a href="#Token-and-Token-Management" class="headerlink" title="Token and Token Management"></a>Token and Token Management</h3><h3 id="Discovery-and-Registration"><a href="#Discovery-and-Registration" class="headerlink" title="Discovery and Registration"></a>Discovery and Registration</h3><h3 id="Experimental-and-Draft-Specs"><a href="#Experimental-and-Draft-Specs" class="headerlink" title="Experimental and Draft Specs"></a>Experimental and Draft Specs</h3><h3 id="Related-Specs-and-Extensions"><a href="#Related-Specs-and-Extensions" class="headerlink" title="Related Specs and Extensions"></a>Related Specs and Extensions</h3><h3 id="Community-Resources"><a href="#Community-Resources" class="headerlink" title="Community Resources"></a>Community Resources</h3><h3 id="Protocols-Built-on-OAuth-2-0"><a href="#Protocols-Built-on-OAuth-2-0" class="headerlink" title="Protocols Built on OAuth 2.0"></a>Protocols Built on OAuth 2.0</h3><h3 id="Code-and-Services"><a href="#Code-and-Services" class="headerlink" title="Code and Services"></a>Code and Services</h3><h3 id="OAuth-2-1"><a href="#OAuth-2-1" class="headerlink" title="OAuth 2.1"></a>OAuth 2.1</h3><h3 id="Legacy"><a href="#Legacy" class="headerlink" title="Legacy"></a>Legacy</h3><p>数组交集</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OAuth-2-0&quot;&gt;&lt;a href=&quot;#OAuth-2-0&quot; class=&quot;headerlink&quot; title=&quot;OAuth 2.0&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://oauth.net/2/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>springboot项目中使用filter无法注入bean采坑</title>
    <link href="http://iwantjingjing.com/2021/01/16/springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8filter%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5bean%E9%87%87%E5%9D%91/"/>
    <id>http://iwantjingjing.com/2021/01/16/springboot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8filter%E6%97%A0%E6%B3%95%E6%B3%A8%E5%85%A5bean%E9%87%87%E5%9D%91/</id>
    <published>2021-01-16T00:47:24.094Z</published>
    <updated>2021-01-16T00:47:24.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot项目中使用filter无法注入bean采坑"><a href="#springboot项目中使用filter无法注入bean采坑" class="headerlink" title="springboot项目中使用filter无法注入bean采坑"></a>springboot项目中使用filter无法注入bean采坑</h1><h2 id="原因-web容器加载顺序所致"><a href="#原因-web容器加载顺序所致" class="headerlink" title="原因:web容器加载顺序所致"></a>原因:web容器加载顺序所致</h2><p>加载顺序是 listener —&gt; filter —&gt; servlet,当项目启动时，<br>filter先于servlet初始化，而Spring中默认Bean的初始化是在Servlet后进行的,<br>所以会注入失败。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot项目中使用filter无法注入bean采坑&quot;&gt;&lt;a href=&quot;#springboot项目中使用filter无法注入bean采坑&quot; class=&quot;headerlink&quot; title=&quot;springboot项目中使用filter无法注入bean采
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
