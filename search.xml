<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[猪宝历险记]]></title>
    <url>%2F2019%2F05%2F28%2F%E7%8C%AA%E5%AE%9D%E5%8E%86%E9%99%A9%E8%AE%B0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[上线准备流程]]></title>
    <url>%2F2019%2F04%2F18%2F%E4%B8%8A%E7%BA%BF%E5%87%86%E5%A4%87%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[未来校长之家上线准备流程准备 搭建生产环境(PHP,Mysql,Redis等已完成) 移动端与web端准备上线包 清除生产垃圾数据 核心流程图 注意事项 点击查看接口调用地址 超管生成基础参数非必须 超管权限程序不可修改]]></content>
  </entry>
  <entry>
    <title><![CDATA[喜迎猪宝]]></title>
    <url>%2F2019%2F03%2F26%2F%E5%96%9C%E8%BF%8E%E7%8C%AA%E5%AE%9D%2F</url>
    <content type="text"><![CDATA[2019年三月十三日农历二月初七今天是个特殊的日子,阳光明媚,春风和煦,孩子你来到了我们身边. 在过了预产期三天后,在我们得知你有可能超过八斤之后,在你妈妈日渐痛苦(因为你太沉了,累的你妈妈睡不好觉,腰疼,翻身困难,吃饭泛酸水等等),我和你妈还是想顺产,但当你超过预产期又有可能因为羊水浑浊而感染时,我们坚定的认为得刨了! 三月十二号早上我跟你妈还有你芳芳姨一块去人民医院咨询住院事宜,很幸运,接待的医生很热情!当天还有二十几个出院的!医院床位充足,医生在了解了你的情况之后表示:随时可以住院! 中午我跟你妈美美的吃了一顿你奶奶做的家常饭!你妈又在你姥姥家洗了个澡,姥姥还给你妈搓的澡!下午我们就拎着大包小包住院了!住院过程很顺利,不过爸妈还是来的有点儿晚,这时候双人间已经满了,没办法我们只能住三人间,害的你妈跟我抱怨”应该上午来的时候办手续”! 我们住在了三床,隔壁2床是一个顺产的小姑娘!环境说不上多不好,但跟家里比是差多了,我跟你妈都有些不适应!医生警告”不允许离开三层住院部”,可在爸爸在楼下买东西看到别的出来吃饭的孕妇后,果断的决定带你妈回家吃饭,可能的话还想在家过夜. 护士很负责任,吃饭途中就给我们打了电话,询问去处,答曰:吃饭!护士严厉警告:不许出楼,答曰:是是是,前后打了三四通电话,老爸真有点后悔带你妈回家! 上午妈妈进了手术室,在一片手忙脚乱中(包括准备手术铺盖,准备你的抱被…..)等待的过程是漫长的,爸爸想了很多,各种担心,担心妈妈下不了手术台,担心你有啥问题……爸爸长这么大,经历了大大小小无数次考试,但从来没有像今天这样紧张! 大约过了一个半小时吧!姥姥突然叫爸爸过去抱你,原来你跟妈妈不是一个门出来,而爸爸一直在妈妈进去的门口等!你被护士抱着交给了爸爸,你是那么的软,抱被半遮着你的脸,爸爸看不真切你的脸,倒是伸出的小手给了个特写,又细又长,帅! 爸爸把你抱到楼上观察室观察,(前一天睡前妈妈还特意跟爸爸交代一定要亲手抱你上楼,然后寸步不离的看着你,洗澡等,目的就是怕把你弄丢!上手术室前又交代了一遍,伟大的妈妈.你长大可得要对你妈好啊!)然后就下楼等你妈妈出来. 你妈终于出手术室了,豆大的一滴泪挂在她的眼角,她没有一声呻吟,表情坚毅!爸爸从心里佩服你妈,她是个坚强的女子!女儿本柔,为母则刚!爸爸还是第一次从你妈妈身上感触到这种坚强! 这次迎接你到来的有,姥姥,姥爷,奶奶,妈妈,爸爸.因为妈妈是剖腹产,出手术室后要换床,需要人抬,咱们家来人少,主要也是没经验.所以抬妈妈有些困难,还好隔壁床有两位叔叔帮忙一块儿抬的妈妈.他们都是咱们家的大恩人,虽然爸爸也记不清他们了,但爸爸希望你做个好人,做个助人为乐的人.顺便涨了个经验,生孩子家里可得多来点儿人!]]></content>
  </entry>
  <entry>
    <title><![CDATA[Laravel学习笔记]]></title>
    <url>%2F2019%2F02%2F22%2FLaravel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[阅读文档官方文档(本文以5.7为例)Laravel文档 安装环境(Laravel Homestead)Laravel Homestead文档]]></content>
  </entry>
  <entry>
    <title><![CDATA[过年请假]]></title>
    <url>%2F2019%2F02%2F13%2F%E8%BF%87%E5%B9%B4%E8%AF%B7%E5%81%87%2F</url>
    <content type="text"><![CDATA[年关将至，抢票不易!然小禾佑我，得票一张。 忧喜交集,喜与孕妻朝欢暮,又忧公司业务急! 遂背Mac,随时call我! 恭祝:新春吉祥如意，事事顺达，阖家幸福。]]></content>
  </entry>
  <entry>
    <title><![CDATA[homestead 安装PHP mongo 扩展]]></title>
    <url>%2F2018%2F12%2F17%2Fhomestead-%E5%AE%89%E8%A3%85PHP-mongo-%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[解决痛点: homestead多个PHP版本,某个版本安装mongo扩展1. 进入虚拟机vagrant ssh 2. 切换到管理员sudo su 3. 查看PHP版本路径// 选择你要安装的PHP版本(我是PHP5.6) php --ini 或 find / -name php.ini 返回 /etc/php/7.1/cli/php.ini /etc/php/7.1/fpm/php.ini /etc/php/7.2/cli/php.ini /etc/php/7.2/fpm/php.ini /etc/php/7.0/cli/php.ini /etc/php/7.0/fpm/php.ini /etc/php/5.6/cli/php.ini /etc/php/5.6/fpm/php.ini 4. 进入工作目录(这个随意,我习惯进入/etc/php/5.6)cd /etc/php/5.6 5.下载php mongo扩展git clone https://github.com/mongodb/mongo-php-driver-legacy.git 6. 进入下载的目录cd mongo-php-driver-legacy/ 7. 选择对应的扩展// 参考文档 https://docs.mongodb.com/ecosystem/drivers/php/#drivers git branch -a git checkout v1.6 8. 编译PHP的mongo扩展//（不同php版本的情况下phpize版本不同） /usr/bin/phpize5.6 //（这里边也需要根据情况指定php-config的版本，且和phpize的版本保持一致。） ./configure --with-php-config=/usr/bin/php-config5.6 make &amp;&amp; make install 编译完成后，mongo的php扩展在module目录中，它的文件名是mongo.so* 9. 查看php的extension_dir/usr/bin/php5.6 -i|grep extension_dir 返回 extension_dir =&gt; /usr/lib/php/20131226 =&gt; /usr/lib/php/20131226 这说明php的扩展目录是/usr/lib/php/20131226 或者你用phpinfo()输出一个页面，在里面找extension_dir也可以找到* 10. 把mongo.so扩展模块移入php扩展目录中mv ./module/mongo.so /usr/lib/php/20131226 注意，前提要求当前工作目录是在刚才编译的mongo-php-driver-legacy目录中 11. 添加php配置文件的ini文件sudo touch /etc/php/5.6/fpm/conf.d/20-mongo.ini 12. 使用vi编辑器写入如下内容vim /etc/php/5.6/fpm/conf.d/20-mongo.ini extension=mongo.so 记得使用vi编辑器时使用：wq命令保存 13. 重启PHPservice php5.6-fpm restart]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vagrant基本用法]]></title>
    <url>%2F2018%2F09%2F11%2FVagrant%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[官网: https://www.vagrantup.com/intro 介绍what is vagrant (流浪汉是什么)Introduction to Vagrant (流浪汉简介)Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automaiton, Vagrant lowers development setup time, increases production parity,and makes the &quot;works on my machine&quot; excuse a relic of the past. if you are already familiar with the basics of Vagrant, the documentation provides a better reference build for all available features and internals. Vagrant是一种在单个工作流程中构建和管理虚拟环境的工具.通过易于使用的工 作流程并专注于自动化,Vagrant降低了开发环境的设置时间,提高了生产平价, 并使&quot;在我的假期上工作&quot;称为过去的遗留物. 如果您已经熟悉Vagrant的基础知识,那么该文档可为所有可用功能和内部提供 更好的参考构建. why Vagrant (为什么选择Vagrant)vagrant provides easy to configure,reproducible,and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team. To achieve its magic,Vagrant stands on the shoulders of giants. Machines are provisioned on top of VirtualBox,VMware,AWS,or any other provider,Then,Industry-standard providioning tools such as shell scripts,Chef,or Puppet,can automatically install and configure software on the virtual machine. Vagrant 提供易于配置,可重复和便携的工作环境,基于行和标准技术构建,并由单一 一致的工作流程控制,以帮助您和您的团队最大限度地提高生成力和灵魂性. 为了实现其魔力,Vagrant站在巨人的肩膀上.在VirtualBox,VMware,AWS或 任何其他提供商之上配置计算机.然后,行业标准配置工具(如shell脚本,Chef或 Puppet)可以在虚拟机上自动安装和配置软件. For Developers (对于开发者)if you are a developer,Vagarnt will isolate dependencies and their configuration within a single disposable,consistent environment,without sacrificing any of the tools you are used to working with(editors,browsers,debuggers,etc.).Once you or someone else creates a single Vagrantfile,you just need to vagrant up and everything is installed and configured for you to work .Other members of your team create their development environments form the same configuration,so whether you are working on Linux,Mac OSX,or Windows,all your team members are running code in the same environment ,against the same dependencies,al configured the same way. Say goodbye to &quot;works on my machine&quot;bugs. 如果您是一位开发人员,Vagrant将在一个一致的环境中隔离依赖及其配置, 而不会牺牲您习惯使用的任何工具(编辑器,浏览器,调试器等).一旦您或其他人 创建了单个Vagrant文件,您只需要运行vagrant up命令安装并配置所有内容 即可使用.团队的其他成员使用相同的配置创建他们的开发环境,因此无论您是在 Linux,Mac OS X还是Windows上工作,您的所有团队成员都在同一环境中运行 代码,针对相同的依赖项,所有组件都配置相同办法.告别&quot;在我的机器上工作&quot;的 错误. For Operators (对于运维)if you are an operations engineer or DevOps engineer,Vagrant gives you a disposable environment and consisitent workflow for developing and testing infrastructure management scripts. you can quickly test things like shell scripts,Chef cookbooks, Puppet modules,and more using local virtualization such as VirtualBox or VMware.Then,with the same configuration,you can test these scripts on remote clouds such as AWS or RackSpace with the same workflow.Ditch your custom scripts to recycle EC2 instances,stop juggling SSH prompts to various machines, and start using Vagrant to bring sanity to your life. 如果你是运维工程师或者开发运维工程师,Vagrant为您提供一次性环境和一致的 工作流程,用于开发和测试基础架构管理脚本.您可以使用VirtualBox或VMware 等本地虚拟化快速测试shell脚本,Chef cookbook,Puppet模块等内容.然后 ,使用相同的配置,您可以使用相同的工作流在远程云(如AWS或RackSpace)上测试 这些脚本.抛弃自定义脚本以回收EC2实例,停止将SSH提示传递给各种计算机,并 开始使用Vagrant为您的生活带来理智. For Designers(对于设计)If you are a designer,Vagrant will automatically set everything up that is required for that web app in order for you to focus on doing what you do best:design.Once a developer configures Vagrant,you do not need to worry about how to get that app running ever again.No more bothering other developers to help you fix your environment so you can test designs.Just check out the code ,vagrant up,and start designing. 如果你是个设计师,Vagrant 将自动设置该web应用程序所需的所有内容,以便你 集中精力做你最擅长的事情:设计.当开发人员配置了一次Vagrant,你再也不用 担心怎样去运行应用程序.不必再打扰其他开发人员来帮助你修复环境,因此你能 测试你的设计.仅打出单词,vagrant up ,就可以开始设计了. For Everyone(对于任何人)Vagrant is designed for erveyone as the easiest and fastest way to create a virtualized environment! Vagrant 的设计对任何人来说都是最简单最快速的获取虚拟环境的方式. Vagrant vs. Other Software (Vagrant 与其他软件的对比)Vagrant is not the only tool to manage virtual machines and development environments.This section compares Vagrant to these other software choices. Vagrant 不是唯一管理虚拟机和开发环境的工具,本节将比较Vagrant与其他 软件以便选择. Due to the bias of the comparisons,we attempt to only use facts.If you find something that is invalid or out of date in the comparisons,please open an issue and we&apos;ll address it as soon as possible. 由于比较的偏颇,我们试图只用事实说话,在比较中假如你发现了无效的或者过期 的内容,请开启一个issue,我们将尽可能的处理它. Use the navigation on the left to read comparisons of Vagrant versus similar software. 使用左侧导航栏去阅读Vagrant与相似软件的比较 CLI ToolsVagrant vs CLI ToolsVirtualization software like VirtualBox and VMware come with command line utilities for managing the lifecycle of machines on their platform.Many people make use of these utilties for managing the lifecycle of machines on their platform.Many people make use of these utilities to write their own automation. Vagrant actually uses many of these utilties internally. 虚拟化软件如VirtualBox和VMware,带有命令行工具来管理平台上的机器的生命 周期.许多人使用这些工具来写他们自己的自动化程序.Vagrant实际上在内部用了 很多这样的工具. The difference between these CLI tool and Vagrant is that Vagrant builds on top of these utilties in a number of ways while still providing a consistent workflow.Vagrant supports multiple provisioners to setup the machine,automatic SSH setup, creating HTTP tunnels into your development environment,and more. All of these can be configured using a single simple configuration file. 这些CLI工具与Vagrant的区别在于,Vagrant以多种方式在这些实用程序之上 构建,同时仍然提供一致的工作流.Vagrant 支持多种同步文件夹类型,设置机器 的多个提供程序 自动SSH设置 创建多开发环境中的HTTP隧道等.所有这些都可以 使用一个简单的配置文件来配置. Vagrant still has a number of improvements over manual scripting even if you ignore all the higher-level features Vagrant provides. The command-line utilities provided by vitualization software often change each version or have subtle bugs with workarounds. Vagrant automatically detects the version,uses the correct flags, can work around known issues.So if you&apos;re using one version of VirtualBox and a co-worker is using a different version, Vagrant will still work consistently. Vagrant在手动脚本方面仍有许多改进.即使你忽略了流浪汉提供的所有高级特征. 虚拟化软件提供的命令行工具经常改变每个版本或有变通方法的细微错误. 流浪汉自动检测版本,使用正确的标志,能围绕已知问题工作. 因此假如你使用一个版本的VirtualBox而另一个同事使用不同的版本,Vagrant 仍然可以一致工作. For highly-specifil workflows that don&apos;t change often.it can still be beneficial to maintain custom scripts .Vagrant is tageted at building development environments but some advanced users still use the ClI tools underneath to do other manual things. 对于不经常改变的高度特定的工作流,维护自定义脚本仍然是有益的.Vagrant 的目标是构建开发环境,但是一些高级用户仍然使用下面的CLI工具来完成 其他手动操作. DockerVagrant vs. DockerVagrant is a tool focused on providing a consistent development environment workflow across multiple operating systems.Docker is a container management that can consistently run sofeware as long as a containerization system exists. Vagrant是一个专注于跨多个操作系统提供一致的开发环境工作流的工具. Docker是一种容器管理,只要存在容器化系统,就可以始终如一地运行软件. Containers are generally more lightweight than virtual machines,so starting and stopping containers is extremely fast. Most common development machines don&apos;t have a containerization system built-in, and Docker uses a virtual machine with Linux installed to provide that. 容器一般比虚拟机更轻量级,因此开启或停止容器是非常快的.大多数常见的 开发及其没有内置化的容器系统,Doker使用安装了Linux的虚拟机来提供这 一点. Currently,Docker lacks support for certain operating systems(such as BSD).if you target deployment is one of these operating systems,Docker will not provide the same prodution parity as tool like Vagrant.Vagrant will allow you to run a Windows development environment on Mac or Linux,as well. 目前,Docker缺乏对某些操作系统(如:BSD)的支持.如果你的目标是部署 这些操作系统之一,那么Docker不会像Vagrant一样提供相同的一致产品. Vagrant允许你在Mac或Linux上运行Windows开发环境. For microservice heavy environments,Docker can be attractive because you can easily start a single Docker VM and start many containers above that very quickly.This is a good use case for Docker.Vagrant can do this as well with the Docker provider.A primary benefit for Vagrant is a consistent workflow but there are many cases where a pure-Docker workflow does make sense. Both Vagrant and Docker have a vast library of community-contributed &quot;images&quot;or&quot;boxes&quot;to choose from. 对于微服务繁重的环境,Docker可能很有吸引力,因为您可以单个Docker VM 并快速启动多个容器.这是Docker的一个很好的用例.Vagrant也可以 使用Docker提供程序执行此操作.Vagrant的主要好处是一致的工作流程, 但在很多情况下,纯Docker工作流程确实有意义. Vagrant和Docker都拥有庞大的社区贡献&quot;图像&quot;或&quot;盒子&quot;库供您选择. TerraformVagrant vs. Terraform]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2018%2F07%2F27%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[日常操作命令查看当前所在的工作目录的全路径pwd[root@localhost ~]# pwd /root 查看当前系统的时间date[root@localhost ~]# date +%Y-%m-%d date +%Y-%m-%d --date=&quot;-1 day&quot; #加减也可以 month | year date -s &quot;2016-07-28 16:12:00&quot; ## 修改时间 查看有谁在线(哪些人登陆了服务器)who 查看当前在线 last 查看最近的登陆历史记录 关机/重启关机(必须用root用户) shutdown -h now ## 立刻关机 shutdown -h +10 ## 10分钟以后关机 shutdown -h 12:00:00 ## 12点整的时候关机 halt # 等于立刻关机 重启 shutdown -r now reboot # 等于立刻重启 清屏clear ## 或者用快捷键 Ctrl + 1 退出当前进程Ctrl + c ##有些程序也可以用q键退出 挂起当前进程Ctrl + z ## 进程会挂起到后台 bg jobid ## 进程在后台继续执行 fg jobid ## 让进程回到前台 echo相当于Java中System.out.println(userName) a=&quot;test&quot; echo a ## a echo $a ## test 目录操作查看目录信息ls / ## 查看根目录下的子节点(文件夹和文件)信息 ls -al ## -a是显示隐藏文件 -l是以更详细的列表形式显示 ls -l ## 有一个别名: ll 可以直接使用ll&lt;是两个L&gt; 切换工作目录cd ~ ##切换都用户主目录 cd - ##切换上次所在的目录 cd 什么都不带,则回到用户的主目录 创建文件夹mkdir aaa ## 这是相对路径的写法 mkdir /data ## 这是绝对路径的写法 mkdir -p aaa/bbb/ccc ## 级联创建目录 删除文件夹rmdir aaa ##可以删除空目录 rm -r aaa ## 可以把aaa整个文件夹及其中的所有子节点全部删除 rm -rf aaa ## 强制删除aaa 修改文件夹名称mv aaa boy mv本质上是移动 mv install.log aaa/ 将当前目录下的install.log移动到aaa文件夹中去 rename 可以用来批量更改文件名 [root@localhost aaa]# ll total 0 -rw-r--r--. 1 root root 0 Jul 28 17:33 1.txt -rw-r--r--. 1 root root 0 Jul 28 17:33 2.txt -rw-r--r--. 1 root root 0 Jul 28 17:33 3.txt [root@localhost aaa]# rename .txt .txt.bak * [root@localhost aaa]# ll total 0 -rw-r--r--. 1 root root 0 Jul 28 17:33 1.txt.bak -rw-r--r--. 1 root root 0 Jul 28 17:33 2.txt.bak -rw-r--r--. 1 root root 0 Jul 28 17:33 3.txt.bak]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五笔口诀]]></title>
    <url>%2F2018%2F07%2F25%2F%E4%BA%94%E7%AC%94%E5%8F%A3%E8%AF%80%2F</url>
    <content type="text"><![CDATA[五笔字型最直观,依照笔画把码编;键名汉字打四下,基本字根请照搬;一二三末取四码,顺序拆分大优先;不足四码要注意,交叉识别补后边 86版五笔字根1区横起笔11G 王旁青头戋（兼）五一12F 土士二干十寸雨13D 大犬三（羊）古石厂14S 木丁西15A 工戈草头右框七2区竖起笔21H 目具上止卜虎皮22J 日早两竖与虫依23K 口与川，字根稀24L 田甲方框四车力25M 山由贝，下框几3区撇起笔31T 禾竹一撇双人立，反文条头共三一32R 白手看头三二斤33E 月彡（衫）乃用家衣底34W 人和八，三四里35Q 金勺缺点无尾鱼，犬旁留儿一点夕，氏无七（妻）4区点起笔41Y 言文方广在四一，高头一捺谁人去42U 立辛两点六门疒43I 水旁兴头小倒立44O 火业头，四点米45P 之字军盖道建底，摘礻（示）衤（衣）5区折起笔51N 已半巳满不出己，左框折尸心和羽52B 子耳了也框向上53V 女刀九臼山朝西54C 又巴马，丢矢矣55X 慈母无心弓和匕，幼无力]]></content>
  </entry>
  <entry>
    <title><![CDATA[深入解读RabbitMQ工作原理及Java中简单使用]]></title>
    <url>%2F2018%2F07%2F16%2F%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BBRabbitMQ%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8AJava%E4%B8%AD%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[引用: https://mp.weixin.qq.com/s/ryu-zD3U62m32BZdByNxng http://www.cnblogs.com/vipstone/RabbitMQ简介在介绍RabbitMQ之前首先介绍一下MQ ,MQ是什么? MQ全称是Message Queue.可以理解为消息队列的意思.简单的说就是消息以管道的方式进行传递 RabbitMQ是一个实现了AMQP(Advanced Message Queuing Protocol)高级消息队列协议的消息队列服务,用Erlang语音写成. 使用场景在我们秒杀抢购商品的时候,系统会提醒我们稍等排队中,而不是像几年前一样页面卡死或报错给用户. 像这种排队结算就是用到了消息队列机制,放入通道里面一个一个结算处理,而不是某个时间段突然涌入大批量的查询新增把数据库给搞宕机.所以RabbitMQ本质上起到的作用就是削峰填谷,为业务保驾护航. 为什么选择RabbitMQ现在市面上有很多MQ可以选择,比如ActiveMQ ZeroMQ Appche Qpid,那问题来了为啥要选择RabbitMQ? 1: 除了Qpid,RabbitMQ是唯一一个实现了AMQP标准的消息服务器;2: 可靠性,RabbitMQ的持久化支持,保证了消息的稳定性;3: 高并发,RabbitMQ使用了Erlang开发语言,Erlang是为电话交换机开发的语言,天生自带高并发光环,和高可用特性;4: 集群部署简单,正是因为Erlang使得RabbitMQ集群部署变得超级简单;5: 社区活跃度高,根据网上资料来看,RabbitMQ也是首选; 工作机制生产者 消费者和代理在了解消息通讯之前首先要了解3个概念:生产者 消费者和代理. 生产者:消息的创建者,负责创建和推送数据到消息服务器; 消费者:消息的接收方,用于处理数据和确认消息; 代理者:就是RabbitMQ本身,用于扮演”快递”的角色,本身不生产消息,只是扮演”快递”的角色. 消息发送原理首先你必须连接到Rabbit才能发布和消费消息,那怎么连接和发送消息呢? 你的应用程序和Rabbit Server之间会创建一个TCP连接,一旦TCP打开,并通过认证,认证就是你试图连接Rabbit之前发送的Rabbit服务器连接信息和用户名和密码,有点像程序连接数据库,使用Java有两种连接认证的方式,后面代码会详细介绍,一旦认证通过你的应用程序和Rabbit就创建了一条AMQP信道(Channel). 信道是创建在”真实”TCP上的虚拟连接,AMQP命令都是通过信道发送出去的,每个信道都会有唯一的ID,不论是发布消息,订阅队列或者介绍消息都是通过信道完成的. 为什么不通过TCP直接发送命令?对于操作系统来说创建和销毁TCP会话是非常昂贵的开销,假设高峰期每秒有成千上万条连接,每个连接都要创建一条TCP会话,这就造成了TCP连接的巨大浪费,而且操作系统每秒能创建的TCP也是有限的,因此很快就会遇到系统瓶颈. 如果我们每个请求都使用一条TCP连接,既满足了性能的需要,又能确保每个连接的私密性,这就是引入信道概念的原因. 你必须知道的RabbitMQ想要真正的了解Rabbit有些名词是你必须知道的. 包括:ConnectionFactory(连接管理器) Channel(信道)Exchange(交换器) Queue(队列) RoutingKey(路由键)BindingKey(绑定键) ConnectionFactory(连接管理器): 应用程序与Rabbit之间建立连接的管理器,程序代码中使用; Channel(信道) :消息推送使用的通道; Exchange(交换器) :用于接受 分配消息; Queue(队列): 用于存储生产者的消息; RoutingKey(路由键): 用于把生成者的数据分配到交换器上; bingdingKey(绑定键): 用于把交换器的消息绑带到队列上; 消息持久化Rabbit队列和交换器有一个不可告人的秘密,就是默认情况下重启服务器会导致消息丢失,那么怎么保证Rabbit在重启的时候不丢失呢?答案就是消息持久化. 当你把消息发送到Rabbit服务器的时候,你需要选择你是否要进行持久化,但这并不能保证Rabbit能重崩溃中恢复,想要Rabbit消息能恢复必须要满足3个条件: 投递消息的时候durable设置为true,消息持久化; 消息已经到达持久化交换器上; 消息已经到达持久化的队列; 持久化工作原理Rabbit会将你的持久化消息写入磁盘上的持久化日志文件,等消息被消费后,Rabbit会把这条消息标识为等待垃圾回收. 持久化的缺点消息持久化的优点显而易见,但缺点也很明显,那就是性能,因为要写入硬盘要比写入内存性能低很多,从而降低了服务器的吞吐量,尽管使用SSD硬盘可以使事情得到缓解,但他仍然吸干了Rabbit的性能,当消息成千上万条要写入磁盘的时候,性能是很低的. 所以使用者要根据自己的的情况,选择适合自己的方式. 虚拟主机每个Rabbit都能创建很多vhost,我们称之为虚拟主机,每个虚拟主机其实都是mini版的RabbitMQ,拥有自己的队列,交换器和绑定,拥有自己的权限机制. 环境搭建如果你是在Windows10上去安装那就更简单了，先放下载地址： Erlang/Rabbit Server百度网盘链接：https://pan.baidu.com/s/1TnKDV-ZuXLiIgyK8c8f9dg 密码：wct9 当然也可去Erlang和Rabbit官网去下，就是速度比较慢。我的百度云Rabbit最新版本：3.7.6，Erlang版本：20.2，注意：不要下载最新的Erlang，在Windows10上打开扩展插件有问题，打不开。 1.安装Erlang； 2.安装Rabbit Server； 3.进入安装目录sbin下，使用命令“rabbitmq-plugins enable rabbitmq_management”启动网页管理插件； 4.重启Rabbit服务； 使用：http://localhost:15672进行测试，默认的登陆账号为：guest，密码为：guest 重复安装Rabbit Server的坑如果不是第一次在Windows上安装Rabbit Server一定要把Rabbit和Erlang卸载干净之后，找到注册表：HKEY_LOCAL_MACHINESOFTWAREEricssonErlangErlSrv 删除其下的所有项。 不然会出现Rabbit安装之后启动不了的情况，理论上卸载的顺序也是先Rabbit在Erlang。 代码实现java版实现,使用maven项目. 项目创建成功之后,添加Rabbit Client jar包,只需要在pom.xml里面配置,如下信息: &lt;dependency&gt; &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt; &lt;artifactId&gt;amqp-client&lt;/artifactId&gt; &lt;version&gt;4.7.0&lt;/version&gt; &lt;/dependency&gt; java实现代码分为两个类,第一个是创建Rabbit连接,第二是应用类使用最简单的方式发布和消费消息. Rabbit的连接,两种方式:方式一: public static Connection GetRabbitConnection() { ConnectionFactory factory = new ConnectionFactory(); factory.setUsername(Config.UserName); factory.setPassword(Config.Password); factory.setVirtualHost(Config.VHost); factory.setHost(Config.Host); factory.setPort(Config.Port); Connection conn = null; try { conn = factory.newConnection(); } catch (Exception e) { e.printStackTrace(); } return conn; } 方式二: public static Connection GetRabbitConnection() { ConnectionFactory factory = new ConnectionFactory(); // 连接格式：amqp://userName:password@hostName:portNumber/virtualHost String uri = String.format( &quot;amqp://%s:%s@%s:%d%s&quot;, Config.UserName, Config.Password, Config.Host, Config.Port, Config.VHost); Connection conn = null; try { factory.setUri(uri); factory.setVirtualHost(Config.VHost); conn = factory.newConnection(); } catch (Exception e) { e.printStackTrace(); } return conn; } 第二部分: 应用类,使用最简单的方式发布和消费消息public static void main(String[] args) { Publisher(); // 推送消息 Consumer(); // 消费消息 } /** * 推送消息 */ public static void Publisher() { // 创建一个连接 Connection conn = ConnectionFactoryUtil.GetRabbitConnection(); if (conn != null) { try{ // 创建通道 Channel channel = conn.createChannel(); // 声明队列【参数说明：参数一：队列名称，参数二：是否持久化；参数三：是否独占模式；参数四：消费者断开连接时是否删除队列；参数五：消息其他参数】 channel.queueDeclare(Config.QueueName, false, false, false, null); String content = String.format(&quot;当前时间: %s&quot;,new Date().getTime()); // 发送内容【参数说明：参数一：交换机名称；参数二：队列名称，参数三：消息的其他属性；参数四：消息主体】 channel.basicPublish(&quot;&quot;, Config.QueueName, null, content.getBytes(&quot;UTF-8&quot;)); System.out.println(&quot;已发送消息：&quot; + content); // 关闭连接 channel.close(); conn.close(); } catch(Exception e) { e.printStackTrace(); } } } /** * 消费消息 */ public static void Consumer() { // 创建一个连接 Connection conn = ConnectionFactoryUtil.GetRabbitConnection(); if(conn != null) { try { // 创建通道 Channel channel = conn.createChannel(); // 声明队列[参数说明:1:队列名称,2:是否持久化,3:是否独占模式,4:消费者断开连接时是否删除队列,5:消息其他参数] channel.queueDelare(Config.QueueName,false,false,false,null); //创建订阅器,并接受消息 channel.basicConsume(Config.QueueName,false,&quot;&quot;,new DefaultConsumer(channel) { @Overrride public void handleDelivery( String consumerTag, Envelope envelope, AMQP.BasicPropeties properties, byte[] body) throws IOException { String routingKey = envelope.getRoutingkey(); // 队列名称 String contentType = properties.getContentType(); // 内容类型 String content = new String(body,&quot;utf-8&quot;); // 消息正文 System.out.println(&quot;消息正文:&quot; + content); channel.basicAck(envelope.getDeliveryTag(),false); // 手动确认消息(参数1:该消息的index;2:是否批量应答,true批量确认小于index的消息) } }); } catch(Exception e) { e.printStackTrace(); } } } 代码里面已经写了很详细的注释，在这里也不过多的介绍了。 执行效果，如图：]]></content>
  </entry>
  <entry>
    <title><![CDATA[不止代码]]></title>
    <url>%2F2018%2F07%2F06%2F%E4%B8%8D%E6%AD%A2%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[不止代码理解 将学到的东西真正试试,才能理解更加深刻. I hear and i forget .I see and i remember.I do and i understand.]]></content>
  </entry>
  <entry>
    <title><![CDATA[AtomicInteger原理分析]]></title>
    <url>%2F2018%2F07%2F04%2FAtomicInteger%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[AtomicInteger通俗的讲就是:对某个内存值拷贝一个副本,某个线程若读到这个副本,则对其进行计算,输出结果,在写入内存时,再次取出内存值与该副本比较,若副本与内存值相同则把新的值写入内存. 较为官方的解释:通过CAS(AtomicInteger)实现, CAS算法CAS有三个操作数,内存值V,旧的预期值A,要修改的新值B.当且仅当预期值A和内存值V相同时,将内存值V修改为B,否则什么都不做. 两个问题:(1) CSV算法仍然可能出现冲突,例如A,B两个线程,A已经进入写内存但未完成，此时A读取到的副本且读取成功，AB两个线程同时进入写内存操作，必然会造成冲突。 CAS算法本质并非完全无锁，而是把获得锁和释放锁推迟至CPU原语实现，相当于尽可能的缩小了锁的范围；直接互斥地实现系统状态的改变，它的使用基本思想是copy-on-write——在修改完对象的副本之后再用CAS操作将副本替换为正本。 (2)ABA问题，若其中一个线程修改A-&gt;B-&gt;A，另外一个线程仍然读取到A，虽然值是预期值，但并不能说明该内存值没有变化。]]></content>
  </entry>
  <entry>
    <title><![CDATA[AtomicInteger类的理解与使用]]></title>
    <url>%2F2018%2F07%2F04%2FAtomicInteger%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[引用:https://blog.csdn.net/u012734441/article/details/51619751 首先看两段代码，一段是Integer的，一段是AtomicInteger的，为以下： public class Sample1 { private static Integer count = 0; synchronized public static void increment() { count++; } } 以下是AtomicInteger的： public class Sample2 { private static AtomicInteger count = new AtomicInteger(0); public static void increment() { count.getAndIncrement(); } } 对比发现:使用Integer时必须加上synchronized保证不会出现并发线程同时访问的情况,而AtomicInteger中却不用加上synchronized,在这里AtomicInteger是提供原子操作的. AtomicInteger是一个提供原子操作的Integer类，通过线程安全的方式操作加减。 AtomicInteger使用场景 AtomicInteger提供原子操作来进行Integer的使用，因此十分适合高并发情况下的使用。 AtomicInteger源码部分讲解 public class AtomicInteger extends Number implements java.io.Serializable { private static final long serialVersionUID = 6214790243416807050L; // setup to use Unsafe.compareAndSwapInt for updates private static final Unsafe unsafe = Unsafe.getUnsafe(); private static final long valueOffset; static { try{ valueOffset = unsafe.objectFieldOffset (AtomicInteger.class.getDeclaredField(&quot;value&quot;)); } catch (Exception e) { throw new Error(ex); } } private volatile int value; } 以上为AtomicInteger中的部分源码，在这里说下其中的value，这里value使用了volatile关键字，volatile在这里可以做到的作用是使得多个线程可以共享变量，但是问题在于使用volatile将使得VM优化失去作用，导致效率较低，所以要在必要的时候使用，因此AtomicInteger类不要随意使用，要在使用场景下使用。 AtomicInteger实例使用以下就是在多线程情况下，使用AtomicInteger的一个实例，这段代码是借用IT宅中的一段代码。 public class AtomicTest { static long randomTime() { return (long) (Math.random() * 1000); } public static void main(String[] args) { // 阻塞队列，能容纳100个文件 final BlockingQueue&lt;File&gt; queue = new LinkedBlockingQueue&lt;File&gt;(100); // 线程池 final ExecutorService exec = Executors.newFixedThreadPool(5); final File root = new File(&quot;D:\\ISO&quot;); // 完成标志 final File exitFile = new File(&quot;&quot;); // 原子整型，读个数 // AtomicInteger可以在并发情况下达到原子化更新，避免使用了synchronized，而且性能非常高。 final AtomicInteger rc = new AtomicInteger(); // 原子整型，写个数 final AtomicInteger wc = new AtomicInteger(); // 读线程 Runnable read = new Runnable() { public void run() { scanFile(root); scanFile(exitFile); } public void scanFile(File file) { if (file.isDirectory()) { File[] files = file.listFiles(new FileFilter() { public boolean accept(File pathname) { return pathname.isDirectory() || pathname.getPath().endsWith(&quot;.iso&quot;); } }); for (File one : files) scanFile(one); } else { try { // 原子整型的incrementAndGet方法，以原子方式将当前值加 1，返回更新的值 int index = rc.incrementAndGet(); System.out.println(&quot;Read0: &quot; + index + &quot; &quot; + file.getPath()); // 添加到阻塞队列中 queue.put(file); } catch (InterruptedException e) { } } } }; // submit方法提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。 exec.submit(read); // 四个写线程 for (int index = 0; index &lt; 4; index++) { // write thread final int num = index; Runnable write = new Runnable() { String threadName = &quot;Write&quot; + num; public void run() { while (true) { try { Thread.sleep(randomTime()); // 原子整型的incrementAndGet方法，以原子方式将当前值加 1，返回更新的值 int index = wc.incrementAndGet(); // 获取并移除此队列的头部，在元素变得可用之前一直等待（如果有必要）。 File file = queue.take(); // 队列已经无对象 if (file == exitFile) { // 再次添加&quot;标志&quot;，以让其他线程正常退出 queue.put(exitFile); break; } System.out.println(threadName + &quot;: &quot; + index + &quot; &quot; + file.getPath()); } catch (InterruptedException e) { } } } }; exec.submit(write); } exec.shutdown(); } } AtomicInteger使用总结AtomicInteger是在使用非阻塞算法实现并发控制，在一些高并发程序中非常适合，但并不能每一种场景都适合，不同场景要使用使用不同的数值类。]]></content>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA开发快捷键(IDEA tool Keyboard shutcuts)]]></title>
    <url>%2F2018%2F07%2F04%2FIntelliJ-IDEA%E5%BC%80%E5%8F%91%E5%BF%AB%E6%8D%B7%E9%94%AE-IDEA-tool-Keyboard-shutcuts%2F</url>
    <content type="text"><![CDATA[IDEA tool Keyboard shutcuts： Action Mac OSX Win/Linux 注释代码(//) Cmd + / Ctrl + / 注释代码(/**/) Cmd + Option + / Ctrl + Shift + / 格式化代码 Cmd + Option + L Ctrl + Alt + L 清除无效包引用 Option + Control + O Alt + Ctrl + O 查找 Cmd + F Ctrl + F 查找+替换 Cmd + R Ctrl + R 上下移动代码 Option + Shift + Up/Down Alt + Shift + Up/Down 删除行 Cmd + Delete Ctrl + Y 扩大缩小选中范围 Option + Up/Down Ctrl + W/Ctrl + Shift + W 快捷生成结构体 Cmd + Option + T Ctrl + Alt + T 快捷覆写方法 Cmd + O Ctrl + O 快捷定位到行首/尾 Cmd + Left/Right Ctrl + Left/Right 折叠展开代码块 Cmd + Plus,Minus Ctrl + Plus/Minus 折叠展开全部代码块 Cmd + Shift + Plus,Minus Ctrl + Shift + Plus,Minus 文件方法结构 Cmd + F12 Ctrl + F12 查找调用的位置 Ctrl + Option + H Ctrl + Alt + H 大小写转换 Cmd + Shift + U Ctrl + Shift + U 找到使用 Alt+F7 Alt+F7 显示使用 Ctrl+Alt+F7 Ctrl+Alt+F7]]></content>
  </entry>
  <entry>
    <title><![CDATA[php中unset详解]]></title>
    <url>%2F2018%2F06%2F20%2Fphp%E4%B8%ADunset%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[unset()经常会被用到,用于销毁指定的变量,但它有自己的行为模式,如果不仔细的话可能被中文解释给迷惑: 先来看看官方文档的说法: unset —- unset a given variable void unset(mixed $var [,mixed $…]); parameters: var:The variable to be unset. //要unset的变量 …Anther variable… // 其他需要unset的变量 return Values:No value is returned. //unset不返回值 Because this is a language construct and not a function,itcannot be called using variable functions //unset()是语言结构,不是函数,因此不能被函数变量调用,具体参照函数变量. 使用function_exists(‘unset’)返回的false,以此证明unset并不是一个函数,所以无法使用$fun=’unset’;$fun()的方式调用unset() it is possible to unset even object properties visible in current context. // 通用环境下unset可以销毁对象或者对象的可见属性(public) It is not possible to unset $this inside on object method since PHP5 // 在PHP5之前unset无法销毁对象中的$this方法 when using unset() on inaccessible object properties,the _unset()overloading method will be called,if declare. 当unset()无法销毁对象中的属性,例如私有属性,保护属性,那么会自动加载对象中的_unset方法. description: unset()destroys the specified variables. //unset()销毁指定的变量 The behavior of unset()inside of a function can vary depending on what type of variable you are attempting to destroy. // unset()的行为在函数内部可以根据你所指定销毁的变量类型变化. 情况一: if a globalized variable is unset() inside of a function,only the localvariable is destroyed.The variable in the calling environment willretain the same value as before unset() was called. 如果在函数内使用一个global使其全局化的变量,使用unset进行销毁,那么只有局部的变量会被销毁,在调用环境的变量将会保留没有unset()销毁之前的调用的变量值. the example: &lt;?php function destroy_foo() { global $foo; unset($foo); } $foo = &apos;bar&apos;; destroy_foo(); echo $foo; ?&gt; the above example will output:bar 这是官方文档的例子,可能这样还是不太明显,把上面的例子改成下面这样,一切就很清晰了. &lt;?php function des(){ global $foo; $foo=&apos;bars&apos;; unset($foo); echo $foo; } $foo=&apos;bar&apos;; echo &quot;The globalized variable is unset() inside of a function:&quot;; des(); echo &quot;&lt;br/&gt;&quot;; echo &quot;The variable in the calling environment:&quot;; echo $foo;]]></content>
  </entry>
  <entry>
    <title><![CDATA[LeetCode]]></title>
    <url>%2F2018%2F05%2F31%2FLeetCode%2F</url>
    <content type="text"><![CDATA[两数之和给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。 你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 分析: 思路一：暴力解法，两次for循环，遍历所有可能，这也是容易想到的方法，时间复杂度O(n^2),空间复杂度O(1); 思路二：利用哈希表，每次存储target减去当前数的差值(key)，当前值的下标(value)，当再碰到这个值时，即找到了符合要求的值。时间复杂度O(n),空间复杂度O(n); 代码: 1: //思路一暴力解法 public int[] twoSum(int[] nums, int target) { // write your code here int[] a = new int[2]; for (int i = 0; i &lt; nums.length - 1; i++){ // 注意j等于i + 1;若j = 1则循环顺序不对 for (int j = i + 1; j &lt; nums.length; j++ ){ if (nums[i] + nums[j] == target){ a[0] = i; a[1] = j; break; } } } return a; } 2: //思路二利用哈希表 public int[] twoSum(int[] nums, int target) { int[] a = new int[2]; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); for (int i = 0; i &lt; nums.length; i++){ if (map.containsKey(nums[i])){ a[0] = map.get(nums[i]); a[1] = i; return a; } map.put(target - nums[i], i); } return a; } 两数相加给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。 You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. 示例： 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) 输出：7 -&gt; 0 -&gt; 8 原因：342 + 465 = 807 结题思路方法: 初等数学 我们是有变量来跟踪进位,并从包含最低有效位的表头开始模拟逐位相加的过程. 如图所示,对两数相加方法的可视化:342 + 465 = 807,每个节点都包含一个数字,并且数字按位逆序存储. 算法 就像你在纸上计算两个数字的和那样,我们首先从最低有效位也就是列表l1和l2的表头开始相加.由于每位数字都应当处于0…9的范围内,我们计算两个数字的和时可能会出现”溢出”.例如:5+7 = 12.在这种情况下,我们会将当前位的数值设置为2,并将进位carry = 1带入下一次迭代.进位carry必定是0或者1,这是因为两个数字相加(考虑到进位)可能出现的的最大和为9+ 9+1=19 伪代码如下: 将x设为节点p的值.如果p已经到达l1的末尾,则将其设置为0. 将y设为节点q的值,如果q已经到达l2的末尾,则将其设置为0. 设定sum = x + y + carry. 更新进位的值,carry = sum/10. 创建一个数值为(sum mod 10) 的新节点,并将其设置为当前节点的下一个节点,然后将当前节点 前进到下一个节点. 同时,将p和q前进到下一个节点. 检查carry = 1是否成立,如果成立,则向返回列表追加一个含有数字1的新节点. 返回哑节点的下一个节点. 请注意我们使用哑节点来简化代码.如果没有哑节点,则必须编写额外的条件语句来初始化表头的值. 请特别注意以下的情况: 测试用例 说明 l1 = [0,1] l2 = [0,1,2] 当一个列表比另一个列表长时 l1 = [] l2 = [0,1] 当一个列表为空时,即出现空列表 l1 = [9,9] l2 = [1] 求和运算最后可能出现额外的进位,这一点很容易被遗忘 复杂度分析 时间复杂度: O(max(m,n)),假设m和n分别表示l1和l2的长度,上面的算法最多重复max(m,n)次. 空间复杂度: O(max(m,n)),新列表的长度最多为max(m,n) + 1. 拓展 如果链表中的数字不是按逆序存储的呢?例如:(3-&gt;4-&gt;2) + (4-&gt;6-&gt;5) = 8-&gt;0-&gt;7 代码(java)/** * Definition for singly-linked list. * public class ListNode { * int val; * LsitNode next; * ListNode (int x) { val = x;} * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode dummyHead = new ListNode(0); ListNode p = l1, q = l2, curr = dummyHead; int carry =0; //进位 while (p != null || q != null) { int x = (p != null) ? p.val : 0; int y = (q != null) ? q.val : 0; int sum = x + y + carry; carry = sum/10; curr.next = new listNode(sum%10); curr = curr.next; if(p != null) p=p.next; if(q != null) q=q.next; } if(carry&gt;0) { curr.next = new ListNode(carry); } return dummyHead.next; } }]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux环境变量总结]]></title>
    <url>%2F2018%2F05%2F28%2Flinux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[引用https://www.jianshu.com/p/ac2bc0ad3d74Linux是一个多用户多任务的操作系统,可以在Linux中为不同的用户设置不同的运行环境,具体做法是设置不同用户的环境变量. Linux环境变量分类一 按照生命周期来分,Linux环境变量可以分为两类:1 永久的:需要用户修改相关的配置文件,变量永久生效.2 临时的:用户利用export命令,在当前终端下声明环境变量,关闭shell终端失效. 二 按照作用域来分,Linux环境变量可以分为:1 系统环境变量:系统环境变量对系统中的所有用户都有效.2 用户环境变量:顾名思义,这种类型的环境变量只对特定的用户有效. Linux设置环境变量的方法一 在/etc/profile文件中增加变量,改变量将会对Linux下所有用户有效,并且是永久的. example: vim /etc/profile export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib 注意:修改文件后要想马上生效还要运行$ source ~/.bash_profile不然只能在下次重进此用户是生效. 二 在用户目录下的.bash_profile文件中增加变量[对单一用户生效(永久的)]用vim ~/.bash_profile文件中增加变量,改变仅会对当前用户有效,并且是”永久的”. vim ~/.bash.profile export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib 注意:修改文件后要想马上生效还要运行$ source ~/.bash_profile不然只能在下次重进此用户时生效. 三 直接运行export命令定义变量[只对当前shell(bash)有效(临时的),]在shell的命令行下直接使用 export 变量名=变量值定义变量，该变量只在当前的shell（BASH）或其子shell（BASH）下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。 Linux环境变量使用一 Linux中常见的环境变量有: PATH :指定命令的搜索路径 PATH声明用法: PATH=$PATH:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH n&gt; export PATH 你可以自己加上指定的路径,中间用冒号隔开.环境变量更改后,在用户下次登录时生效. echo $path 查看当前系统path路径 HOME: 指定用户的主工作目录(即用户登陆到Linux系统中时,默认的用户目录) HISTSIZE: 指保存历史命令记录的条数. LOGNAME: 指当前用户的登陆名. HOSTNAME: 指定主机的名称,许多应用程序如果用到主机名的话,通常是从这个环境变量中来取得的 SHELL: 指当前用户用的是哪种shell. LANG/LANGUGE: 和语言相关的环境变量,使用多种语言的用户可以修改此环境变量. MAIL: 指当前用户的邮件存放目录. 注意:上述变量的名字并不固定,如:HOSTNAME在某些Linux系统中可能设置成HOST 二 Linux也提供了修改和查看环境变量的命令,下面通过几个实例来说明: echo 显示某个环境变量值 echo $PATH export 设置一个新的环境变量 export HELLO=”hello”(可以无引号) env 显示所有环境变量 set 显示本地定义的shell变量 unset 清除环境变量 unset HELLO readonly 设置只读环境变量 readonly HELLO 三 C程序调用环境变量函数 getenv() 返回一个环境变量. setenv() 设置一个环境变量. unsetenv() 清除一个环境变量.]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!]]></title>
    <url>%2F2018%2F05%2F11%2FWARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED%2F</url>
    <content type="text"><![CDATA[参考: https://blog.csdn.net/nahancy/article/details/51052127问题On branch masternothing to commit, working tree clean@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the DSA key sent by the remote host isSHA256:br9IjFspm1vxR3iA35FWE+4VTyz1hYVLIE2t1/CeyWQ.Please contact your system administrator.Add correct host key in /Users/xiongzixu/.ssh/known_hosts to get rid of this message.Offending RSA key in /Users/xiongzixu/.ssh/known_hosts:1DSA host key for github.com has changed and you have requested strict checking.Host key verification failed.fatal: Could not read from remote repository. Please make sure you have the correct access rightsand the repository exists. 原因:找了好久发现有篇文章里面提到.ssh/known_hosts文件,原来known_hosts是记录远程主机的公钥的文件，之前更新了系统，而保存的公钥还是未重装系统的系统公钥，在ssh链接的时候首先会验证公钥，如果公钥不对，那么就会报错 解决方案(3种): 1: 使用shh-keygen 命令（强烈建议使用此方法） 比如我们要将172.16.152.209的公钥信息清除，使用命令（请自己将172.16.152.209替换成自己的IP或域名）： 2: 将known_hosts文件中的与登录错误的IP的公钥删除即可，下图就是我的218机子的公钥（实则是之前系统的公钥），然后将其删除，再ssh 登录 great 登录成功了。 3: 将known_hosts文件中的内容清空即可，但不建议使用此方法，里面还保存有其他机子的公钥。]]></content>
  </entry>
  <entry>
    <title><![CDATA[mac下chrome快捷键]]></title>
    <url>%2F2018%2F05%2F09%2Fmac%E4%B8%8Bchrome%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[Chrome在grwin环境下的刷新是F5,强制刷新是Ctrl+F5 Mac下Chrome的刷新是command+R,强制刷新为command+shift+R option+shift+可以打出(logo) 引用 https://blog.csdn.net/fjh658/article/details/8860967标签页和窗口快捷键 按键 作用 ⌘+N 打开新窗口 ⌘+T 打开新标签 ⌘+shift+N 在隐身模式下打开新窗口 按 ⌘+O，然后选择文件 在 Google Chrome 浏览器中打开计算机中的文件。 按住 ⌘ 键，然后点击链接。或用鼠标中键（或鼠标滚轮）点击链接。 从后台在新标签页中打开链接。 按住 ⌘+Shift 键，然后点击链接。或按住 Shift 的同时用鼠标中键（或鼠标滚轮）点击链接。 在新标签页中打开链接并切换到刚打开的标签页。 按住 Shift 键，然后点击链接。 在新窗口中打开链接。 ⌘+Shift+T 重新打开上次关闭的标签页。Google Chrome 浏览器可记住最近关闭的 10 个标签页。 将标签页拖出标签栏。 在新窗口中打开标签页。 将标签页从标签栏拖到现有窗口中。 在现有窗口中打开标签页。 同时按 ⌘+Option 和左或右箭头键。 左右切换标签页。 ⌘+W 关闭当前标签页或弹出窗口。 ⌘+Shift+W 关闭当前窗口。 ⌘+Y 打开历史记录 按 Delete 或 ⌘-[ 转到当前标签页的上一页浏览历史记录。 按 Shift-Delete 或 ⌘-] 。 转到当前标签页的下一页浏览历史记录。 按住 Shift，然后点击窗口左上方的 + 按钮。 最大化窗口。 ⌘+M 最小化窗口。 ⌘+H 隐藏chrome浏览器 ⌘+option+H 隐藏其他所有窗口 ⌘+Q 关闭浏览器 ⌘+Shift+B 打开和关闭书签栏 ⌘+Option+B 打开书签管理器 ⌘- 打开偏好设置对话框 ⌘+Y 打开历史记录 ⌘+shift+J 打开下载内容页面 ⌘+shift+delete 打开清除浏览记录对话框 ⌘+shift+M 在多个用户之间切换 输入搜索词,然后按Enter 使用默认搜索引擎进行搜索 输入搜索引擎关键字,按空格键,再输入搜索字词,再按Enter 使用与关键字相关联的搜索引擎进行搜索 首先输入搜索引擎网址,然后在系统提示时按Tab,输入搜索字词,再按Enter 使用与网址相关联的搜索引擎进行搜索 输入网址，然后按 ⌘-Enter。 在新后台标签页中打开网址。 ⌘-L 突出显示网址。 ⌘-Option-F 将“?”置于地址栏中。在问号后输入搜索字词可用默认搜索引擎执行搜索。 同时按 Option 和向左箭头键。 将光标移到地址栏中的前一个关键字词 同时按 Option 和向右箭头键。 在地址栏中将光标移到下一个关键字词 同时按 Shift-Option 和向左箭头键。 在地址栏中突出显示上一关键字词 同时按 Shift-Option 和向右箭头键。 在地址栏中突出显示下一关键字词 ⌘-Delete 在地址栏中删除光标前的关键字词 用键盘上的方向键从地址栏下拉菜单中选择一个条目，然后按 Shift-Fn-Delete。 从浏览历史记录中删除所选条目（如果可以）。 ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt ⌘+ tt]]></content>
  </entry>
  <entry>
    <title><![CDATA[hhkb配置Mac]]></title>
    <url>%2F2018%2F05%2F07%2Fhhkb%E9%85%8D%E7%BD%AEMac%2F</url>
    <content type="text"><![CDATA[引用https://www.douban.com/note/657191565/Pro2,总共有60个 按键 方向键为 上: Fn + [ 下: Fn + / 左: Fn + ; 右: Fn + ‘ 光标移动的快捷键就和Mac系统一致: 上一行: ctrl+p 下一行: ctrl+n 跳到行首: ctrl+a]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客备份]]></title>
    <url>%2F2018%2F05%2F05%2FHexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[参考：https://www.jianshu.com/p/57b5a384f234遇到的坑 CNAME必须放在source目录中不然会导致页面无法访问404 注意千万不要合并主干否则......你懂的]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux下tar.gz,tar,bz2,zip等压缩与解压缩总结]]></title>
    <url>%2F2018%2F04%2F28%2FLinux%E4%B8%8Btar-gz-tar-bz2-zip%E7%AD%89%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[tar命令基本用法:tar命令的选项有很多(用man tar可以查看到),常用的就下面几个 tar -cf all.tar *.jpg 这条命令是将所有.jpg的文件打成一个名为all.tar的包.-c是表示 生成新的包,-f指定包的文件名. tar -rf all.tar *.gif 这条命令是将所有.gif的文件增加到all.tar的包里面去.-r是表示增 加文件的意思. tar -uf all.tar logo.gif 更新原来all.tar中logo.gif文件,-u是表示更新文件的意思 tar -tf all.tar 列出all.tar中的所有文件,-u表示更新文件的意思 tar -xf all.tar 解出all.tar中的所有文件,-x是解开文件的意思 以上就是tar的最基本的用法,为了方便用户在打包解包的同时可以压缩或解压文件,tar提供了一种特殊的功能.就是tar可以在打包或解包的同时调用其他的压缩程序,比如调用gzip bzip2等. 1)tar调用gzipgzip是GNU组织开发的一个压缩程序,.gz结尾的文件是gzip压缩的结果.与gzip相对 的解压程序是gunzip.tar中使用-z这个参数来调用gzip tar -czf all.tar.gz *.jpg 将所有.jpg的文件打成一个tar包,并将其用gzip压缩,生成一个gzip压缩过的包,包名为all.tar.gz tar -xzf all.tar.gz 解压包 2) tar调用bzip2bzip2是一个压缩能力更强的压缩程序,.bz2结尾的文件是bzip压缩的结果. 与bzip相对的解压程序是bunzip2.tar中使用-j这个参数来调用gzip. tar -cjf all.tar.bz2 *.jpg 这条命令是将所有.jpg的文件打成一个tar包,并且将其用bzip2压缩,生成一个bzip2相对的压缩]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[.zip和.tar.gz的文件有什么区别]]></title>
    <url>%2F2018%2F04%2F27%2Fzip%E5%92%8C-tar-gz%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[转自:https://blog.csdn.net/suyu_yuan/article/details/52733117.tar.gz 压缩格式用于unix的操作系统,但在windows系统中用WinRar工具 同样可以解压缩tar.gz格式的 zip流行于windows系统上的压缩文件(其他系统也可以打开).zip格式开发且 免费.zip支持分卷压缩,128/256-bitAES加密算法等功能.zip的含义是速度,其 目标是为顶替ARC而诞生的”职业”压缩软件. tar是”table archive”(磁带存档)的简称,它出现在还没有软盘驱动器 硬盘和 光盘驱动器的计算机早期阶段,随着时间的推移,tar命令逐渐变为一个将很多文件 进行存档的工具,目前许多用于Linux操作系统的程序就是打包为tar档案文件的形式 .在Linux里面,tar一般和其他没有文件管理的压缩算法文件结合使用,用tar打包整 个文件目录结构成一个文件,再用gz,bzip等压缩算法压缩成一次,也是Linux常见的 压缩归档的处理方法.]]></content>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16.04The System is running in low-graphics mode终极解决办法]]></title>
    <url>%2F2018%2F04%2F26%2Fubuntu16-04_The_system_is_running_in_low_graphics_mode%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[问题: The system is running in low-graphics mode引用: https://blog.csdn.net/gpwner/article/details/79178832大道至简,找了好多答案,最后发现这种方法最简单 sudo apt update sudo apt upgrade]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux简介]]></title>
    <url>%2F2018%2F04%2F24%2FLinux%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Linux内核最初是由芬兰人李纳斯.托瓦兹(Linux Torvalds)在赫尔辛基上大学时出于个人爱好而编写的. Linux是一套免费使用和自由传播的类Unix操作系统.是一个基于POSIX和UNIX的多用户 多任务 支持多线 程和多CPU的操作系统. Linux能运行主要的UNIX工具软件 应用程序和网络协议.它支持32位和64位硬件.Linux继承了Unix以网络 为核心的设计思想,是一个性能稳定的多用户网络操作系统. Linux的发行版本Linux的发行版本简单说就是讲Linux内核与应用软件做一个打包. 目前市面上比较知名的发行版有: UbuntuReaHatCentOSDebianFeforaSuSEOpenSUSEArch LinuxSolusOSLinux 系统启动过程Linux系统的启动的启动过程分为5个阶段 内核的引导 运行init 系统初始化 建立终端 用户登录系统 init 程序的类型 SysV:init,CentOS5之前,配置文件: /etc/initab. Upstart:init,CentOS6,配置文件: /etc/inittab,/etc/init/*.conf. Systemd: systemd,CenOS 7配置文件: /user/lib/systemd/system /etc/systemd/system 内核引导当计算机打开电源后,首先是BIOS开机自检,按照BIOS中设置的启动设备(通常是硬盘)来启动.操作系统接管硬件以后,首先读入/boot目录下的内核文件 操作系统 —–&gt; boot —&gt; 运行initinit进程是系统所有进程的起点,你可以把它比拟成系统所有进程的老祖宗,没有这个进程,系统中任何进程都不会启动.init程序首先需要读取配置文件 /etc/inittab. 操作系统 —–&gt; boot —&gt; init进程 —&gt;运行级别 Linux系统有七个运行级别 0 : 系统停机状态,系统默认运行级别不能设为0,否则不能正常启动 1 : 单用户工作状态,root权限,用于系统维护,禁止远程登录 2 : 多用户状态(没有NFS) 3 : 完全的多用户状态,登录后进入控制台命令行模式 4 : 系统未使用,保留 5 : X11控制台,登录后进入图形GUI模式 6 : 系统正常关闭并重启,默认运行级别不能设为6,否则不能正常启动 系统初始化在init的配置文件中有这么一行: si:sysinit:/etc/rc.d/rc.sysint 它调用执行了 /etc/rc.d/rc.sysinit 它调用执行了/etc/rc.d/rc.sysinit,而rc.sysinit是一个bash shell 的脚本 ,它主要是完成一些系统初始化的工作,rc.sysinit是每一个运行级别都 要首先运行的重要脚本. 它主要完成的工作有:激活交换区,检查磁盘,加载硬件模块以及其他一些需要优先执行 任务. 15:5:wait:/etc/rc.d/rc 5 这一行表示以5为参数运行/etc/rc.d/rc, /etc/rc.d/rc是一个shell脚本,它接收5作为参数 ,去执行/etc/rc.d/rc5.d/目录下的所有的rc启用脚本,/etc/rc.d/rc5.d/目录中的这些启动 脚本实际上都是一些连接文件,而不是真正的rc启动脚本,真正的rc启动脚本实际上都是放在 /etc/rc.d/init.d/目录下 而这些rc启动脚本有着类似的用法,它们一般能接受start stop restart status等参数. /etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的连接文件,用于以S开头的启动脚本 ,将以start参数来运行. 而如果发现存在相应的脚本也存在K打头的连接,而且已经处于运 行状态了(以/var/lock/subsys/下的文件为标志),则将首先以stop为参数停止这些已经启动 了的守护进程,然后再重新运行. 这样做是为了保证当init改变运行级别时,所有相关的守护进程将重启. 至于在每个运行级别中将运行哪些守护进程,用户可以通过chkconfig或setup中的 “System Services”来自行设定. 操作系统 —&gt; /boot —&gt; init进程 —&gt; 运行级别 —&gt; /etc/init.d 建立终端rc执行完毕后,返回init.这时基本系统环境已经设置好了,各种守护进程也已经启动了. init接下来会打开6个终端,以便用户登录系统.在inittab中的以下6行就是定义了6个终 端: 1:2345:respawn:/sbin/mingetty tty1 2:2345:respawn:/sbin/mingetty tty2 3:2345:respawn:/sbin/mingetty tty3 4:2345:respawn:/sbin/mingetty tty4 5:2345:respawn:/sbin/mingetty tty5 6:2345:respawn:/sbin/mingetty tty6 从上面可以看出在2 3 4 5的运行级别中都将以 respawn 方式运行mingetty程序能打开终端 设置模式.同时它会显示一个文本登录界面,这个界面就是我们经常看到的登录界面,在这个等 录界面中会提示用户输入用户名,而用户输入的用户名将作为参数传给login程序来验证用户的 身份 用户登录系统一般来说,用户的登录方式有三种: 1 命令行登录 2 ssh登录 3 图形界面登录 操作系统 –&gt; /boot –&gt; init进程 –&gt; 运行级别 –&gt; /etc/init.d –&gt; 用户登录 对于运行级别为5的图形方式用户来说,他们的登录是通过一个图形化的登录界面.登录 成功后可以直接进入 KDE 或 Gnome 等窗口管理器 而本文主要讲的是文本登录:当我们看到mingetty的登录界面时,我们就可以输入用户名 和密码来登录系统了. Linux的账号验证程序是login,login会接收mingetty传来的用户名作为用户名参数. 然后login会对用户名进行分析:如果用户名不是root,且存在/etc/nologin文件,login 将输出nologin文件的内容,然后退出. 这通常用来系统维护时防止非root用户登录.只有/etc/securetty中登记了的终端才允许 root用户登录,如果不存在这个文件,则root用户可以在任何终端上登录. /etc/usetty文件用于对用户作出附加访问限制,如果不存在这个文件,则没有其他限制 图形模式与文字模式的切换方式Linux预设提供了六个命令 窗口终端机让我们来登录. 默认我们登录的就是第一个窗口,也就是tty1,这六个窗口分别为 tt1,tt2,tt3…tt6,你可以按下 Ctrl + Alt + F1 ~ F6 来切换它们 如果你安装了图形界面,默认情况下是进入图形界面的,此时你就可以按Ctrl+Alt+F1~F6来进入其中一个命令窗口界面.当你进入命令窗口界面后再返回图形界面只要按下 Ctrl + Alt + F7就回来了 如果你用的vmware虚拟机,命令窗口切换的快捷键位Alt+Space+F1~F6.如果你在图形界面下 请按Alt+Shift+Ctrl+F1~F6切换至命令窗口. 操作系统 –&gt; /boot –&gt; init进程 –&gt; 运行级别 –&gt; /etc/init.d | | login shell &lt;–用户登录 Linux 关机在Linux领域内大多用再服务器上,很少遇到关机的操作,毕竟服务器上跑一个服务时永无止境的,除非特殊情况下,不得已才会关机. 正确的关机流程为 : sync &gt; shutdown &gt; reboot &gt; halt 关机指令为 : shutdown,你可以man shutdown来看一下邦之文档. sync 将数据由内存同步到硬盘中 shutdown 关机指令,你可以man shutdown来看一文档 shutdown -h 10 10分钟后关机 shutdown -h now 立马关机 shutdown -h 20:25 系统会在今天20:25关机 shutdown -h +10 十分钟后关机 shutdown -r now 立马重启 shutdown -r +10 十分钟后重启 reboot 重启,等同于 shutdown -r now halt 关闭系统,等同于 shutdown -h now 和 poweroff 最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。关机的命令有 shutdown –h now halt poweroff 和 init 0 , 重启系统的命令有 shutdown –r now reboot init 6。]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS防火墙设置与端口开放的方法]]></title>
    <url>%2F2018%2F04%2F23%2FCentOS%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE%E4%B8%8E%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Centos升级到7后,内置的防火墙已经从iptables变成了firewalld,所以,端口 的开启还是要从两种情况来说明的,即iptables和firewalld. 更多内容请参考Rehat官网 iptables开启防火墙(重启后永久有效) : chkconfig iptables on 关闭防火墙(重启后永久有效) : chkconfig iptables off 开启防火墙(即时生效,重启后失效) : service iptables start 关闭防火墙(即时生效,重启后失效) : service iptables stop 重启防火墙 :service iptables restartd 查看打开的端口 /etc/init.d/iptables status 打开某个端口(以8080为例) (1) 开启端口 iptables -A INPUT -p tcp --dport 8080 -j ACCEPT (2)保存并重启防火墙 /etc/rc.d/init.d/iptables save /etc/init.d/iptables restart 打开49152~65534之间的端口 iptables -A INPUT -p tcp --dport 49152:65534 -j ACCEPT 同样,这里需要对设置进行保存,并重启防火墙. 其他打开方式 我们还可以通过修改/etc/sysconfig/iptables文件方式开启端口,如下 vi /etc/sysconfig/iptables 然后再文件中增加一行 -A RH-Firewall-1-INPUT -m state -state NEW -m tcp -p tcp -dport 8080 -j ACCEPT 参数说明: -A 参数就看成是添加一条规则 -p 指定是什么协议,我们常用的tcp协议,当然也有udp,例如53端口的DNS -dport 就是目标端口,当数据从外部进入服务器为目标端口 -sport 数据从服务器出去,则为数据源端口使用 -j 就是指定是ACCEPT -接收或者DROP不接收 firewalldCentos7默认安装了firewalld,如果没有安装的话,可以使用 yum install firewalld firewalld-config进行安装. 1启动防火墙 systemctl start firewalld 2 禁用防火墙 systemctl stop firewalld 3 设置开机启动 systemctl enable firewalld 4 停止并禁用开机启动 systemctl disable firewalld 5 重启防火墙 firewall-cmd --reload 6 查看状态 systemctl status firewalld或者 firewall-cmd --state 7查看版本 firewall-cmd --version 8查看帮助 firewall-cmd --help 9查看区域信息 firewall-cmd --get-active-zones 10查看指定接口所属区域信息 firewall-cmd --get-zone-of-interface=eth0 11 拒绝所有包 firewall-cmd --panic-on 12 取消拒绝状态 firewall-cmd --panic-off 13 查看是否拒绝 firewall-cmd --query-panic 14将接口添加到区域(默认接口都在public) firewall-cmd --zone=public --add-interface=eth0(永久生效再加上 --permanent 然后reload防火墙) 15 设置默认接口区域 firewall-cmd --set-default-zone=public(立即生效,无需重启) 16 更新防火墙规则 firewall-cmd --reload或firewall-cmd --complete-reload(两 者的区别就是第一个无需断开连接,就是firewalld特性之一动态 添加规则,第二个需要断开连接,类似重启服务) 17 查看指定区域所有打开的端口 firewall-cmd --zone=public --list-ports 18指定区域打开端口(记得重启防火墙) firewall-comd --zone=public --add-port=80/tcp(永久生效再加上 --permanent) 说明: -zone 作用域 -add-port=8080/tcp 添加端口,格式为:端口/通讯协议 -permanent #永久生效,没有此参数重启后失效 参考文章： http://havee.me/linux/2015-01/using-firewalls-on-centos-7.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 远程连接22端口]]></title>
    <url>%2F2018%2F04%2F23%2FUbuntu-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A522%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[安装OpenSSHUbuntu缺省没有安装SSH Server,使用以下命令安装:sudo apt-get install openssh-server openssh-client配置完成后重启命令sudo /etc/init.d/ssh restart]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin]]></title>
    <url>%2F2018%2F04%2F20%2FKotlin%2F</url>
    <content type="text"><![CDATA[引用: https://baike.baidu.com/item/Kotlin/1133714?fr=aladdinKotlin 是一个用于现代多平台应用的静态编程语言,有JetBrains开 发. Kotlin可以编译称为Java字节码,也可以编译成JavaScript,方便在没有 JVM的设备上运行. Kotlin已正式成为Android官方支持开发语言. 简介JetBrains,作为广受欢迎的java IDE intelliJ的提供商,在Apache许可 下已经开源其Kotlin编程语言. 设计目标创建一种兼容java的语言 让它比java更安全,能够静态检测常见的陷阱.如:引用空指针 让它比java更简洁,通过支持variable type inference,higher-order function(closures),extension functions,mixins and first-class delegation等实现. 让它比最成熟的竞争对手Scala语言更加简洁. 开发源代码其基础编译器(他们将其改为kompiler---开创了一系列以K字打头的用语 ---甚至连 contributors这类词他们也用改成了kontributors)可以被独立 出来并嵌入到Maven Ant或Gradle工具链中,这使得在IDE中开发的代码能够 利用已有的机制来构建,从而尽可能的减少了在新环境中使用所受的干预,哪 怕与那些没有安装Kotlin插件的开发人员一起合作项目也没有问题. The Intellij Kotlin插件扩展了Java编译器使得Kotlin代码能够得以编写 编译和调试.除此之外,关于基本的Java集合,已经有编写好的帮助函数,可以 更顺畅地衔接在java8中出现的集合扩展. 有两篇文章对Kotlin与Java以及Scala分别进行了比较,对各自特性和异同进 行了对比.即便Scala可能还是更为强大些,Kotlin还是尝试提供比java更好 的函数 模式匹配 空指针预防和泛型.该语言同时支持特征(traits)和模式匹配 Kotlin插件在当前版本的IntelliJ和Eclipse中均已能使用. Kotlin,类似Xtend一样,旨在提供一种更好的java而非重建整个新平台.这两种 语言都向下编译为字节码(虽然Xtend是首先转换成相应的java代码,再让java 编译器完成繁重的工作),而且两者都引入了函数和扩展函数(在某个有限范围 内静态地增加一个新方法到某个已有类型的能力).Xtend是基于Eclipse的,而 Kotlin是基于IntelliJ的,两者都提供无界面构建.能够首先演变到其他IDE的语 言有可能成为最后的赢家.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu Linux下安装软件方法]]></title>
    <url>%2F2018%2F04%2F20%2FUbuntu-Linux%E4%B8%8B%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[引用: https://www.linuxidc.com/Linux/2015-01/111216.htmLinux系统中,软件通常以源代码或者编译包的形式提供. (1)源代码需要编译为二进制的机器码才能够使用,安装比较 耗时,不过您可以自行调节编译选项,决定需要的功能或组 件,或者针对硬件平台做一些优化. (2)预编译的软件包,通常是由软件的发布者进行编译,您只要 将软件拷贝到系统中就可以了.考虑到预编译软件包的适用性 ,预编译软件通常不会针对某种硬件平台优化.它所包含的功能 和组件也是通用的组合. 1 deb包的安装方式deb是debian系Linux的包管理方式,Ubuntu是属于debian系的 Linux发行版,所以默认支持这种软件安装方式,当下载到一个 deb格式的软件后,在终端输入这个命令就能安装: sudo dpkg -i *.deb 或者直接双击安装. 2 编译安装方式(小贴士: 使用编译安装前,需要建立编译环境,使用一下命令建立 基本的编译环境: sudo apt-get install bulid-essential) 在Linux的世界,有很多软件只提供了源代码给你,需要你自己进行 编译安装,一般开源的软件都会使用tar.gz压缩档来进行发布,当然 还有其他的形式,拿到源代码的压缩文档,把它解压缩到/tmp目录下 ,进入/tmp/软件目录,然后执行下三个命令: 1 ./configure 2 make 3 sudo make install 在第一步./configure时可能会提示说某某软件找不到,例如提示”libgnome”这个开发包找不到,那就把libgnome这个关键词copy,然后打开新立得软件管理器,在里面搜索libgnome这个关键词,就会找到libgnome相关的项目,把前面有个ubuntu符号的libgnome包(注意:同样需要安装dev包,但可以不装doc包)全部安装,通过这个方法把./configure过程中缺失的开发包全部装上就ok了,第一步顺利通过,第二三步基本问题不大. 3 apt-get安装方法ubuntu世界有许多软件源,在系统安装篇已经介绍过如何添加源,apt-get的基本 软件安装命令是: sudo apt-get install 软件名 4 新立得软件包管理打开: 系统 --系统管理--新立得软件包管理,这个工具其实跟apt一样,可以搜索 ,下载,安装ubuntu源里的软件,具体安装方式很简单,看看界面应该会懂,就不详细 介绍了. 5 二进制包的安装方式有不少开源的商业软件都会采用这种方式发布Linux软件,例如google earth,拿到 二进制软件后,把它放到/tmp目录,在终端下进入安装目录,在安装目录下执行: ./软件名 然后按照一步步提示,就能安装该软件.例如安装realplayer播放器:你直接到官网 http://www.real.com/linux 下载RealPayer的安装包,安装包是.bin格式,用如下 命令安装: chomd +x RealPlayer11GOLD.bin ./RealPlayer11GOLD.bin 6 rpm包的安装方式rpm 包是deb包最常见的一种管理方式,但ubuntu同样可以使用rpm的软件资源.首先 我们安装一个rpm转deb的软件 sudo apt-get install alien 然后就可以对rpm格式的软件转换成deb格式了: alien -d *.rpm 然后就可以用deb的安装方式进行软件安装.也可以不需转换而直接对rpm包进行安装: alien -i *.rpm 更多的alien使用方法可以用-h参数查看相应说明文档. 7 其他安装方式其他安装方式一般还有脚本安装方式,这类软件,你会在安装目录下发现类似后缀名的文件 ,如: .sh .py .run等的,有的甚至连后缀名都没有,直接一个INSTALL文件,对于这种软件, 可以尝试以下几种方式安装: 最简单的就是直接在软件目录下输入: ./软件名*(注意有一个*号,那是一般可以通配所有 后缀名) 或者: sh 软件名.sh 或者: python软件名.py TIP:如以上方法均无法安装软件,可以参考软件源代码下面的README文档.]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Learn Linux]]></title>
    <url>%2F2018%2F04%2F20%2FLearn-Linux%2F</url>
    <content type="text"><![CDATA[学习Linux问题与总结1 如何打开Ubuntu命令行工具 按快捷键,Ctrl+Alt+F2/F3/F4/F5/F6,后面的F2到6是或者的意思 然后会进入命令行的登录界面,这时候需要输入用户名和密码. 密码是不可见的,输入后直接回车即可 2 如何关闭Ubuntu命令行工具(即切换到桌面) 按快捷键,Ctrl+Alt+F7 3 Ubuntu下查看IP ifconfig -a 4 使用locale查看系统当前编码5 Ubuntu设置root用户初始密码安装ubuntu成功后,都是普通用户权限,并没有最高root权限如果需要root权限的时候,通常都会在命令前面加上sudo.有时 候感觉很麻烦... 我们一般使用su命令来直接切换到root用户的,但是如果没有设 置root初始密码,就会抛出su : Authentication failure这样的 问题.所以我们只要给root用户设置一个初始密码就好了. 输入sudo passwd命令,输入一般用户密码并设定root用户密码. 设定root密码成功后,输入su命令,并输入刚才设定的root密码, 就可以切换成root 了.提示符$代表一般用户,提示符#代表root用户 总结 sudo passwd 设置初始root用户密码 6 查看所有用户组$cat /etc/group ssl-cert:x:110:postgres 最前面一个字段ssl-cert是用户组名,最后一个字段postgres是用户名 7 查看所有用户$sudo cat /etc/shadow postgres:$6$m8anDHdE$FDY4j0CdAbgeLOM90EH1xCW/IMqHEZwM87sepyHHjUYccdmFOCVaFealGTd2zGBVfDV.AR9CWTlGz0Sw/JivL1:15910:0:99999:7::: postgres是用户名 8 远程连接Linux(Ubuntu配置SSH服务)端口22安装OpenSSH Ubuntu缺省没有安装SSH Server,使用一下命令安装: sudo apt-get install openssh-server openssh-client 不过Ubuntu缺省已经安装了ssh client. 配置完成后重启: sudo /etc/init.d/ssh restart windows客户端用putty连接命令shell模式 9 如何查看Linux系统版本信息查看Linux内核版本命令(两种方式) cat /proc/version uname -a 查看Linux系统版本命令(3种方式) lsb_release -a 这个命令适用于所有的Linux发行版,包括ReHat SUSE Debian…等发行版 cat /etc/redhat-release, 这种方式只适合Redhat系的Linux cat /etc/issue 这种方式适用于所有的Linux发行版 10 ubuntu 安装 上传下载工具lrzszapt-get install lrzsz y 11 Linux中运行.sh(Shell脚本)文件有两种方法: 1 直接./加文件名.sh,如运行hello.sh为./hello.sh[hello.sh必须有x权限] 2 直接sh加上文件名.sh,如运行hello.sh为sh hello.sh[hello.sh]可以没有x权限] 步骤 1 cd到.sh文件所在目录 2 给.sh文件添加x执行权限,已hello.sh文件为例 chmod u+x hello.sh 3 执行 ./hello.sh 或者 sh hello.sh 备注 绝对路径执行*.sh以hello.sh 为例 ./home/test/shell/hello.sh ,可以这样运行时因为当前登录用户是root,当前路径 是在/下,.代表当前路径. /home/test/shll/hello.sh,此路径为真实绝对路径,但此方法运行的条件是该用户对 hello.sh拥有执行权限,即已执行chmod u+x hello.sh sh/home/test/shell/hello.sh,用sh命令执行shell脚本不需要该用户拥有hello.sh的执行 权限即可执行. 12 zip 或unzip的安装和使用Linux系统没有自带的压缩解压缩工具;需要我们自己安装;当用到zip或者unzip如果没有安装 就会出现unzip:Command Not Found 或 zip:Command Not Found; 1 apt-get安装: apt-get install zip 2 yum安装 yum install -y unzip zip 13 虚拟机中CentOS无法上网(connect:network is unreachable)表现:ping时提示connet network is unreachable 原因: ifconfig发现网卡没有分配IP地址,考虑是DHCP的问题. 临时解决方案: sudo dhclient,发现可以上网,重启又没有IP了, 一劳永逸解决方案: 修改etc目录下网卡配置信息 vim /etc/sysconfig/network-scripts/ifcfg-[网络设备名] 发现最后一行的ONBOOT选项竟然是no,将其改为yes,然后就正常了. 14 重启系统 reboot init 615 关机halt 立刻关机 poweroff 立刻关机 shutdown -h now 立刻关机(root用户使用) shutdown -h 10 10分钟后自动关机 如果是通过shutdown命令设置关机的话,可以用shutdown -c命令取消重启 推荐使用shutdown命令 16 centOS安装lrzszyum install lrzsz]]></content>
  </entry>
  <entry>
    <title><![CDATA[php调用shell的方法]]></title>
    <url>%2F2018%2F04%2F20%2Fphp%E8%B0%83%E7%94%A8shell%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[引用:http://www.jb51.net/article/57118.htm这篇文章主要介绍了PHP调用shell的方法,包括相关的原理 注意事项及函数的用法,需要的朋友可以参考下一 配置查看php.ini中配置是否打开安全模式,主要是以下三个地方 safe_mode = (这个如果是off下面两个就不用管了) disable_functions = safe_mode_exec_dir = 二使用由于PHP是基本是用于WEB程序开发的,所以安全性成了人们考虑的一个重要方面.于是PHP的设计者们给 PHP加了一个门:安全模式.如果运行在安全模式下,那么PHP脚本中将受到如下四个方面的限制: 执行外部命令 在打开文件时有些限制 连接MYSQL数据库 基于HTTP的认证 在安全模式下,只有在特定目录中的外部程序才可以被执行,对其他程序的调用将被拒绝.这个目录可以在 PHP.ini文件中用safe_model_exex_dir指令,或在编译PHP时加上–with-exec-dir选项来指定,默认是 /usr/local/php/bin. 如果你调用一个应该可以输出结果的外部命令(意思是PHP脚本没有错误),得到的却是一片空白,那么很可能 你的网管已经把PHP运行在安全模式下了. 三如何做在PHP中调用外部命令,可以用如下三种方法来实现: 1 ) 用PHP提供的专门函数 php提供了3个专门的执行外部命令的函数: system(),exec(),passthru().system()原型: string system(string command[,int return_var]) system()函数和其他语言中的差不多,它执行给定的命令,输出和返回结果.第二个参数是可选的,用来得到命令执行后的状态码. 例子: system(“/usr/local/bin/webalizer/webalizer”); exec()原型: string exex(string command[,string array[,int return_var]]) exec()函数与system()类似,也执行给定的命令,但不输出结果,而是返回结果的最后一行.虽然它只返回命令 结果的最后一行,但用第二个参数array可以得到完整的结果,方法是吧结果逐行追加到 array的结尾处.所 以如果array不是空的,在调用之前最好用unset()把它清掉.只有指定了第二个参数时,才可以用第三个参数,用来取得命令执行的状态码. 例子: exec(“/bin/ls -|”); exec(“/bin/ls -|”,$res);’ $res是一个数据,每个元素代表结果的一行 exec(“/bin/ls -|”,$res,$rc);’ $rc的值是命令/bin/ls -|的状态码.成功的情况下通常是0 passthru() 原型: void passthru(string command[,int return_var]) passthru()只调用命令,不返回任何结果,但把命令的运行结果原样 地直接输出到标准输出设备上.所以passthru()函数经常用来调用像 pbmplus(Unix下的一个处理图片的工具,输出二进制的原始图片的流) 这样的程序.同样它也可以得到命令执行的状态码. 例子 header(“Content-type:image/gif”); passthru(“./ppmtogif hunte.ppm”);]]></content>
  </entry>
  <entry>
    <title><![CDATA[My New Post]]></title>
    <url>%2F2018%2F04%2F20%2FMy-New-Post%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[learning-hexo]]></title>
    <url>%2F2018%2F03%2F29%2Flearning-hexo%2F</url>
    <content type="text"><![CDATA[this is a test sdlfadf sfadf sdfad chapter 1chapter 2]]></content>
  </entry>
</search>
